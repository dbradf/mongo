# Generated from bonsai
# Generated at: 2021-04-15 23:55:20.889723 UTC
---
buildvariants:
  - name: linux-64-repeated-execution
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - rhel80-large
      - name: ".integration !.audit"
        distros:
          - rhel80-medium
      - name: jsCore
      - name: jsCore_txns
      - name: ".logical_session_cache"
      - name: parallel_gen
      - name: ".concurrency .common !.kill_terminate"
        distros:
          - rhel80-medium
      - name: concurrency_replication_causal_consistency_gen
    display_name: ~ Linux Repeated Execution
    run_on:
      - rhel80-small
    expansions:
      compile_flags: "-j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars --enable-free-mon=off --enable-http-client=off"
      large_distro_name: rhel80-medium
      resmoke_repeat_suites: "10"
      scons_cache_scope: shared
      test_flags: "--excludeWithAnyTags=requires_http_client --repeatSuites=10 --shuffle"
    stepback: false
  - name: linux-64-debug-required
    tasks:
      - name: compile_test_and_package_parallel_core_stream_TG
        distros:
          - rhel80-xlarge
      - name: compile_test_and_package_parallel_unittest_stream_TG
        distros:
          - rhel80-xlarge
      - name: compile_test_and_package_parallel_dbtest_stream_TG
        distros:
          - rhel80-xlarge
      - name: ".aggregation !.encrypt"
      - name: ".auth !.audit !.gle !.multiversion"
      - name: bulk_gle_passthrough
      - name: ".causally_consistent !.wo_snapshot"
      - name: ".change_streams !.secondary_reads"
      - name: ".misc_js"
      - name: disk_wiredtiger
      - name: free_monitoring
      - name: ".integration !.audit"
      - name: ".jscore .common"
      - name: jsCore_txns_large_txns_format
      - name: jsonSchema
      - name: libunwind_tests
      - name: ".multi_shard"
      - name: multi_stmt_txn_jscore_passthrough_with_migration_gen
      - name: ".ocsp"
      - name: ".read_write_concern"
      - name: ".replica_sets !.encrypt"
      - name: replica_sets_reconfig_jscore_passthrough_gen
      - name: replica_sets_reconfig_jscore_stepdown_passthrough
      - name: ".retry"
      - name: ".read_only"
      - name: session_jscore_passthrough
      - name: sharded_multi_stmt_txn_jscore_passthrough
      - name: ".sharding .jscore !.wo_snapshot"
      - name: sharding_gen
      - name: ".stitch"
      - name: server_discovery_and_monitoring_json_test_TG
        distros:
          - rhel80-large
      - name: server_selection_json_test_TG
        distros:
          - rhel80-large
    display_name: "! Shared Library Linux DEBUG"
    run_on:
      - rhel80-medium
    batchtime: 240
    expansions:
      compile_flags: "--dbg=on --opt=on -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars --enable-free-mon=on --enable-http-client=on --link-model=dynamic"
      large_distro_name: rhel80-medium
      max_sub_suites: "5"
      num_scons_link_jobs_available: "0.99"
      resmoke_jobs_factor: "0.5"
      scons_cache_mode: all
      scons_cache_scope: shared
      target_resmoke_time: "15"
      test_flags: "--excludeWithAnyTags=requires_http_client"
  - name: linux-64-debug-wtdevelop
    tasks:
      - name: compile_test_and_package_parallel_core_stream_TG
        distros:
          - rhel80-xlarge
      - name: compile_test_and_package_parallel_unittest_stream_TG
        distros:
          - rhel80-xlarge
      - name: compile_test_and_package_parallel_dbtest_stream_TG
        distros:
          - rhel80-xlarge
      - name: ".aggregation !.encrypt"
      - name: ".auth !.audit !.gle !.multiversion"
      - name: bulk_gle_passthrough
      - name: ".causally_consistent !.wo_snapshot"
      - name: ".change_streams !.secondary_reads"
      - name: ".misc_js"
      - name: disk_wiredtiger
      - name: free_monitoring
      - name: ".integration !.audit"
      - name: ".jscore .common"
      - name: jsCore_txns_large_txns_format
      - name: jsonSchema
      - name: libunwind_tests
      - name: ".multi_shard"
      - name: multi_stmt_txn_jscore_passthrough_with_migration_gen
      - name: ".ocsp"
      - name: ".read_write_concern"
      - name: ".replica_sets !.encrypt"
      - name: replica_sets_reconfig_jscore_passthrough_gen
      - name: replica_sets_reconfig_jscore_stepdown_passthrough
      - name: ".retry"
      - name: ".read_only"
      - name: session_jscore_passthrough
      - name: sharded_multi_stmt_txn_jscore_passthrough
      - name: ".sharding .jscore !.wo_snapshot"
      - name: sharding_gen
      - name: ".stitch"
      - name: server_discovery_and_monitoring_json_test_TG
        distros:
          - rhel80-large
      - name: server_selection_json_test_TG
        distros:
          - rhel80-large
    display_name: ~ Linux DEBUG WiredTiger develop
    run_on:
      - rhel80-medium
    batchtime: 240
    expansions:
      compile_flags: "--dbg=on --opt=on -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars --enable-free-mon=on --enable-http-client=on"
      resmoke_jobs_factor: "0.5"
      scons_cache_mode: nolinked
      test_flags: "--excludeWithAnyTags=requires_http_client"
      use_wt_develop: "true"
    modules:
      - wtdevelop
  - name: linux-64-duroff
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - rhel80-xlarge
      - name: ".aggfuzzer .common"
      - name: aggregation
      - name: aggregation_auth
      - name: auth_gen
      - name: bulk_gle_passthrough
      - name: ".misc_js !.sharded"
      - name: concurrency
      - name: concurrency_simultaneous_gen
      - name: disk_wiredtiger
      - name: failpoints_auth
      - name: ".jscore .common !.sharding !.decimal !.txns"
      - name: ".jstestfuzz .common !.sharding !.repl"
    display_name: Linux (No Journal)
    run_on:
      - rhel80-small
    expansions:
      compile_flags: "-j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars --enable-free-mon=off --enable-http-client=off"
      large_distro_name: rhel80-medium
      multiversion_edition: targeted
      multiversion_platform: rhel80
      scons_cache_scope: shared
      test_flags: "--nojournal --excludeWithAnyTags=requires_journaling,requires_replication,requires_sharding,uses_transactions,requires_http_client"
  - name: ubuntu1804
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - ubuntu1804-build
      - name: ".aggfuzzer .common"
      - name: aggregation
      - name: ".auth !.audit !.multiversion"
      - name: ".misc_js"
      - name: ".concurrency .common"
      - name: concurrency_replication_causal_consistency_gen
      - name: disk_wiredtiger
      - name: free_monitoring
      - name: ".jepsen"
        distros:
          - ubuntu1804-build
      - name: ".jscore .common"
      - name: ".jstestfuzz .common"
      - name: libunwind_tests
      - name: ".logical_session_cache .one_sec"
      - name: multiversion_gen
      - name: replica_sets
      - name: replica_sets_jscore_passthrough
      - name: ".sharding .txns"
      - name: sharding_gen
      - name: sharding_jscore_passthrough
      - name: watchdog_wiredtiger
      - name: ".ssl"
      - name: ".stitch"
      - name: test_packages
        distros:
          - ubuntu2004-package
      - name: ".publish"
        distros:
          - ubuntu1804-small
    display_name: Ubuntu 18.04
    run_on:
      - ubuntu1804-test
    expansions:
      compile_flags: "--ssl --ocsp-stapling=off MONGO_DISTMOD=ubuntu1804 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      large_distro_name: ubuntu1804-build
      multiversion_edition: targeted
      multiversion_platform: ubuntu1804
      packager_arch: x86_64
      packager_distro: ubuntu1804
      packager_script: packager.py
      push_arch: x86_64-ubuntu1804
      push_bucket: downloads.mongodb.org
      push_name: linux
      push_path: linux
      repo_edition: org
      scons_cache_scope: shared
      test_flags: "--excludeWithAnyTags=requires_ocsp_stapling"
  - name: enterprise-ubuntu1804-64
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - ubuntu1804-build
      - name: compile_ninja_next_TG
        distros:
          - ubuntu1804-build
      - name: libdeps_graph_linting_TG
        distros:
          - ubuntu1804-build
      - name: compile_ninja_TG
      - name: ".aggfuzzer .common"
      - name: audit
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".encrypt !.aggregation !.replica_sets !.sharding !.jscore"
      - name: external_auth
      - name: external_auth_aws
      - name: ".jepsen"
        distros:
          - ubuntu1804-build
      - name: ".jscore .common !.compat !.decimal !.sharding"
      - name: jsCore_auth
      - name: ".jstestfuzz .common"
      - name: libunwind_tests
      - name: ".logical_session_cache .one_sec"
      - name: ".multiversion_fuzzer"
      - name: ".multiversion_passthrough"
      - name: ".ocsp"
      - name: ".random_multiversion_ds"
      - name: replica_sets_auth_gen
      - name: replica_sets_jscore_passthrough
      - name: sasl
      - name: sharding_auth_gen
      - name: snmp
      - name: ".watchdog"
      - name: test_packages
        distros:
          - ubuntu2004-package
      - name: ".publish"
        distros:
          - ubuntu1804-small
    display_name: Enterprise Ubuntu 18.04
    run_on:
      - ubuntu1804-test
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
      compile_flags: "--ssl --ocsp-stapling=off MONGO_DISTMOD=ubuntu1804 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      large_distro_name: ubuntu1804-build
      multiversion_edition: enterprise
      multiversion_platform: ubuntu1804
      packager_arch: x86_64
      packager_distro: ubuntu1804
      packager_script: packager_enterprise.py
      push_arch: x86_64-enterprise-ubuntu1804
      push_bucket: downloads.10gen.com
      push_name: linux
      push_path: linux
      repo_edition: enterprise
      scons_cache_scope: shared
      test_flags: "--excludeWithAnyTags=requires_ocsp_stapling"
    stepback: false
    modules:
      - enterprise
  - name: tla-plus
    tasks:
      - name: tla_plus
    display_name: TLA+
    run_on:
      - ubuntu1804-build
    batchtime: 10080
    expansions:
      timeout_secs: "345600"
    stepback: false
  - name: enterprise-ubuntu1804-arm64
    tasks:
      - name: compile_test_and_package_serial_TG
      - name: aggregation
      - name: aggregation_wildcard_fuzzer_gen
      - name: ".auth !.audit !.multiversion !.jscore"
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".misc_js"
      - name: ".concurrency .common"
      - name: concurrency_replication_causal_consistency_gen
      - name: fle
      - name: ".jscore .common !.auth"
      - name: ".jstestfuzz .common"
      - name: ".logical_session_cache .one_sec"
      - name: replica_sets
      - name: ".replica_sets .common"
      - name: ".sharding .txns"
      - name: sharding_gen
      - name: sharding_jscore_passthrough
      - name: ".ssl"
      - name: ".stitch"
      - name: test_packages
        distros:
          - ubuntu2004-package
      - name: ".publish"
        distros:
          - ubuntu1804-test
    display_name: Enterprise Ubuntu 18.04 arm64
    run_on:
      - ubuntu1804-arm64-build
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
      compile_flags: "--ssl --ocsp-stapling=off MONGO_DISTMOD=ubuntu1804 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      multiversion_architecture: arm64
      multiversion_architecture_42_or_later: aarch64
      multiversion_edition: enterprise
      multiversion_platform: ubuntu1804
      packager_arch: arm64
      packager_distro: ubuntu1804
      packager_script: packager_enterprise.py
      push_arch: aarch64-enterprise-ubuntu1804
      push_bucket: downloads.10gen.com
      push_name: linux
      push_path: linux
      repo_edition: enterprise
      resmoke_jobs_max: "4"
      scons_cache_scope: shared
      test_flags: "--excludeWithAnyTags=requires_ocsp_stapling"
    modules:
      - enterprise
  - name: ubuntu1804-arm64
    tasks:
      - name: compile_test_and_package_serial_TG
      - name: free_monitoring
      - name: jsCore
      - name: replica_sets_jscore_passthrough
      - name: test_packages
        distros:
          - ubuntu2004-package
      - name: ".publish"
        distros:
          - ubuntu1804-test
    display_name: Ubuntu 18.04 arm64
    run_on:
      - ubuntu1804-arm64-build
    expansions:
      compile_flags: "--ssl --ocsp-stapling=off MONGO_DISTMOD=ubuntu1804 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      multiversion_architecture: arm64
      multiversion_architecture_42_or_later: aarch64
      multiversion_edition: targeted
      multiversion_platform: ubuntu1804
      packager_arch: arm64
      packager_distro: ubuntu1804
      packager_script: packager.py
      push_arch: aarch64-ubuntu1804
      push_bucket: downloads.mongodb.org
      push_name: linux
      push_path: linux
      repo_edition: org
      resmoke_jobs_max: "8"
      scons_cache_scope: shared
      test_flags: "--excludeWithAnyTags=requires_ocsp_stapling"
  - name: ubuntu2004
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - ubuntu2004-large
      - name: ".aggfuzzer .common !.multiversion"
      - name: aggregation
      - name: ".auth !.audit !.multiversion"
      - name: ".misc_js"
      - name: ".concurrency .common"
      - name: concurrency_replication_causal_consistency_gen
      - name: disk_wiredtiger
      - name: free_monitoring
      - name: ".jscore .common"
      - name: ".jstestfuzz .common"
      - name: libunwind_tests
      - name: ".logical_session_cache .one_sec"
      - name: replica_sets
      - name: replica_sets_jscore_passthrough
      - name: ".sharding .txns"
      - name: sharding_gen
      - name: sharding_jscore_passthrough
      - name: ".ssl"
      - name: ".stitch"
      - name: test_packages
        distros:
          - ubuntu2004-package
      - name: ".publish"
        distros:
          - ubuntu2004-small
    display_name: Ubuntu 20.04
    run_on:
      - ubuntu2004-small
    expansions:
      compile_flags: "--ssl MONGO_DISTMOD=ubuntu2004 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      large_distro_name: ubuntu2004-large
      multiversion_edition: targeted
      multiversion_platform: ubuntu2004
      packager_arch: x86_64
      packager_distro: ubuntu2004
      packager_script: packager.py
      push_arch: x86_64-ubuntu2004
      push_bucket: downloads.mongodb.org
      push_name: linux
      push_path: linux
      repo_edition: org
      scons_cache_scope: shared
  - name: enterprise-ubuntu2004-64
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - ubuntu2004-large
      - name: compile_ninja_next_TG
        distros:
          - ubuntu2004-large
      - name: compile_ninja_TG
      - name: ".aggfuzzer .common !.multiversion"
      - name: audit
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".encrypt !.aggregation !.replica_sets !.sharding !.jscore"
      - name: external_auth
      - name: external_auth_aws
      - name: ".jscore .common !.compat !.decimal !.sharding"
      - name: jsCore_auth
      - name: ".jstestfuzz .common"
      - name: libunwind_tests
      - name: ".logical_session_cache .one_sec"
      - name: ".ocsp"
      - name: replica_sets_auth_gen
      - name: replica_sets_jscore_passthrough
      - name: sasl
      - name: sharding_auth_gen
      - name: snmp
      - name: test_packages
        distros:
          - ubuntu2004-package
      - name: ".publish"
        distros:
          - ubuntu2004-small
    display_name: Enterprise Ubuntu 20.04
    run_on:
      - ubuntu2004-small
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
      compile_flags: "--ssl MONGO_DISTMOD=ubuntu2004 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      large_distro_name: ubuntu2004-large
      multiversion_edition: enterprise
      multiversion_platform: ubuntu2004
      packager_arch: x86_64
      packager_distro: ubuntu2004
      packager_script: packager_enterprise.py
      push_arch: x86_64-enterprise-ubuntu2004
      push_bucket: downloads.10gen.com
      push_name: linux
      push_path: linux
      repo_edition: enterprise
      scons_cache_scope: shared
    stepback: false
    modules:
      - enterprise
  - name: enterprise-ubuntu2004-arm64
    tasks:
      - name: compile_test_and_package_serial_TG
      - name: aggregation
      - name: aggregation_wildcard_fuzzer_gen
      - name: ".auth !.audit !.multiversion !.jscore"
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".misc_js"
      - name: ".concurrency .common"
      - name: concurrency_replication_causal_consistency_gen
      - name: fle
      - name: ".jscore .common !.auth"
      - name: ".jstestfuzz .common"
      - name: ".logical_session_cache .one_sec"
      - name: replica_sets
      - name: ".replica_sets .common"
      - name: ".sharding .txns"
      - name: sharding_gen
      - name: sharding_jscore_passthrough
      - name: ".ssl"
      - name: ".stitch"
      - name: test_packages
        distros:
          - ubuntu2004-package
      - name: ".publish"
        distros:
          - ubuntu2004-test
    display_name: Enterprise Ubuntu 20.04 arm64
    run_on:
      - ubuntu2004-arm64-large
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
      compile_flags: "--ssl MONGO_DISTMOD=ubuntu2004 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      multiversion_architecture: arm64
      multiversion_architecture_42_or_later: aarch64
      multiversion_edition: enterprise
      multiversion_platform: ubuntu2004
      packager_arch: arm64
      packager_distro: ubuntu2004
      packager_script: packager_enterprise.py
      push_arch: aarch64-enterprise-ubuntu2004
      push_bucket: downloads.10gen.com
      push_name: linux
      push_path: linux
      repo_edition: enterprise
      resmoke_jobs_max: "4"
      scons_cache_scope: shared
    modules:
      - enterprise
  - name: ubuntu2004-arm64
    tasks:
      - name: compile_test_and_package_serial_TG
      - name: free_monitoring
      - name: jsCore
      - name: replica_sets_jscore_passthrough
      - name: test_packages
        distros:
          - ubuntu2004-package
      - name: ".publish"
        distros:
          - ubuntu2004-test
    display_name: Ubuntu 20.04 arm64
    run_on:
      - ubuntu2004-arm64-large
    expansions:
      compile_flags: "--ssl MONGO_DISTMOD=ubuntu2004 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      multiversion_architecture: arm64
      multiversion_architecture_42_or_later: aarch64
      multiversion_edition: targeted
      multiversion_platform: ubuntu2004
      packager_arch: arm64
      packager_distro: ubuntu2004
      packager_script: packager.py
      push_arch: aarch64-ubuntu2004
      push_bucket: downloads.mongodb.org
      push_name: linux
      push_path: linux
      repo_edition: org
      resmoke_jobs_max: "8"
      scons_cache_scope: shared
  - name: enterprise-linux-64-amazon-ami
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - amazon1-2018-build
      - name: ".aggfuzzer .common"
      - name: aggregation
      - name: ".auth !.gle !.multiversion"
      - name: audit
      - name: bulk_gle_passthrough
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".encrypt !.aggregation"
      - name: ".jscore .common !.compat"
      - name: ".jstestfuzz .common"
      - name: libunwind_tests
      - name: ".logical_session_cache .one_sec"
      - name: noPassthrough_gen
      - name: noPassthroughWithMongod_gen
      - name: powercycle
      - name: ".replica_sets .common"
      - name: sasl
      - name: serial_run
      - name: ".sharding .jscore !.wo_snapshot !.multi_stmt"
      - name: ".sharding .txns"
      - name: slow1_gen
      - name: snmp
      - name: ".stitch"
      - name: test_packages
        distros:
          - ubuntu2004-package
      - name: ".publish"
        distros:
          - amazon1-2018-small
    display_name: Enterprise Amazon Linux
    run_on:
      - amazon1-2018-test
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
      compile_flags: "--ssl MONGO_DISTMOD=amzn64 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      multiversion_edition: enterprise
      multiversion_platform: amzn64
      packager_arch: x86_64
      packager_distro: amazon
      packager_script: packager_enterprise.py
      push_arch: x86_64-enterprise-amzn64
      push_bucket: downloads.10gen.com
      push_name: linux
      push_path: linux
      repo_edition: enterprise
      scons_cache_scope: shared
      virtualenv: /opt/mongodbtoolchain/v3/bin/virtualenv
    modules:
      - enterprise
  - name: amazon
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - amazon1-2018-build
      - name: ".aggfuzzer .common"
      - name: aggregation
      - name: ".auth !.audit !.multiversion"
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".misc_js"
      - name: ".concurrency .common"
      - name: concurrency_replication_causal_consistency_gen
      - name: disk_wiredtiger
      - name: free_monitoring
      - name: ".jscore .common"
      - name: ".jstestfuzz .common"
      - name: libunwind_tests
      - name: ".logical_session_cache .one_sec"
      - name: multiversion_gen
      - name: replica_sets
      - name: ".replica_sets .common"
      - name: ".sharding .jscore !.wo_snapshot !.multi_stmt"
      - name: ".sharding .common !.op_query !.csrs"
      - name: ".sharding .txns"
      - name: ".ssl"
      - name: ".stitch"
      - name: test_packages
        distros:
          - ubuntu2004-package
      - name: ".publish"
        distros:
          - amazon1-2018-small
    display_name: Amazon Linux
    run_on:
      - amazon1-2018-test
    expansions:
      compile_flags: "--ssl MONGO_DISTMOD=amazon -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      large_distro_name: amazon1-2018-build
      multiversion_edition: targeted
      multiversion_platform: amazon
      packager_arch: x86_64
      packager_distro: amazon
      packager_script: packager.py
      push_arch: x86_64-amazon
      push_bucket: downloads.mongodb.org
      push_name: linux
      push_path: linux
      repo_edition: org
      scons_cache_scope: shared
      virtualenv: /opt/mongodbtoolchain/v3/bin/virtualenv
  - name: enterprise-amazon2
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - amazon2-build
      - name: ".aggfuzzer .common"
      - name: aggregation
      - name: audit
      - name: ".auth !.gle !.multiversion"
      - name: bulk_gle_passthrough
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".encrypt !.aggregation"
      - name: ".jscore .common !.compat"
      - name: ".jstestfuzz .common"
      - name: libunwind_tests
      - name: ".logical_session_cache .one_sec"
      - name: noPassthrough_gen
      - name: noPassthroughWithMongod_gen
      - name: ".replica_sets .common"
      - name: sasl
      - name: serial_run
      - name: ".sharding .jscore !.wo_snapshot !.multi_stmt"
      - name: ".sharding .txns !.csrs"
      - name: slow1_gen
      - name: snmp
      - name: ".stitch"
      - name: test_packages
        distros:
          - ubuntu2004-package
      - name: ".publish"
        distros:
          - amazon2-small
    display_name: Enterprise Amazon Linux 2
    run_on:
      - amazon2-test
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
      compile_flags: "--ssl MONGO_DISTMOD=amazon2 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      multiversion_edition: enterprise
      multiversion_platform: amazon2
      packager_arch: x86_64
      packager_distro: amazon2
      packager_script: packager_enterprise.py
      push_arch: x86_64-enterprise-amazon2
      push_bucket: downloads.10gen.com
      push_name: linux
      push_path: linux
      repo_edition: enterprise
      scons_cache_scope: shared
      test_flags: "--excludeWithAnyTags=SERVER-34286"
    modules:
      - enterprise
  - name: amazon2
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - amazon2-build
      - name: ".aggfuzzer .common"
      - name: aggregation
      - name: ".auth !.audit !.multiversion"
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".misc_js"
      - name: ".concurrency .common"
      - name: concurrency_replication_causal_consistency_gen
      - name: disk_wiredtiger
      - name: free_monitoring
      - name: ".jscore .common"
      - name: ".jstestfuzz .common"
      - name: libunwind_tests
      - name: ".logical_session_cache .one_sec"
      - name: multiversion_gen
      - name: replica_sets
      - name: ".replica_sets .common"
      - name: ".sharding .jscore !.wo_snapshot !.multi_stmt"
      - name: ".sharding .common !.op_query !.csrs"
      - name: ".sharding .txns"
      - name: ".ssl"
      - name: ".stitch"
      - name: test_packages
        distros:
          - ubuntu2004-package
      - name: ".publish"
        distros:
          - amazon2-small
    display_name: Amazon Linux 2
    run_on:
      - amazon2-test
    expansions:
      compile_flags: "--ssl MONGO_DISTMOD=amazon2 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      large_distro_name: amazon-build
      multiversion_edition: targeted
      multiversion_platform: amazon2
      packager_arch: x86_64
      packager_distro: amazon2
      packager_script: packager.py
      push_arch: x86_64-amazon2
      push_bucket: downloads.mongodb.org
      push_name: linux
      push_path: linux
      repo_edition: org
      scons_cache_scope: shared
      test_flags: "--excludeWithAnyTags=SERVER-34286"
  - name: enterprise-amazon2-arm64
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - amazon2-arm64-large
      - name: ".aggfuzzer !.multiversion"
      - name: audit
      - name: auth_audit_gen
      - name: auth_gen
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".encrypt !.sharding !.replica_sets !.aggregation !.jscore"
      - name: external_auth
      - name: external_auth_aws
      - name: ".jscore .common !.compat !.decimal !.sharding"
      - name: jsCore_txns_large_txns_format
      - name: ".jstestfuzz .common"
      - name: ".logical_session_cache .one_sec"
      - name: replica_sets_auth_gen
      - name: replica_sets_jscore_passthrough
      - name: ".replica_sets .multi_oplog"
      - name: sasl
      - name: search
      - name: search_auth
      - name: search_ssl
      - name: sharding_auth_audit_gen
      - name: sharding_auth_gen
      - name: snmp
      - name: ".stitch"
      - name: test_packages
        distros:
          - ubuntu2004-package
      - name: ".publish"
        distros:
          - rhel80-small
    display_name: Enterprise Amazon Linux 2 arm64
    run_on:
      - amazon2-arm64-small
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
      compile_flags: "--ssl MONGO_DISTMOD=amazon2 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      packager_arch: aarch64
      packager_distro: amazon2
      packager_script: packager_enterprise.py
      push_arch: aarch64-enterprise-amazon2
      push_bucket: downloads.10gen.com
      push_name: linux
      push_path: linux
      repo_edition: enterprise
      scons_cache_scope: shared
    modules:
      - enterprise
  - name: amazon2-arm64
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - amazon2-arm64-large
      - name: aggregation
      - name: ".auth !.audit !.multiversion"
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".misc_js"
      - name: ".concurrency .common"
        distros:
          - amazon2-arm64-large
      - name: concurrency_replication_causal_consistency_gen
      - name: disk_wiredtiger
      - name: free_monitoring
      - name: ".jscore .common"
      - name: ".jstestfuzz .common"
      - name: ".logical_session_cache .one_sec"
      - name: replica_sets
      - name: ".replica_sets .common"
      - name: ".sharding .txns"
      - name: ".sharding .common !.op_query !.csrs !.multiversion"
      - name: ".ssl"
      - name: ".stitch"
      - name: test_packages
        distros:
          - ubuntu2004-package
      - name: ".publish"
        distros:
          - rhel80-small
    display_name: Amazon Linux 2 arm64
    run_on:
      - amazon2-arm64-small
    expansions:
      compile_flags: "--ssl MONGO_DISTMOD=amazon2 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      large_distro_name: amazon2-arm64-large
      packager_arch: aarch64
      packager_distro: amazon2
      packager_script: packager.py
      push_arch: aarch64-amazon2
      push_bucket: downloads.mongodb.org
      push_name: linux
      push_path: linux
      repo_edition: org
      scons_cache_scope: shared
  - name: stm-daily-cron
    tasks:
      - name: lint_fuzzer_sanity_all
      - name: powercycle_smoke_skip_compile
        distros:
          - amazon2-test
    display_name: ~ STM Daily Cron
    run_on:
      - rhel80-small
    expansions:
      multiversion_edition: enterprise
      multiversion_platform: amazon2
    stepback: false
    modules:
      - enterprise
  - name: security-daily-cron
    tasks:
      - name: blackduck_scanner
    display_name: ~ Security Daily Cron
    run_on:
      - rhel80-small
    stepback: false
    modules:
      - enterprise
  - name: windows-debug-suggested
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - windows-vsCurrent-xlarge
      - name: compile_build_tools_next_TG
        distros:
          - windows-vsCurrent-xlarge
      - name: ".aggregation !.auth !.encrypt"
      - name: aggregation_expression_multiversion_fuzzer_gen
      - name: aggregation_expression_optimization_fuzzer_gen
      - name: auth_gen
      - name: bulk_gle_passthrough
      - name: ".causally_consistent !.sharding"
      - name: ".change_streams !.secondary_reads"
      - name: ".misc_js !.non_win_dbg"
      - name: ".concurrency .debug_only"
        distros:
          - windows-vsCurrent-large
      - name: disk_wiredtiger
      - name: free_monitoring
      - name: initial_sync_fuzzer_gen
      - name: ".integration !.audit"
        distros:
          - windows-vsCurrent-large
      - name: ".jscore .common !.auth !.sharding"
      - name: jsCore_txns_large_txns_format
      - name: jsonSchema
      - name: multi_shard_multi_stmt_txn_jscore_passthrough_gen
      - name: multi_stmt_txn_jscore_passthrough_with_migration_gen
      - name: ".read_write_concern !.large"
      - name: ".read_write_concern .large"
        distros:
          - windows-vsCurrent-large
      - name: ".read_only"
      - name: ".rollbackfuzzer"
      - name: ".replica_sets !.large !.encrypt !.auth"
      - name: ".replica_sets .large"
        distros:
          - windows-vsCurrent-large
      - name: ".resharding_fuzzer"
      - name: retryable_writes_jscore_passthrough_gen
      - name: retryable_writes_jscore_stepdown_passthrough
        distros:
          - windows-vsCurrent-large
      - name: session_jscore_passthrough
      - name: sharding_gen
      - name: ".stitch"
      - name: server_discovery_and_monitoring_json_test_TG
      - name: server_selection_json_test_TG
    display_name: "* Windows DEBUG"
    run_on:
      - windows-vsCurrent-small
    batchtime: 240
    expansions:
      compile_flags: "--dbg=on --opt=on --win-version-min=win10 -j$(( $(grep -c ^processor /proc/cpuinfo) / 2 )) MONGO_DISTMOD=windows"
      content_type: application/zip
      exe: ".exe"
      ext: zip
      large_distro_name: windows-vsCurrent-large
      multiversion_edition: enterprise
      multiversion_platform: windows
      python: /cygdrive/c/python/python37/python.exe
      scons_cache_scope: shared
      test_flags: "--excludeWithAnyTags=incompatible_with_windows_tls"
  - name: enterprise-windows-required
    tasks:
      - name: compile_and_archive_dist_test_then_package_TG
        distros:
          - windows-vsCurrent-xlarge
      - name: compile_build_tools_next_TG
        distros:
          - windows-vsCurrent-xlarge
      - name: burn_in_tests_gen
      - name: buildscripts_test
      - name: noPassthrough_gen
      - name: server_discovery_and_monitoring_json_test_TG
      - name: server_selection_json_test_TG
      - name: compile_run_and_archive_dbtest_TG
        distros:
          - windows-vsCurrent-xlarge
      - name: unittest_shell_hang_analyzer_gen
    display_name: "! Enterprise Windows"
    run_on:
      - windows-vsCurrent-small
    batchtime: 240
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug msi archive-mh archive-mh-debug
      burn_in_tests_build_variant: enterprise-windows-suggested
      compile_flags: "--ssl MONGO_DISTMOD=windows CPPPATH=\"c:/sasl/include c:/snmp/include\" LIBPATH=\"c:/sasl/lib c:/snmp/lib\" -j$(( $(grep -c ^processor /proc/cpuinfo) / 2 )) --win-version-min=win10"
      content_type: application/zip
      exe: ".exe"
      ext: zip
      jstestfuzz_num_generated_files: "35"
      large_distro_name: windows-vsCurrent-large
      max_sub_suites: "5"
      multiversion_edition: enterprise
      multiversion_platform: windows
      num_scons_link_jobs_available: "0.5"
      push_arch: x86_64-enterprise
      push_bucket: downloads.10gen.com
      push_name: windows
      push_path: windows
      python: /cygdrive/c/python/python37/python.exe
      scons_cache_scope: shared
      target_resmoke_time: "20"
      test_flags: "--excludeWithAnyTags=incompatible_with_windows_tls"
    modules:
      - enterprise
  - name: enterprise-windows-all-feature-flags-required
    tasks:
      - name: compile_and_archive_dist_test_then_package_TG
        distros:
          - windows-vsCurrent-xlarge
      - name: compile_build_tools_next_TG
        distros:
          - windows-vsCurrent-xlarge
      - name: burn_in_tests_gen
      - name: noPassthrough_gen
    display_name: "! Enterprise Windows (all feature flags)"
    run_on:
      - windows-vsCurrent-small
    batchtime: 240
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug msi archive-mh archive-mh-debug
      burn_in_tests_build_variant: enterprise-windows-suggested
      compile_flags: "--ssl MONGO_DISTMOD=windows CPPPATH=\"c:/sasl/include c:/snmp/include\" LIBPATH=\"c:/sasl/lib c:/snmp/lib\" -j$(( $(grep -c ^processor /proc/cpuinfo) / 2 )) --win-version-min=win10"
      content_type: application/zip
      exe: ".exe"
      ext: zip
      jstestfuzz_num_generated_files: "35"
      large_distro_name: windows-vsCurrent-large
      max_sub_suites: "5"
      multiversion_edition: enterprise
      multiversion_platform: windows
      num_scons_link_jobs_available: "0.5"
      python: /cygdrive/c/python/python37/python.exe
      scons_cache_scope: shared
      target_resmoke_time: "20"
      test_flags: "--runAllFeatureFlagTests --excludeWithAnyTags=incompatible_with_windows_tls"
    modules:
      - enterprise
  - name: enterprise-windows-suggested
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - windows-vsCurrent-xlarge
      - name: audit
      - name: auth_audit_gen
      - name: buildscripts_test
      - name: causally_consistent_jscore_txns_passthrough
        distros:
          - windows-vsCurrent-large
      - name: ".encrypt !.aggregation !.replica_sets !.sharding !.jscore"
      - name: external_auth
      - name: external_auth_aws
      - name: external_auth_windows
        distros:
          - windows-64-2016
      - name: ".jscore .common !.compat !.sharding"
      - name: jsCore_auth
      - name: jsCore_ese
      - name: jsCore_txns_large_txns_format
      - name: ".jstestfuzz .common"
      - name: mqlrun
      - name: noPassthrough_gen
      - name: noPassthroughWithMongod_gen
      - name: powercycle_kill_mongod_smoke
      - name: powercycle_smoke
      - name: ".replica_sets .common"
      - name: ".replica_sets .multi_oplog"
      - name: replica_sets_ese_gen
      - name: sasl
      - name: server_discovery_and_monitoring_json_test_TG
      - name: server_selection_json_test_TG
      - name: ".sharding .txns"
      - name: sharding_auth_gen
      - name: sharding_auth_audit_gen
      - name: sharding_ese_gen
      - name: snmp
      - name: unittest_shell_hang_analyzer_gen
    display_name: "* Enterprise Windows"
    run_on:
      - windows-vsCurrent-small
    batchtime: 240
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug msi archive-mh archive-mh-debug
      compile_flags: "--ssl MONGO_DISTMOD=windows CPPPATH=\"c:/sasl/include c:/snmp/include\" LIBPATH=\"c:/sasl/lib c:/snmp/lib\" -j$(( $(grep -c ^processor /proc/cpuinfo) / 2 )) --win-version-min=win10"
      content_type: application/zip
      exe: ".exe"
      ext: zip
      jstestfuzz_num_generated_files: "35"
      large_distro_name: windows-vsCurrent-large
      max_sub_suites: "3"
      multiversion_edition: enterprise
      multiversion_platform: windows
      num_scons_link_jobs_available: "0.5"
      push_arch: x86_64-enterprise
      push_bucket: downloads.10gen.com
      push_name: windows
      push_path: windows
      python: /cygdrive/c/python/python37/python.exe
      scons_cache_scope: shared
      target_resmoke_time: "20"
      test_flags: "--excludeWithAnyTags=incompatible_with_windows_tls"
    modules:
      - enterprise
  - name: enterprise-windows-all-feature-flags-suggested
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - windows-vsCurrent-xlarge
      - name: audit
      - name: auth_audit_gen
      - name: causally_consistent_jscore_txns_passthrough
        distros:
          - windows-vsCurrent-large
      - name: ".encrypt !.aggregation !.replica_sets !.sharding !.jscore"
      - name: external_auth
      - name: external_auth_aws
      - name: external_auth_windows
        distros:
          - windows-64-2016
      - name: ".jscore .common !.compat !.sharding"
      - name: jsCore_auth
      - name: jsCore_ese
      - name: jsCore_txns_large_txns_format
      - name: ".jstestfuzz .common"
      - name: mqlrun
      - name: noPassthrough_gen
      - name: noPassthroughWithMongod_gen
      - name: ".replica_sets .common"
      - name: ".replica_sets .multi_oplog"
      - name: replica_sets_ese_gen
      - name: sasl
      - name: ".sharding .txns"
      - name: sharding_auth_gen
      - name: sharding_auth_audit_gen
      - name: sharding_ese_gen
      - name: snmp
    display_name: "* Enterprise Windows (all feature flags)"
    run_on:
      - windows-vsCurrent-small
    batchtime: 240
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug msi archive-mh archive-mh-debug
      compile_flags: "--ssl MONGO_DISTMOD=windows CPPPATH=\"c:/sasl/include c:/snmp/include\" LIBPATH=\"c:/sasl/lib c:/snmp/lib\" -j$(( $(grep -c ^processor /proc/cpuinfo) / 2 )) --win-version-min=win10"
      content_type: application/zip
      exe: ".exe"
      ext: zip
      jstestfuzz_num_generated_files: "35"
      large_distro_name: windows-vsCurrent-large
      max_sub_suites: "3"
      multiversion_edition: enterprise
      multiversion_platform: windows
      num_scons_link_jobs_available: "0.5"
      python: /cygdrive/c/python/python37/python.exe
      scons_cache_scope: shared
      target_resmoke_time: "20"
      test_flags: "--runAllFeatureFlagTests --excludeWithAnyTags=incompatible_with_windows_tls"
    modules:
      - enterprise
  - name: enterprise-windows-benchmarks
    tasks:
      - name: compile_benchmarks
        distros:
          - windows-vsCurrent-large
      - name: ".benchmarks"
    display_name: ~ Enterprise Windows (Benchmarks)
    run_on:
      - windows-vsCurrent-small
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug msi
      compile_flags: "--ssl MONGO_DISTMOD=windows CPPPATH=\"c:/sasl/include c:/snmp/include\" LIBPATH=\"c:/sasl/lib c:/snmp/lib\" -j$(( $(grep -c ^processor /proc/cpuinfo) / 2 )) --win-version-min=win10"
      content_type: application/zip
      exe: ".exe"
      ext: zip
      jstestfuzz_num_generated_files: "35"
      large_distro_name: windows-vsCurrent-large
      multiversion_edition: enterprise
      multiversion_platform: windows
      num_scons_link_jobs_available: "0.5"
      python: /cygdrive/c/python/python37/python.exe
      scons_cache_scope: shared
    modules:
      - enterprise
  - name: enterprise-windows-wtdevelop
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - windows-vsCurrent-large
      - name: burn_in_tests_gen
      - name: ".aggfuzzer .common"
      - name: audit
      - name: auth_audit_gen
      - name: buildscripts_test
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".encrypt !.aggregation !.gcm"
      - name: external_auth
      - name: external_auth_aws
      - name: external_auth_windows
        distros:
          - windows-64-2016
      - name: ".jscore .common !.compat !.sharding"
      - name: ".jstestfuzz .common"
      - name: ".logical_session_cache"
      - name: replica_sets_auth_gen
      - name: sasl
      - name: sharding_auth_gen
      - name: sharding_auth_audit_gen
      - name: snmp
    display_name: ~ Enterprise Windows WiredTiger develop
    run_on:
      - windows-vsCurrent-small
    batchtime: 240
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug msi
      compile_flags: "--ssl MONGO_DISTMOD=windows CPPPATH=\"c:/sasl/include c:/snmp/include\" LIBPATH=\"c:/sasl/lib c:/snmp/lib\" -j$(( $(grep -c ^processor /proc/cpuinfo) / 2 )) --win-version-min=win10"
      content_type: application/zip
      exe: ".exe"
      ext: zip
      jstestfuzz_num_generated_files: "35"
      large_distro_name: windows-vsCurrent-large
      multiversion_edition: enterprise
      multiversion_platform: windows
      num_scons_link_jobs_available: "0.5"
      python: /cygdrive/c/python/python37/python.exe
      scons_cache_scope: shared
      use_wt_develop: "true"
    modules:
      - enterprise
      - wtdevelop
  - name: enterprise-windows-inmem
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - windows-vsCurrent-large
      - name: ".aggfuzzer .common"
      - name: audit
      - name: auth_audit_gen
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".concurrency .common"
        distros:
          - windows-vsCurrent-large
      - name: concurrency_replication_causal_consistency_gen
      - name: initial_sync_fuzzer_gen
      - name: ".jscore .common !.decimal !.compat !.sharding"
      - name: ".jstestfuzz .common !.flow_control"
      - name: ".read_write_concern .linearize !.durable_history"
      - name: replica_sets_auth_gen
      - name: replica_sets_jscore_passthrough
      - name: replica_sets_multi_stmt_txn_jscore_passthrough
      - name: sasl
      - name: ".sharding .txns"
      - name: sharding_auth_gen
      - name: sharding_auth_audit_gen
      - name: snmp
      - name: ".ssl"
      - name: ".resharding_fuzzer"
    display_name: Enterprise Windows (inMemory)
    run_on:
      - windows-vsCurrent-small
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug msi
      compile_flags: "--ssl MONGO_DISTMOD=windows CPPPATH=\"c:/sasl/include c:/snmp/include\" LIBPATH=\"c:/sasl/lib c:/snmp/lib\" -j$(( $(grep -c ^processor /proc/cpuinfo) / 2 )) --win-version-min=win10"
      content_type: application/zip
      exe: ".exe"
      ext: zip
      large_distro_name: windows-vsCurrent-large
      multiversion_edition: enterprise
      multiversion_platform: windows
      num_scons_link_jobs_available: "0.5"
      python: /cygdrive/c/python/python37/python.exe
      scons_cache_scope: shared
      test_flags: "--storageEngine=inMemory --excludeWithAnyTags=requires_persistence,requires_journaling,incompatible_with_windows_tls"
    modules:
      - enterprise
  - name: windows
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - windows-vsCurrent-large
      - name: ".aggfuzzer"
      - name: ".aggregation !.auth !.encrypt !.unwind"
      - name: auth_gen
      - name: ".auth .gle"
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".misc_js"
      - name: ".concurrency !.ubsan !.no_txns !.kill_terminate !.common !.debug_only"
        distros:
          - windows-vsCurrent-large
      - name: ".concurrency .common"
      - name: disk_wiredtiger
      - name: free_monitoring
      - name: ".jscore .common !.auth"
      - name: jsonSchema
      - name: ".jstestfuzz !.initsync !.flow_control !.stepdowns"
      - name: multiversion_gen
      - name: multiversion_auth_gen
      - name: powercycle_kill_mongod
      - name: ".query_fuzzer"
      - name: ".read_write_concern"
      - name: replica_sets
      - name: replica_sets_jscore_passthrough
      - name: ".sharding .jscore !.wo_snapshot !.multi_stmt"
      - name: ".sharding .txns"
      - name: ".sharding .common !.op_query !.csrs"
      - name: ".ssl"
      - name: ".stitch"
      - name: ".updatefuzzer"
      - name: push
        distros:
          - rhel70-small
    display_name: Windows
    run_on:
      - windows-vsCurrent-small
    expansions:
      additional_package_targets: msi
      compile_flags: "--ssl MONGO_DISTMOD=windows -j$(( $(grep -c ^processor /proc/cpuinfo) / 2 )) --win-version-min=win10"
      content_type: application/zip
      exe: ".exe"
      ext: zip
      large_distro_name: windows-vsCurrent-large
      multiversion_edition: base
      multiversion_platform: windows_x86_64-2008plus-ssl
      multiversion_platform_42_or_later: windows_x86_64-2012plus
      multiversion_platform_44_or_later: windows
      num_scons_link_jobs_available: "0.5"
      push_arch: x86_64
      push_bucket: downloads.mongodb.org
      push_name: windows
      push_path: windows
      python: /cygdrive/c/python/python37/python.exe
      scons_cache_scope: shared
      test_flags: "--excludeWithAnyTags=incompatible_with_windows_tls"
  - name: enterprise-windows
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - windows-vsCurrent-large
      - name: ".aggfuzzer"
      - name: ".aggregation !.auth !.encrypt !.unwind"
      - name: auth_gen
      - name: ".auth .gle"
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".misc_js"
      - name: ".concurrency !.ubsan !.no_txns !.kill_terminate !.common !.debug_only"
        distros:
          - windows-vsCurrent-large
      - name: ".concurrency .common"
      - name: disk_wiredtiger
      - name: ".jscore .common !.auth"
      - name: jsonSchema
      - name: ".jstestfuzz !.initsync !.flow_control !.stepdowns"
      - name: multiversion_gen
      - name: multiversion_auth_gen
      - name: powercycle_kill_mongod
      - name: ".query_fuzzer"
      - name: ".read_write_concern"
      - name: replica_sets
      - name: replica_sets_jscore_passthrough
      - name: ".sharding .jscore !.wo_snapshot !.multi_stmt"
      - name: ".sharding .txns"
      - name: ".sharding .common !.op_query !.csrs"
      - name: ".ssl"
      - name: ".stitch"
      - name: ".updatefuzzer"
      - name: push
        distros:
          - rhel70-small
    display_name: Enterprise Windows
    run_on:
      - windows-vsCurrent-small
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug msi archive-mh archive-mh-debug
      compile_flags: "--ssl MONGO_DISTMOD=windows CPPPATH=\"c:/sasl/include c:/snmp/include\" LIBPATH=\"c:/sasl/lib c:/snmp/lib\" -j$(( $(grep -c ^processor /proc/cpuinfo) / 2 )) --win-version-min=win10"
      content_type: application/zip
      exe: ".exe"
      exec_timeout_secs: "14400"
      ext: zip
      jstestfuzz_num_generated_files: "35"
      large_distro_name: windows-vsCurrent-large
      max_sub_suites: "3"
      multiversion_edition: enterprise
      multiversion_platform: windows
      num_scons_link_jobs_available: "0.5"
      push_arch: x86_64-enterprise
      push_bucket: downloads.10gen.com
      push_name: windows
      push_path: windows
      python: /cygdrive/c/python/python37/python.exe
      scons_cache_scope: shared
      target_resmoke_time: "20"
      test_flags: "--excludeWithAnyTags=incompatible_with_windows_tls"
    modules:
      - enterprise
  - name: enterprise-windows-debug-unoptimized
    tasks:
      - name: compile_and_archive_dist_test_then_package_TG
        distros:
          - windows-vsCurrent-large
      - name: compile_ninja_next_TG
        distros:
          - windows-vsCurrent-large
      - name: audit
    display_name: Enterprise Windows DEBUG (Unoptimized)
    run_on:
      - windows-vsCurrent-small
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
      compile_flags: "--dbg=on --opt=off --ssl MONGO_DISTMOD=windows CPPPATH=\"c:/sasl/include c:/snmp/include\" LIBPATH=\"c:/sasl/lib c:/snmp/lib\" -j$(( $(grep -c ^processor /proc/cpuinfo) / 2 )) --win-version-min=win10"
      content_type: application/zip
      exe: ".exe"
      ext: zip
      num_scons_link_jobs_available: "0.5"
      python: /cygdrive/c/python/python37/python.exe
      scons_cache_scope: shared
      test_flags: "--excludeWithAnyTags=incompatible_with_windows_tls"
    modules:
      - enterprise
  - name: macos
    tasks:
      - name: compile_test_and_package_serial_TG
      - name: compile_build_tools_next_TG
      - name: ".aggregation !.auth !.encrypt !.unwind"
      - name: ".auth .gle"
      - name: auth_gen
      - name: ".causally_consistent !.sharding"
      - name: ".change_streams !.secondary_reads"
      - name: ".misc_js"
      - name: ".concurrency !.ubsan !.no_txns !.debug_only !.kill_terminate"
      - name: disk_wiredtiger
      - name: free_monitoring
      - name: initial_sync_fuzzer_gen
      - name: ".jscore .common !.auth"
      - name: jsCore_txns_large_txns_format
      - name: ".jstestfuzz .causal"
      - name: ".jstestfuzz .interrupt"
      - name: ".jstestfuzz .common"
      - name: ".jstestfuzz .session"
      - name: ".logical_session_cache .one_sec"
      - name: ".query_fuzzer"
      - name: ".read_write_concern !.linearize"
      - name: replica_sets
      - name: replica_sets_kill_secondaries_jscore_passthrough
      - name: replica_sets_large_txns_format_gen
      - name: ".replica_sets .common !.auth"
      - name: retryable_writes_jscore_passthrough_gen
      - name: ".rollbackfuzzer"
      - name: session_jscore_passthrough
      - name: ".sharding .jscore !.wo_snapshot !.multi_stmt"
      - name: ".sharding .txns"
      - name: ".ssl"
      - name: ".stitch"
      - name: unittest_shell_hang_analyzer_gen
      - name: push
        distros:
          - rhel70-small
    display_name: macOS
    run_on:
      - macos-1014
    expansions:
      compile_env: DEVELOPER_DIR=/Applications/Xcode10.2.app
      compile_flags: "--ssl -j$(sysctl -n hw.logicalcpu) --libc++ --variables-files=etc/scons/xcode_macosx.vars"
      push_arch: x86_64
      push_bucket: downloads.mongodb.org
      push_name: macos
      push_path: osx
      resmoke_jobs_max: "6"
  - name: enterprise-macos
    tasks:
      - name: compile_test_and_package_serial_TG
      - name: compile_ninja_next_TG
      - name: libdeps_graph_linting_TG
      - name: audit
      - name: auth_audit_gen
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".encrypt !.replica_sets !.sharding !.aggregation !.jscore"
      - name: ".jscore .common !.compat !.decimal !.sharding"
      - name: ".jstestfuzz .common"
      - name: ".logical_session_cache .one_sec"
      - name: mqlrun
      - name: replica_sets_auth_gen
      - name: replica_sets_jscore_passthrough
      - name: sasl
      - name: push
        distros:
          - rhel70-small
    display_name: Enterprise macOS
    run_on:
      - macos-1014
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
      compile_env: DEVELOPER_DIR=/Applications/Xcode10.2.app
      compile_flags: "--ssl -j$(sysctl -n hw.logicalcpu) --libc++ --variables-files=etc/scons/xcode_macosx.vars"
      push_arch: x86_64-enterprise
      push_bucket: downloads.10gen.com
      push_name: macos
      push_path: osx
      resmoke_jobs_max: "6"
    modules:
      - enterprise
  - name: embedded-sdk-macos
    tasks:
      - name: embedded_sdk_build_and_test
    display_name: Embedded SDK - macOS
    run_on:
      - macos-1014
    batchtime: 10080
    expansions:
      cdriver_cmake_flags: "-DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_OSX_SYSROOT=\"$(xcrun --sdk macosx --show-sdk-path)\" -DCMAKE_OSX_ARCHITECTURES=x86_64 -DENABLE_SSL=DARWIN -DENABLE_ZLIB=BUNDLED -DCMAKE_C_FLAGS=\"-Wunguarded-availability\" -DCMAKE_INSTALL_RPATH=@loader_path/../lib"
      cdriver_cmake_osx_deployment_target: "10.14"
      cmake_path: /Applications/cmake-3.11.0-Darwin-x86_64/CMake.app/Contents/bin/cmake
      compile_env: DEVELOPER_DIR=/Applications/Xcode10.2.app
      compile_flags: "--lto --variables-files=etc/scons/xcode_macosx.vars -j$(sysctl -n hw.logicalcpu) LIBPATH=\"\\$BUILD_ROOT/mongo-embedded-sdk-\\$MONGO_VERSION/lib\""
      disable_unit_tests: "true"
      test_flags: "--excludeWithAnyTags=uses_transactions"
  - name: embedded-sdk-ubuntu-1804-x86_64
    tasks:
      - name: embedded_sdk_build_and_test
    display_name: Embedded SDK - Ubuntu 18.04 x86_64
    run_on:
      - ubuntu1804-build
    expansions:
      cdriver_cmake_flags: "-DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_C_COMPILER=/opt/mongodbtoolchain/v3/bin/gcc -DCMAKE_CXX_COMPILER=/opt/mongodbtoolchain/v3/bin/g++ -DCMAKE_C_FLAGS=\"-flto\" -DCMAKE_INSTALL_RPATH=\\$ORIGIN/../lib"
      compile_flags: "--variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars -j$(grep -c ^processor /proc/cpuinfo) LIBPATH=\"\\$BUILD_ROOT/mongo-embedded-sdk-\\$MONGO_VERSION/lib\""
      disable_unit_tests: "true"
      test_flags: "--excludeWithAnyTags=uses_transactions"
  - name: enterprise-rhel-80-64-bit
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - rhel80-large
      - name: ".aggfuzzer"
      - name: ".aggregation"
      - name: audit
      - name: ".auth"
      - name: unittest_shell_hang_analyzer_gen
      - name: ".causally_consistent !.sharding"
      - name: ".change_streams"
      - name: ".misc_js"
      - name: ".concurrency !.large !.ubsan !.no_txns !.debug_only"
      - name: ".concurrency .large !.ubsan !.no_txns !.debug_only"
        distros:
          - rhel80-medium
      - name: disk_wiredtiger
      - name: ".encrypt"
      - name: idl_tests
      - name: initial_sync_fuzzer_gen
      - name: ".integration"
        distros:
          - rhel80-medium
      - name: ".jscore .common"
      - name: jsCore_minimum_batch_size
      - name: jsCore_op_query
      - name: jsCore_txns_large_txns_format
      - name: jsonSchema
      - name: ".jstestfuzz !.flow_control"
      - name: libunwind_tests
      - name: mqlrun
      - name: ".multi_shard"
      - name: multi_stmt_txn_jscore_passthrough_with_migration_gen
      - name: multiversion_gen
      - name: ".query_fuzzer"
      - name: ".random_multiversion_ds"
      - name: ".read_write_concern .large"
        distros:
          - rhel80-medium
      - name: ".read_write_concern !.large"
      - name: ".replica_sets !.encrypt !.auth"
        distros:
          - rhel80-medium
      - name: replica_sets_reconfig_jscore_passthrough_gen
      - name: replica_sets_reconfig_jscore_stepdown_passthrough
        distros:
          - rhel80-medium
      - name: replica_sets_reconfig_kill_primary_jscore_passthrough
        distros:
          - rhel80-medium
      - name: ".resharding_fuzzer"
      - name: retryable_writes_jscore_passthrough_gen
      - name: retryable_writes_jscore_stepdown_passthrough
        distros:
          - rhel80-medium
      - name: ".read_only"
      - name: ".rollbackfuzzer"
      - name: sasl
      - name: search
      - name: search_auth
      - name: search_ssl
      - name: session_jscore_passthrough
      - name: ".sharding .jscore !.wo_snapshot !.multi_stmt"
      - name: ".sharding .txns"
      - name: ".sharding .common"
      - name: snmp
      - name: ".stitch"
      - name: ".updatefuzzer"
      - name: secondary_reads_passthrough_gen
      - name: server_discovery_and_monitoring_json_test_TG
        distros:
          - rhel80-large
      - name: server_selection_json_test_TG
        distros:
          - rhel80-large
      - name: test_packages
        distros:
          - ubuntu2004-package
      - name: ".publish"
    display_name: Enterprise RHEL 8.0
    run_on:
      - rhel80-small
    batchtime: 1440
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
      compile_flags: "--ssl MONGO_DISTMOD=rhel80 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      jstestfuzz_concurrent_num_files: "10"
      jstestfuzz_num_generated_files: "40"
      large_distro_name: rhel80-medium
      max_sub_suites: "3"
      multiversion_edition: enterprise
      multiversion_platform: rhel80
      packager_arch: x86_64
      packager_distro: rhel80
      packager_script: packager_enterprise.py
      push_arch: x86_64-enterprise-rhel80
      push_bucket: downloads.10gen.com
      push_name: linux
      push_path: linux
      repo_edition: enterprise
      scons_cache_scope: shared
      target_resmoke_time: "10"
    modules:
      - enterprise
  - name: enterprise-rhel-80-64-bit-dynamic-required
    tasks:
      - name: compile_test_and_package_parallel_core_stream_TG
        distros:
          - rhel80-xlarge
      - name: compile_test_and_package_parallel_unittest_stream_TG
        distros:
          - rhel80-xlarge
      - name: compile_test_and_package_parallel_dbtest_stream_TG
        distros:
          - rhel80-xlarge
      - name: lint_pylinters
      - name: lint_clang_format
      - name: lint_eslint
      - name: lint_cpplint
      - name: lint_fuzzer_sanity_patch
      - name: lint_yaml
      - name: lint_errorcodes
      - name: test_api_version_compatibility
      - name: burn_in_tests_gen
      - name: burn_in_tests_multiversion_gen
      - name: ".aggfuzzer"
      - name: ".aggregation"
      - name: audit
      - name: ".auth"
      - name: burn_in_tags_gen
      - name: buildscripts_test
      - name: resmoke_end2end_tests
      - name: unittest_shell_hang_analyzer_gen
      - name: ".causally_consistent !.sharding"
      - name: ".change_streams"
      - name: ".misc_js"
      - name: ".concurrency !.large !.ubsan !.no_txns !.debug_only"
      - name: ".concurrency .large !.ubsan !.no_txns !.debug_only"
        distros:
          - rhel80-medium
      - name: disk_wiredtiger
      - name: ".encrypt"
      - name: idl_tests
      - name: initial_sync_fuzzer_gen
      - name: ".integration"
        distros:
          - rhel80-medium
      - name: jsCore
        distros:
          - rhel80-xlarge
      - name: ".jscore .common !jsCore"
      - name: jsCore_minimum_batch_size
      - name: jsCore_op_query
      - name: jsCore_txns_large_txns_format
      - name: jsonSchema
      - name: ".jstestfuzz !.flow_control"
      - name: libunwind_tests
      - name: multiversion_sanity_check_gen
      - name: mqlrun
      - name: ".multi_shard"
      - name: multi_stmt_txn_jscore_passthrough_with_migration_gen
      - name: multiversion_gen
      - name: ".query_fuzzer"
      - name: ".random_multiversion_ds"
      - name: ".read_write_concern .large"
        distros:
          - rhel80-medium
      - name: ".read_write_concern !.large"
      - name: ".replica_sets !.encrypt !.auth"
        distros:
          - rhel80-xlarge
      - name: replica_sets_reconfig_jscore_passthrough_gen
      - name: replica_sets_reconfig_jscore_stepdown_passthrough
        distros:
          - rhel80-xlarge
      - name: replica_sets_reconfig_kill_primary_jscore_passthrough
        distros:
          - rhel80-xlarge
      - name: retryable_writes_jscore_passthrough_gen
      - name: retryable_writes_jscore_stepdown_passthrough
        distros:
          - rhel80-medium
      - name: ".read_only"
      - name: ".rollbackfuzzer"
      - name: sasl
      - name: search
      - name: search_auth
      - name: search_ssl
      - name: session_jscore_passthrough
      - name: ".sharding .jscore !.wo_snapshot !.multi_stmt"
      - name: ".sharding .txns"
      - name: ".sharding .common"
      - name: snmp
      - name: ".stitch"
      - name: ".updatefuzzer"
      - name: secondary_reads_passthrough_gen
      - name: server_discovery_and_monitoring_json_test_TG
        distros:
          - rhel80-xlarge
      - name: server_selection_json_test_TG
        distros:
          - rhel80-xlarge
    display_name: "! Shared Library Enterprise RHEL 8.0"
    run_on:
      - rhel80-small
    batchtime: 240
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
      burn_in_tag_buildvariants: enterprise-rhel-80-64-bit-inmem linux-64-duroff enterprise-rhel-80-64-bit-multiversion
      compile_flags: "--ssl MONGO_DISTMOD=rhel80 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars --link-model=dynamic"
      has_packages: "false"
      jstestfuzz_concurrent_num_files: "10"
      jstestfuzz_num_generated_files: "40"
      large_distro_name: rhel80-medium
      max_sub_suites: "5"
      multiversion_edition: enterprise
      multiversion_platform: rhel80
      num_scons_link_jobs_available: "0.99"
      scons_cache_mode: all
      scons_cache_scope: shared
      target_resmoke_time: "10"
    modules:
      - enterprise
  - name: enterprise-rhel-80-64-bit-dynamic-all-feature-flags-required
    tasks:
      - name: compile_test_and_package_parallel_core_stream_TG
        distros:
          - rhel80-large
      - name: libdeps_graph_linting_TG
        distros:
          - rhel80-large
      - name: burn_in_tests_gen
      - name: ".aggfuzzer"
      - name: ".aggregation"
      - name: audit
      - name: ".auth"
      - name: unittest_shell_hang_analyzer_gen
      - name: ".causally_consistent !.sharding"
      - name: ".change_streams"
      - name: ".misc_js"
      - name: concurrency_sharded_ddl_operations
      - name: ".concurrency !.large !.ubsan !.no_txns !.debug_only"
      - name: ".concurrency .large !.ubsan !.no_txns !.debug_only"
        distros:
          - rhel80-medium
      - name: disk_wiredtiger
      - name: ".encrypt"
      - name: feature_flag_multiversion_gen
      - name: idl_tests
      - name: initial_sync_fuzzer_gen
      - name: ".integration"
        distros:
          - rhel80-medium
      - name: ".jscore .common"
      - name: jsCore_minimum_batch_size
      - name: jsCore_op_query
      - name: jsCore_txns_large_txns_format
      - name: jsonSchema
      - name: ".jstestfuzz !.flow_control"
      - name: libunwind_tests
      - name: mqlrun
      - name: ".multi_shard"
      - name: multi_stmt_txn_jscore_passthrough_with_migration_gen
      - name: multiversion_gen
      - name: ".query_fuzzer"
      - name: ".random_multiversion_ds"
      - name: ".read_write_concern .large"
        distros:
          - rhel80-medium
      - name: ".read_write_concern !.large"
      - name: ".replica_sets !.encrypt !.auth"
        distros:
          - rhel80-medium
      - name: replica_sets_reconfig_jscore_passthrough_gen
      - name: replica_sets_reconfig_jscore_stepdown_passthrough
        distros:
          - rhel80-medium
      - name: replica_sets_reconfig_kill_primary_jscore_passthrough
        distros:
          - rhel80-medium
      - name: retryable_writes_jscore_passthrough_gen
      - name: retryable_writes_jscore_stepdown_passthrough
        distros:
          - rhel80-medium
      - name: ".read_only"
      - name: ".rollbackfuzzer"
      - name: sasl
      - name: search
      - name: search_auth
      - name: search_ssl
      - name: session_jscore_passthrough
      - name: ".sharding .jscore !.wo_snapshot !.multi_stmt"
      - name: ".sharding .txns"
      - name: ".sharding .common"
      - name: sharded_multi_stmt_txn_jscore_passthrough
      - name: snmp
      - name: ".stitch"
      - name: ".tenant_migration"
      - name: ".updatefuzzer"
      - name: secondary_reads_passthrough_gen
    display_name: "! Shared Library Enterprise RHEL 8.0 (all feature flags)"
    run_on:
      - rhel80-small
    batchtime: 240
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
      compile_flags: "--ssl MONGO_DISTMOD=rhel80 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars --link-model=dynamic"
      has_packages: "false"
      jstestfuzz_concurrent_num_files: "10"
      jstestfuzz_num_generated_files: "40"
      large_distro_name: rhel80-medium
      max_sub_suites: "5"
      multiversion_edition: enterprise
      multiversion_platform: rhel80
      num_scons_link_jobs_available: "0.99"
      scons_cache_mode: all
      scons_cache_scope: shared
      target_resmoke_time: "10"
      test_flags: "--runAllFeatureFlagTests"
    stepback: false
    modules:
      - enterprise
  - name: enterprise-rhel-80-64-bit-dynamic-sbe
    tasks:
      - name: compile_test_and_package_parallel_core_stream_TG
        distros:
          - rhel80-large
      - name: ".aggregation !.no_async !.secondary_reads !.read_write_concern !.sharded !.unwind !aggregation_disabled_optimization"
      - name: ".concurrency !.large !.ubsan !.debug_only !.sharded"
      - name: ".jscore !.sharding !.decimal !.compat !cst_jscore_passthrough"
      - name: ".jstestfuzz !.flow_control"
      - name: initial_sync_fuzzer_gen
      - name: noPassthrough_gen
      - name: noPassthroughWithMongod_gen
      - name: replica_sets
      - name: replica_sets_auth_gen
      - name: replica_sets_ese_gcm_gen
      - name: replica_sets_ese_gen
      - name: replica_sets_initsync_static_jscore_passthrough
      - name: replica_sets_jscore_passthrough_gen
      - name: replica_sets_kill_secondaries_jscore_passthrough
      - name: replica_sets_large_txns_format_gen
      - name: replica_sets_max_mirroring_gen
      - name: replica_sets_multiversion_gen
      - name: replica_sets_reconfig_jscore_passthrough_gen
      - name: replica_sets_update_v1_oplog_gen
      - name: replica_sets_update_v1_oplog_jscore_passthrough
      - name: sharding_auth_gen
      - name: sharding_auth_audit_gen
      - name: sharding_csrs_continuous_config_stepdown_gen
      - name: sharding_ese_gcm_gen
      - name: sharding_ese_gen
      - name: sharding_gen
      - name: sharding_last_lts_mongos_and_mixed_shards_gen
      - name: sharding_max_mirroring_gen
      - name: sharding_multiversion_gen
      - name: sharding_update_v1_oplog_gen
      - name: jsCore_compatibility
      - name: ese
        distros:
          - rhel80-medium
    display_name: Shared Library Enterprise RHEL 8.0 (SBE)
    run_on:
      - rhel80-small
    batchtime: 1440
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
      compile_flags: "--ssl MONGO_DISTMOD=rhel80 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars --link-model=dynamic"
      has_packages: "false"
      jstestfuzz_concurrent_num_files: "10"
      jstestfuzz_num_generated_files: "40"
      large_distro_name: rhel80-medium
      max_sub_suites: "5"
      multiversion_edition: enterprise
      multiversion_platform: rhel80
      num_scons_link_jobs_available: "0.99"
      scons_cache_mode: all
      scons_cache_scope: shared
      target_resmoke_time: "10"
      test_flags: "--additionalFeatureFlags=featureFlagSBE --additionalFeatureFlags=featureFlagTimeseriesCollection --excludeWithAnyTags=sbe_incompatible"
    stepback: false
    modules:
      - enterprise
  - name: enterprise-rhel-80-64-bit-large-txns-format
    tasks:
      - name: compile_and_archive_dist_test_then_package_TG
        distros:
          - rhel80-large
      - name: auth_gen
      - name: auth_audit_gen
      - name: causally_consistent_jscore_txns_passthrough
      - name: change_streams
      - name: change_streams_whole_db_passthrough
      - name: change_streams_whole_cluster_passthrough
      - name: concurrency_replication_gen
      - name: concurrency_replication_multi_stmt_txn
      - name: concurrency_sharded_replication_gen
      - name: concurrency_sharded_replication_with_balancer_gen
      - name: concurrency_sharded_clusterwide_ops_add_remove_shards_gen
      - name: concurrency_sharded_local_read_write_multi_stmt_txn_gen
      - name: concurrency_sharded_local_read_write_multi_stmt_txn_with_balancer_gen
      - name: concurrency_sharded_multi_stmt_txn_gen
      - name: concurrency_sharded_multi_stmt_txn_with_balancer_gen
      - name: concurrency_sharded_multi_stmt_txn_with_stepdowns_gen
      - name: concurrency_sharded_with_stepdowns_gen
      - name: concurrency_sharded_with_stepdowns_and_balancer_gen
      - name: initial_sync_fuzzer_gen
      - name: jsCore
      - name: jsCore_txns
      - name: ".logical_session_cache .repl"
      - name: ".multi_shard"
      - name: multi_stmt_txn_jscore_passthrough_with_migration_gen
      - name: multiversion_auth_gen
      - name: multiversion_gen
      - name: noPassthrough_gen
      - name: ".replica_sets !.multi_oplog !.large"
      - name: ".replica_sets !.multi_oplog .large"
        distros:
          - rhel80-medium
      - name: ".resharding_fuzzer"
      - name: ".rollbackfuzzer"
      - name: ".sharding .txns"
      - name: sharding_gen
      - name: sharding_auth_gen
      - name: sharding_auth_audit_gen
      - name: sharding_ese_gen
      - name: sharding_ese_gcm_gen
      - name: sharding_csrs_continuous_config_stepdown_gen
      - name: sharded_multi_stmt_txn_jscore_passthrough
        distros:
          - rhel80-medium
    display_name: Enterprise RHEL 8.0 (large transactions format)
    run_on:
      - rhel80-small
    batchtime: 10080
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
      compile_flags: "--ssl MONGO_DISTMOD=rhel80 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      large_distro_name: rhel80-medium
      multiversion_edition: enterprise
      multiversion_platform: rhel80
      repo_edition: enterprise
      scons_cache_scope: shared
      test_flags: "--mongodSetParameters=\"{maxNumberOfTransactionOperationsInSingleOplogEntry: 2}\" --excludeWithAnyTags=exclude_from_large_txns"
    modules:
      - enterprise
  - name: enterprise-rhel-80-64-bit-multiversion
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - rhel80-xlarge
      - name: ".multiversion_fuzzer"
      - name: ".multiversion_passthrough"
      - name: ".random_multiversion_ds"
    display_name: Enterprise RHEL 8.0 (implicit multiversion)
    run_on:
      - rhel80-small
    expansions:
      build_mongoreplay: "true"
      compile_flags: "-j$(grep -c ^processor /proc/cpuinfo) --ssl --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars MONGO_DISTMOD=rhel80"
      large_distro_name: rhel80-medium
      multiversion_edition: enterprise
      multiversion_platform: rhel80
      repo_edition: enterprise
      resmoke_jobs_factor: "0.25"
      scons_cache_scope: shared
      test_flags: "--excludeWithAnyTags=requires_fcv_47,requires_fcv_48,requires_fcv_49,requires_fcv_50,multiversion_incompatible"
      tooltags: ssl sasl gssapi
    modules:
      - enterprise
  - name: enterprise-rhel-80-64-bit-lock-free-reads
    tasks:
      - name: compile_test_and_package_parallel_core_stream_TG
        distros:
          - rhel80-large
      - name: ".aggfuzzer"
      - name: ".aggregation"
      - name: audit
      - name: ".auth"
      - name: unittest_shell_hang_analyzer_gen
      - name: ".causally_consistent !.sharding"
      - name: ".change_streams"
      - name: ".misc_js"
      - name: ".concurrency !.large !.ubsan !.no_txns !.debug_only"
      - name: ".concurrency .large !.ubsan !.no_txns !.debug_only"
        distros:
          - rhel80-medium
      - name: disk_wiredtiger
      - name: ".encrypt"
      - name: initial_sync_fuzzer_gen
      - name: ".jscore .common"
      - name: jsCore_minimum_batch_size
      - name: jsCore_op_query
      - name: jsCore_txns_large_txns_format
      - name: jsonSchema
      - name: ".jstestfuzz !.flow_control"
      - name: libunwind_tests
      - name: mqlrun
      - name: ".multi_shard"
      - name: multi_stmt_txn_jscore_passthrough_with_migration_gen
      - name: multiversion_gen
      - name: ".query_fuzzer"
      - name: ".random_multiversion_ds"
      - name: ".read_write_concern .large"
        distros:
          - rhel80-medium
      - name: ".read_write_concern !.large"
      - name: ".replica_sets !.encrypt !.auth"
        distros:
          - rhel80-medium
      - name: replica_sets_reconfig_jscore_passthrough_gen
      - name: replica_sets_reconfig_jscore_stepdown_passthrough
        distros:
          - rhel80-medium
      - name: replica_sets_reconfig_kill_primary_jscore_passthrough
        distros:
          - rhel80-medium
      - name: retryable_writes_jscore_passthrough_gen
      - name: retryable_writes_jscore_stepdown_passthrough
        distros:
          - rhel80-medium
      - name: ".read_only"
      - name: ".rollbackfuzzer"
      - name: sasl
      - name: search
      - name: search_auth
      - name: search_ssl
      - name: session_jscore_passthrough
      - name: ".sharding .jscore !.wo_snapshot !.multi_stmt"
      - name: ".sharding .txns"
      - name: ".sharding .common"
      - name: snmp
      - name: ".stitch"
      - name: ".updatefuzzer"
      - name: secondary_reads_passthrough_gen
      - name: server_discovery_and_monitoring_json_test_TG
        distros:
          - rhel80-large
      - name: server_selection_json_test_TG
        distros:
          - rhel80-large
    display_name: Enterprise RHEL 8.0 (Lock Free Reads disabled)
    run_on:
      - rhel80-small
    batchtime: 1440
    expansions:
      build_mongoreplay: "false"
      compile_flags: "-j$(grep -c ^processor /proc/cpuinfo) --ssl --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars MONGO_DISTMOD=rhel80"
      large_distro_name: rhel80-medium
      multiversion_edition: enterprise
      multiversion_platform: rhel80
      repo_edition: enterprise
      scons_cache_scope: shared
      test_flags: "--mongodSetParameters=\"{featureFlagLockFreeReads: false}\" --excludeWithAnyTags=incompatible_with_lockfreereads"
    modules:
      - enterprise
  - name: rhel-80-64-bit-nossl
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - rhel80-large
      - name: jsCore
    display_name: RHEL 8.0 Shared Library (No SSL)
    run_on:
      - rhel80-small
    batchtime: 1440
    expansions:
      build_mongoreplay: "false"
      compile_flags: "-j$(grep -c ^processor /proc/cpuinfo) --ssl=off --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars MONGO_DISTMOD=rhel80 --link-model=dynamic"
      large_distro_name: rhel80-medium
      multiversion_edition: enterprise
      multiversion_platform: rhel80
      scons_cache_scope: shared
  - name: enterprise-rhel-80-64-bit-coverage
    tasks:
      - name: compile_test_and_package_serial_TG
      - name: ".aggregation !.unwind"
      - name: audit
      - name: ".auth"
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".change_streams"
      - name: ".misc_js"
      - name: ".concurrency !.ubsan !.no_txns !.stepdowns !.kill_terminate"
      - name: disk_wiredtiger
      - name: ".encrypt"
      - name: initial_sync_fuzzer_gen
      - name: ".integration !.audit"
      - name: ".jscore .common"
      - name: jsCore_txns_large_txns_format
      - name: jsCore_minimum_batch_size
      - name: jsCore_op_query
      - name: libunwind_tests
      - name: ".logical_session_cache .one_sec"
      - name: ".multi_shard .common"
      - name: multiversion_gen
      - name: ".multiversion_fuzzer"
      - name: ".multiversion_passthrough"
      - name: ".query_fuzzer"
      - name: ".random_multiversion_ds"
      - name: ".read_write_concern"
      - name: ".replica_sets"
      - name: ".read_only"
      - name: ".rollbackfuzzer"
      - name: retryable_writes_jscore_passthrough_gen
      - name: sasl
      - name: search
      - name: search_auth
      - name: search_ssl
      - name: secondary_reads_passthrough_gen
      - name: session_jscore_passthrough
      - name: ".sharding .jscore !.wo_snapshot"
      - name: ".sharding .common"
      - name: snmp
      - name: ".updatefuzzer"
    display_name: ~ Enterprise RHEL 8.0 DEBUG Code Coverage
    run_on:
      - rhel80-medium
    batchtime: 10080
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
      compile_flags: "--dbg=on --gcov --ssl MONGO_DISTMOD=rhel80 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      exec_timeout_secs: "14400"
      gcov_environment: GCOV_PREFIX=$(pwd) GCOV_PREFIX_STRIP=4
      multiversion_edition: enterprise
      multiversion_platform: rhel80
      resmoke_jobs_factor: "0.5"
      use_scons_cache: "false"
    stepback: false
    modules:
      - enterprise
  - name: enterprise-rhel-80-64-bit-single-task-baseline
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - rhel80-medium
      - name: ".aggregation"
      - name: ".auth"
      - name: unittest_shell_hang_analyzer_gen
      - name: ".causally_consistent !.sharding"
      - name: ".change_streams"
      - name: ".misc_js"
      - name: ".encrypt"
      - name: ".jscore .common"
      - name: ".logical_session_cache"
      - name: ".multi_shard"
      - name: multi_stmt_txn_jscore_passthrough_with_migration_gen
      - name: multiversion_gen
      - name: ".read_write_concern .large"
        distros:
          - rhel80-medium
      - name: ".read_write_concern !.large"
      - name: ".replica_sets !.encrypt !.auth"
        distros:
          - rhel80-medium
      - name: retryable_writes_jscore_passthrough_gen
      - name: ".read_only"
      - name: ".sharding .jscore !.wo_snapshot !.multi_stmt"
      - name: ".sharding .txns"
      - name: ".sharding .common"
      - name: secondary_reads_passthrough_gen
    display_name: Enterprise RHEL 8.0 (Single Task Baseline)
    run_on:
      - rhel80-small
    batchtime: 10080
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
      compile_flags: "--ssl MONGO_DISTMOD=rhel80 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      jstestfuzz_concurrent_num_files: "10"
      jstestfuzz_num_generated_files: "40"
      large_distro_name: rhel80-medium
      max_sub_suites: "1"
      multiversion_edition: enterprise
      multiversion_platform: rhel80
      packager_arch: x86_64
      packager_distro: rhel80
      packager_script: packager_enterprise.py
      push_arch: x86_64-enterprise-rhel80
      push_bucket: downloads.10gen.com
      push_name: linux
      push_path: linux
      repo_edition: enterprise
      scons_cache_scope: shared
      target_resmoke_time: "10"
    modules:
      - enterprise
  - name: enterprise-rhel-70-64-bit
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - rhel70
      - name: compile_build_tools_next_TG
        distros:
          - rhel70
      - name: ".aggfuzzer"
      - name: audit
      - name: auth_audit_gen
      - name: auth_gen
      - name: causally_consistent_jscore_txns_passthrough
      - name: config_fuzzer_concurrency
      - name: config_fuzzer_concurrency_replication
        distros:
          - rhel70-large
      - name: config_fuzzer_jsCore
      - name: config_fuzzer_replica_sets_jscore_passthrough
        distros:
          - rhel70-large
      - name: ".encrypt !.sharding !.replica_sets !.aggregation !.jscore"
      - name: external_auth
      - name: external_auth_aws
      - name: ".jscore .common !.compat !.decimal !.sharding"
      - name: jsCore_txns_large_txns_format
      - name: ".jstestfuzz .common"
      - name: libunwind_tests
      - name: ".logical_session_cache .one_sec"
      - name: ".ocsp"
      - name: replica_sets_auth_gen
      - name: replica_sets_jscore_passthrough
      - name: ".replica_sets .multi_oplog"
      - name: sasl
      - name: search
      - name: search_auth
      - name: search_ssl
      - name: sharding_auth_audit_gen
      - name: sharding_auth_gen
      - name: snmp
      - name: ".stitch"
      - name: unittest_shell_hang_analyzer_gen
      - name: test_packages
        distros:
          - ubuntu2004-package
      - name: ".publish"
        distros:
          - rhel70-small
    display_name: Enterprise RHEL 7.0
    run_on:
      - rhel70-small
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
      compile_flags: "--ssl MONGO_DISTMOD=rhel70 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      multiversion_edition: enterprise
      multiversion_platform: rhel70
      packager_arch: x86_64
      packager_distro: rhel70
      packager_script: packager_enterprise.py
      push_arch: x86_64-enterprise-rhel70
      push_bucket: downloads.10gen.com
      push_name: linux
      push_path: linux
      repo_edition: enterprise
      scons_cache_scope: shared
    modules:
      - enterprise
  - name: ubi8
    tasks:
      - name: compile_and_archive_dist_test_then_package_TG
        distros:
          - rhel80-large
      - name: jsCore
      - name: sharding_gen
      - name: replica_sets
    display_name: UBI 8
    run_on:
      - ubi8
    expansions:
      build_mongoreplay: "true"
      compile_flags: MONGO_DISTMOD=rhel80 --opt=on -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
      disable_shared_scons_cache: "true"
      resmoke_jobs_factor: "1"
      test_flags: "--excludeWithAnyTags=requires_os_access"
      tooltags: ""
  - name: enterprise-rhel-80-64-bit-suggested
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - rhel80-xlarge
      - name: ".aggfuzzer"
      - name: audit
      - name: auth_audit_gen
      - name: auth_gen
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".encrypt !.sharding !.replica_sets !.aggregation !.jscore"
      - name: external_auth
      - name: external_auth_aws
      - name: ".jscore .common !.compat !.decimal !.sharding"
      - name: jsCore_txns_large_txns_format
      - name: ".jstestfuzz .common"
      - name: ".logical_session_cache .one_sec"
      - name: libunwind_tests
      - name: replica_sets_auth_gen
      - name: replica_sets_jscore_passthrough
      - name: ".replica_sets .multi_oplog"
      - name: powercycle_kill_mongod_smoke
      - name: powercycle_smoke
      - name: sasl
      - name: search
      - name: search_auth
      - name: search_ssl
      - name: sharding_auth_audit_gen
      - name: sharding_auth_gen
      - name: snmp
      - name: ".stitch"
      - name: test_packages
        distros:
          - ubuntu2004-package
      - name: ".publish"
        distros:
          - rhel80-small
    display_name: "* Enterprise RHEL 8.0"
    run_on:
      - rhel80-build
    batchtime: 240
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
      compile_flags: "--ssl MONGO_DISTMOD=rhel80 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      large_distro_name: rhel80-large
      multiversion_edition: enterprise
      multiversion_platform: rhel80
      packager_arch: x86_64
      packager_distro: rhel80
      packager_script: packager_enterprise.py
      push_arch: x86_64-enterprise-rhel80
      push_bucket: downloads.10gen.com
      push_name: linux
      push_path: linux
      repo_edition: enterprise
      scons_cache_scope: shared
    modules:
      - enterprise
  - name: enterprise-rhel-82-arm64
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - rhel82-arm64-large
      - name: ".aggfuzzer !.multiversion"
      - name: audit
      - name: auth_audit_gen
      - name: auth_gen
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".encrypt !.sharding !.replica_sets !.aggregation !.jscore"
      - name: external_auth
      - name: external_auth_aws
      - name: ".jscore .common !.compat !.decimal !.sharding"
      - name: jsCore_txns_large_txns_format
      - name: ".jstestfuzz .common"
      - name: ".logical_session_cache .one_sec"
      - name: replica_sets_auth_gen
      - name: replica_sets_jscore_passthrough
      - name: ".replica_sets .multi_oplog"
      - name: sasl
      - name: search
      - name: search_auth
      - name: search_ssl
      - name: sharding_auth_audit_gen
      - name: sharding_auth_gen
      - name: snmp
      - name: ".stitch"
      - name: test_packages
        distros:
          - ubuntu2004-package
      - name: ".publish"
        distros:
          - rhel80-small
    display_name: Enterprise RHEL 8.2 arm64
    run_on:
      - rhel82-arm64-small
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
      compile_flags: "--ssl MONGO_DISTMOD=rhel82 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      packager_arch: aarch64
      packager_distro: rhel82
      packager_script: packager_enterprise.py
      push_arch: aarch64-enterprise-rhel82
      push_bucket: downloads.10gen.com
      push_name: linux
      push_path: linux
      repo_edition: enterprise
      scons_cache_scope: shared
    modules:
      - enterprise
  - name: enterprise-rhel-70-64-bit-kitchen-sink
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - rhel70
      - name: jsCore
    display_name: ~ Enterprise RHEL 7.0
    run_on:
      - rhel70-small
    batchtime: 1440
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
      compile_flags: "--ssl MONGO_DISTMOD=rhel70 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      multiversion_edition: enterprise
      multiversion_platform: rhel70
      packager_arch: x86_64
      packager_distro: rhel70
      packager_script: packager_enterprise.py
      push_arch: x86_64-enterprise-rhel70
      push_bucket: downloads.10gen.com
      push_name: linux
      push_path: linux
      repo_edition: enterprise
      scons_cache_scope: shared
    modules:
      - enterprise
  - name: hot_backups-rhel-70-64-bit
    tasks:
      - name: compile_test_and_package_serial_TG
      - name: jsCore
      - name: noPassthroughHotBackups_gen
    display_name: hot_backups RHEL 7.0
    run_on:
      - rhel70
    batchtime: 1440
    expansions:
      additional_package_targets: ""
      compile_flags: "--ssl MONGO_DISTMOD=rhel70 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars --enterprise-features=hot_backups"
      has_packages: "false"
      multiversion_edition: enterprise
      multiversion_platform: rhel70
      packager_arch: x86_64
      packager_distro: rhel70
      packager_script: packager_enterprise.py
      push_arch: x86_64-enterprise-rhel70
      push_bucket: downloads.10gen.com
      push_name: linux
      push_path: linux
      repo_edition: enterprise
      scons_cache_scope: shared
    modules:
      - enterprise
  - name: enterprise-rhel-70-64-bit-no-libunwind
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - rhel70
      - name: ".aggfuzzer"
      - name: audit
      - name: auth_audit_gen
      - name: auth_gen
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".encrypt !.sharding !.replica_sets !.aggregation !.jscore"
      - name: external_auth
      - name: external_auth_aws
      - name: ".jscore .common !.compat !.decimal !.sharding"
      - name: jsCore_txns_large_txns_format
      - name: ".jstestfuzz .common"
      - name: ".logical_session_cache .one_sec"
      - name: replica_sets_auth_gen
      - name: replica_sets_jscore_passthrough
      - name: ".replica_sets .multi_oplog"
      - name: sasl
      - name: search
      - name: search_auth
      - name: search_ssl
      - name: sharding_auth_audit_gen
      - name: sharding_auth_gen
      - name: snmp
      - name: ".stitch"
    display_name: ~ Enterprise RHEL 7.0 (no-libunwind)
    run_on:
      - rhel70
    batchtime: 10080
    expansions:
      additional_package_targets: ""
      compile_flags: "--ssl MONGO_DISTMOD=rhel70 --use-libunwind=off --opt=on -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "false"
      multiversion_edition: enterprise
      multiversion_platform: rhel70
      packager_arch: x86_64
      packager_distro: rhel70
      packager_script: packager_enterprise.py
      push_arch: x86_64-enterprise-rhel70
      push_bucket: downloads.10gen.com
      push_name: linux
      push_path: linux
      repo_edition: enterprise
      scons_cache_scope: shared
    modules:
      - enterprise
  - name: ubuntu1804-debug-suggested
    tasks:
      - name: compile_test_and_package_parallel_core_stream_TG
        distros:
          - ubuntu1804-xlarge
      - name: compile_test_and_package_parallel_unittest_stream_TG
        distros:
          - ubuntu1804-xlarge
      - name: compile_test_and_package_parallel_dbtest_stream_TG
        distros:
          - ubuntu1804-xlarge
      - name: compile_build_tools_next_TG
        distros:
          - ubuntu1804-xlarge
      - name: jsCore
      - name: ".read_write_concern !.write !.aggregation"
      - name: replica_sets_jscore_passthrough
      - name: replica_sets_large_txns_format_jscore_passthrough
      - name: sharded_collections_jscore_passthrough
      - name: sharding_gen
      - name: sharding_auth_gen
      - name: ".stitch"
      - name: unittest_shell_hang_analyzer_gen
    display_name: "* Shared Library Ubuntu 18.04 DEBUG"
    run_on:
      - ubuntu1804-test
    batchtime: 240
    expansions:
      compile_flags: "--dbg=on --opt=on -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars --link-model=dynamic"
      large_distro_name: ubuntu1804-large
      num_scons_link_jobs_available: "0.99"
      resmoke_jobs_factor: "0.5"
      scons_cache_mode: all
      scons_cache_scope: shared
  - name: ubuntu1804-container
    tasks:
      - name: compile_and_archive_dist_test_then_package_TG
        distros:
          - ubuntu1804-build
      - name: jsCore
      - name: sharding_gen
      - name: replica_sets
    display_name: Ubuntu 18.04 Container
    run_on:
      - ubuntu1804-container-server
    expansions:
      build_mongoreplay: "true"
      compile_flags: MONGO_DISTMOD=ubuntu1804 --opt=on -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
      disable_shared_scons_cache: "true"
      resmoke_jobs_factor: "1"
      test_flags: "--excludeWithAnyTags=requires_os_access"
      tooltags: ""
  - name: rhel70
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - rhel70
      - name: aggregation
      - name: ".auth !.audit !.multiversion"
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".misc_js"
      - name: ".concurrency .common"
        distros:
          - rhel70
      - name: concurrency_replication_causal_consistency_gen
      - name: disk_wiredtiger
      - name: free_monitoring
      - name: ".jscore .common"
      - name: ".jstestfuzz .common"
      - name: ".logical_session_cache .one_sec"
      - name: multiversion_gen
      - name: replica_sets
      - name: ".replica_sets .common"
      - name: ".sharding .txns"
      - name: ".sharding .common !.op_query !.csrs"
      - name: ".ssl"
      - name: ".stitch"
      - name: test_packages
        distros:
          - ubuntu2004-package
      - name: ".publish"
        distros:
          - rhel70-small
    display_name: RHEL 7.0
    run_on:
      - rhel70-small
    expansions:
      compile_flags: "--ssl MONGO_DISTMOD=rhel70 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      large_distro_name: rhel70
      multiversion_edition: targeted
      multiversion_platform: rhel70
      packager_arch: x86_64
      packager_distro: rhel70
      packager_script: packager.py
      push_arch: x86_64-rhel70
      push_bucket: downloads.mongodb.org
      push_name: linux
      push_path: linux
      repo_edition: org
      scons_cache_scope: shared
  - name: rhel80
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - rhel80-build
      - name: aggregation
      - name: ".auth !.audit !.multiversion"
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".misc_js"
      - name: ".concurrency .common"
        distros:
          - rhel80-build
      - name: concurrency_replication_causal_consistency_gen
      - name: disk_wiredtiger
      - name: free_monitoring
      - name: ".jscore .common"
      - name: ".jstestfuzz .common"
      - name: ".logical_session_cache .one_sec"
      - name: multiversion_gen
      - name: replica_sets
      - name: ".replica_sets .common"
      - name: ".sharding .txns"
      - name: ".sharding .common !.op_query !.csrs"
      - name: ".ssl"
      - name: ".stitch"
      - name: test_packages
        distros:
          - ubuntu2004-package
      - name: ".publish"
        distros:
          - rhel80-small
    display_name: RHEL 8.0
    run_on:
      - rhel80-build
    expansions:
      compile_flags: "--ssl MONGO_DISTMOD=rhel80 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      large_distro_name: rhel80-build
      multiversion_edition: targeted
      multiversion_platform: rhel80
      packager_arch: x86_64
      packager_distro: rhel80
      packager_script: packager.py
      push_arch: x86_64-rhel80
      push_bucket: downloads.mongodb.org
      push_name: linux
      push_path: linux
      repo_edition: org
      scons_cache_scope: shared
  - name: rhel-82-arm64
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - rhel82-arm64-large
      - name: aggregation
      - name: ".auth !.audit !.multiversion"
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".misc_js"
      - name: ".concurrency .common"
        distros:
          - rhel82-arm64-large
      - name: concurrency_replication_causal_consistency_gen
      - name: disk_wiredtiger
      - name: free_monitoring
      - name: ".jscore .common"
      - name: ".jstestfuzz .common"
      - name: ".logical_session_cache .one_sec"
      - name: replica_sets
      - name: ".replica_sets .common"
      - name: ".sharding .txns"
      - name: ".sharding .common !.op_query !.csrs !.multiversion"
      - name: ".ssl"
      - name: ".stitch"
      - name: test_packages
        distros:
          - ubuntu2004-package
      - name: ".publish"
        distros:
          - rhel80-small
    display_name: RHEL 8.2 arm64
    run_on:
      - rhel82-arm64-small
    expansions:
      compile_flags: "--ssl MONGO_DISTMOD=rhel82 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      large_distro_name: rhel82-arm64-large
      packager_arch: aarch64
      packager_distro: rhel82
      packager_script: packager.py
      push_arch: aarch64-rhel82
      push_bucket: downloads.mongodb.org
      push_name: linux
      push_path: linux
      repo_edition: org
      scons_cache_scope: shared
  - name: rhel76_compile_rhel70
    tasks:
      - name: compile_and_archive_dist_test_then_package_TG
        distros:
          - rhel70
      - name: ".ssl"
      - name: jsCore
      - name: external_auth
    display_name: RHEL 7.0/7.6 Cross-ABI
    run_on:
      - rhel76-test
    expansions:
      compile_flags: "--ssl MONGO_DISTMOD=rhel70 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
  - name: enterprise-rhel-81-ppc64le
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - rhel81-power8-large
      - name: ".aggregation .common"
      - name: audit
      - name: ".auth !.multiversion !.jscore"
      - name: ".misc_js"
      - name: ".encrypt"
      - name: ".integration !.audit"
        distros:
          - rhel81-power8-large
      - name: ".jscore .common !.auth"
      - name: jsCore_op_query
      - name: ".read_write_concern"
      - name: replica_sets
      - name: ".replica_sets .common"
      - name: sasl
      - name: ".sharding .jscore !.wo_snapshot !.multi_stmt"
      - name: ".sharding .common !.multiversion"
      - name: snmp
      - name: ".stitch"
      - name: ".publish"
        distros:
          - rhel70-small
    display_name: Enterprise RHEL 8.1 PPC64LE
    run_on:
      - rhel81-power8-small
    batchtime: 10080
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
      compile_flags: "--ssl MONGO_DISTMOD=rhel81 -j$(echo \"$(grep -c processor /proc/cpuinfo)/2\" | bc) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      multiversion_architecture: ppc64le
      multiversion_edition: enterprise
      multiversion_platform: rhel81
      packager_arch: ppc64le
      packager_distro: rhel81
      packager_script: packager_enterprise.py
      push_arch: ppc64le-enterprise-rhel81
      push_bucket: downloads.10gen.com
      push_name: linux
      push_path: linux
      repo_edition: enterprise
      resmoke_jobs_factor: "0.25"
    stepback: false
    modules:
      - enterprise
  - name: enterprise-rhel-72-s390x-compile
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - rhel72-zseries-build
    display_name: Enterprise RHEL 7.2 s390x Compile
    run_on:
      - rhel72-zseries-test
    batchtime: 10080
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
      compile_flags: "--ssl MONGO_DISTMOD=rhel72 -j3 --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      multiversion_architecture: s390x
      multiversion_edition: enterprise
      multiversion_platform: rhel72
      packager_arch: s390x
      packager_distro: rhel72
      packager_script: packager_enterprise.py
      push_arch: s390x-enterprise-rhel72
      push_bucket: downloads.10gen.com
      push_name: linux
      push_path: linux
      release_buid: "true"
      repo_edition: enterprise
      resmoke_jobs_max: "2"
    stepback: false
    modules:
      - enterprise
  - name: enterprise-rhel-72-s390x
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - rhel72-zseries-build
      - name: ".aggregation .common"
      - name: audit
      - name: ".auth !.multiversion !.jscore"
      - name: ".misc_js"
      - name: ".encrypt"
      - name: ".integration !.audit"
        distros:
          - rhel72-zseries-build
      - name: ".jscore .common !.auth"
      - name: jsCore_op_query
      - name: ".read_write_concern"
      - name: replica_sets
      - name: ".replica_sets .common"
      - name: sasl
      - name: ".sharding .jscore !.wo_snapshot !.multi_stmt"
      - name: ".sharding .common !.multiversion"
      - name: snmp
      - name: ".stitch"
      - name: ".publish"
        distros:
          - rhel70-small
    display_name: Enterprise RHEL 7.2 s390x
    run_on:
      - rhel72-zseries-test
    batchtime: 525600
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
      compile_flags: "--ssl MONGO_DISTMOD=rhel72 -j3 --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      multiversion_architecture: s390x
      multiversion_edition: enterprise
      multiversion_platform: rhel72
      packager_arch: s390x
      packager_distro: rhel72
      packager_script: packager_enterprise.py
      push_arch: s390x-enterprise-rhel72
      push_bucket: downloads.10gen.com
      push_name: linux
      push_path: linux
      release_buid: "true"
      repo_edition: enterprise
      resmoke_jobs_max: "2"
    stepback: false
    modules:
      - enterprise
  - name: enterprise-rhel-72-s390x-all-feature-flags
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - rhel72-zseries-build
      - name: jsCore
      - name: replica_sets_jscore_passthrough
    display_name: Enterprise RHEL 7.2 s390x (all feature flags)
    run_on:
      - rhel72-zseries-test
    batchtime: 525600
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
      compile_flags: "--ssl MONGO_DISTMOD=rhel72 -j3 --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      multiversion_architecture: s390x
      multiversion_edition: enterprise
      multiversion_platform: rhel72
      packager_arch: s390x
      packager_distro: rhel72
      packager_script: packager_enterprise.py
      release_buid: "true"
      repo_edition: enterprise
      resmoke_jobs_max: "2"
      test_flags: "--runAllFeatureFlagTests"
    stepback: false
    modules:
      - enterprise
  - name: rhel-72-s390x
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - rhel72-zseries-build
      - name: jsCore
      - name: replica_sets_jscore_passthrough
      - name: ssl_gen
      - name: ".publish"
        distros:
          - rhel70-small
    display_name: RHEL 7.2 s390x
    run_on:
      - rhel72-zseries-test
    batchtime: 525600
    expansions:
      compile_flags: "--ssl MONGO_DISTMOD=rhel72 -j3 --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      packager_arch: s390x
      packager_distro: rhel72
      packager_script: packager.py
      push_arch: s390x-rhel72
      push_bucket: downloads.mongodb.org
      push_name: linux
      push_path: linux
      repo_edition: org
  - name: enterprise-ubuntu-dynamic-1804-clang-tidy-required
    tasks:
      - name: clang_tidy_TG
    display_name: "! Enterprise Clang Tidy"
    run_on:
      - ubuntu1804-xlarge
    batchtime: 240
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
      compile_flags: "--link-model=dynamic -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_clang.vars"
      lang_environment: LANG=C
      num_scons_link_jobs_available: "0.99"
      scons_cache_mode: all
      scons_cache_scope: shared
      show_scons_timings: "false"
    modules:
      - enterprise
  - name: enterprise-suse12-64
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - suse12-build
      - name: ".aggfuzzer .common"
      - name: audit
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".encrypt !.replica_sets !.aggregation !.sharding !.jscore"
      - name: ".jscore .common !.compat !.decimal !.sharding"
      - name: ".jstestfuzz .common"
      - name: ".logical_session_cache .one_sec"
      - name: replica_sets_auth_gen
      - name: replica_sets_jscore_passthrough
      - name: sasl
      - name: sharding_auth_gen
      - name: snmp
      - name: ".stitch"
      - name: test_packages
        distros:
          - ubuntu2004-package
      - name: ".publish"
        distros:
          - suse12-small
    display_name: Enterprise SLES 12
    run_on:
      - suse12-test
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
      compile_flags: "--ssl MONGO_DISTMOD=suse12 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      multiversion_edition: enterprise
      multiversion_platform: suse12
      packager_arch: x86_64
      packager_distro: suse12
      packager_script: packager_enterprise.py
      push_arch: x86_64-enterprise-suse12
      push_bucket: downloads.10gen.com
      push_name: linux
      push_path: linux
      repo_edition: enterprise
      scons_cache_scope: shared
    modules:
      - enterprise
  - name: suse12
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - suse12-build
      - name: ".aggfuzzer .common"
      - name: aggregation
      - name: ".auth !.audit !.multiversion"
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".misc_js"
      - name: ".concurrency .common !.large"
      - name: ".concurrency .common .large"
        distros:
          - suse12-build
      - name: concurrency_replication_causal_consistency_gen
      - name: disk_wiredtiger
      - name: free_monitoring
      - name: ".jscore .common !.decimal"
      - name: ".jstestfuzz .common"
      - name: multiversion_gen
      - name: ".logical_session_cache .one_sec"
      - name: replica_sets
      - name: ".replica_sets .common"
      - name: ".sharding .txns"
      - name: ".sharding .common !.op_query !.csrs"
      - name: ".ssl"
      - name: ".stitch"
      - name: ".publish"
        distros:
          - suse12-small
    display_name: SUSE 12
    run_on:
      - suse12-test
    expansions:
      compile_flags: "--ssl MONGO_DISTMOD=suse12 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      large_distro_name: suse12-build
      multiversion_edition: targeted
      multiversion_platform: suse12
      packager_arch: x86_64
      packager_distro: suse12
      packager_script: packager.py
      push_arch: x86_64-suse12
      push_bucket: downloads.mongodb.org
      push_name: linux
      push_path: linux
      repo_edition: org
      scons_cache_scope: shared
  - name: enterprise-suse15-64
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - suse15-build
      - name: ".aggfuzzer .common !.multiversion"
      - name: audit
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".encrypt !.replica_sets !.aggregation !.sharding !.jscore"
      - name: ".jscore .common !.decimal !.compat !.sharding"
      - name: ".jstestfuzz .common"
      - name: ".logical_session_cache .one_sec"
      - name: replica_sets_auth_gen
      - name: replica_sets_jscore_passthrough
      - name: sasl
      - name: sharding_auth_gen
      - name: snmp
      - name: ".stitch"
      - name: ".publish"
        distros:
          - suse15-small
    display_name: Enterprise SLES 15
    run_on:
      - suse15-test
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
      compile_flags: "--ssl MONGO_DISTMOD=suse15 --use-libunwind=off -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      packager_arch: x86_64
      packager_distro: suse15
      packager_script: packager_enterprise.py
      push_arch: x86_64-enterprise-suse15
      push_bucket: downloads.10gen.com
      push_name: linux
      push_path: linux
      repo_edition: enterprise
      scons_cache_scope: shared
    modules:
      - enterprise
  - name: suse15
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - suse15-build
      - name: ".aggfuzzer .common !.multiversion"
      - name: aggregation
      - name: ".auth !.audit !.multiversion"
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".misc_js"
      - name: ".concurrency .common"
      - name: concurrency_replication_causal_consistency_gen
      - name: disk_wiredtiger
      - name: free_monitoring
      - name: ".jscore .common !.decimal"
      - name: ".jstestfuzz .common"
      - name: ".logical_session_cache .one_sec"
      - name: multiversion_gen
      - name: replica_sets
      - name: ".replica_sets .common"
      - name: ".sharding .txns"
      - name: ".sharding .common !.op_query !.csrs !.multiversion"
      - name: ".ssl"
      - name: ".stitch"
      - name: ".publish"
        distros:
          - suse15-small
    display_name: SUSE 15
    run_on:
      - suse15-test
    expansions:
      compile_flags: "--ssl MONGO_DISTMOD=suse15 --use-libunwind=off -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      large_distro_name: suse15-build
      multiversion_edition: targeted
      multiversion_platform: suse15
      packager_arch: x86_64
      packager_distro: suse15
      packager_script: packager.py
      push_arch: x86_64-suse15
      push_bucket: downloads.mongodb.org
      push_name: linux
      push_path: linux
      repo_edition: org
      scons_cache_scope: shared
  - name: enterprise-debian92-64
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - debian92-build
      - name: ".aggfuzzer .common"
      - name: audit
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".encrypt !.replica_sets !.aggregation !.sharding !.jscore"
      - name: ".jscore .common !.decimal !.compat !.sharding"
      - name: ".jstestfuzz .common"
      - name: ".logical_session_cache .one_sec"
      - name: replica_sets_auth_gen
      - name: replica_sets_jscore_passthrough
      - name: sasl
      - name: sharding_auth_gen
      - name: snmp
      - name: ".stitch"
      - name: test_packages
        distros:
          - ubuntu2004-package
      - name: ".publish"
        distros:
          - debian92-small
    display_name: Enterprise Debian 9.2
    run_on:
      - debian92-test
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
      compile_flags: "--ssl MONGO_DISTMOD=debian92 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      large_distro_name: debian92-build
      multiversion_edition: enterprise
      multiversion_platform: debian92
      packager_arch: x86_64
      packager_distro: debian92
      packager_script: packager_enterprise.py
      push_arch: x86_64-enterprise-debian92
      push_bucket: downloads.10gen.com
      push_name: linux
      push_path: linux
      repo_edition: enterprise
      scons_cache_scope: shared
    modules:
      - enterprise
  - name: debian92
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - debian92-build
      - name: ".aggfuzzer .common"
      - name: aggregation
      - name: aggregation_auth
      - name: ".auth !.audit !.multiversion"
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".misc_js"
      - name: ".concurrency .common"
      - name: concurrency_replication_causal_consistency_gen
      - name: disk_wiredtiger
      - name: free_monitoring
      - name: ".jscore .common !.decimal"
      - name: ".jstestfuzz .common"
      - name: ".logical_session_cache .one_sec"
      - name: multiversion_gen
      - name: replica_sets
      - name: ".replica_sets .common"
      - name: ".sharding .jscore !.wo_snapshot !.multi_stmt"
      - name: ".sharding .common !.op_query !.csrs"
      - name: ".ssl"
      - name: ".stitch"
      - name: test_packages
        distros:
          - ubuntu2004-package
      - name: ".publish"
        distros:
          - debian92-small
    display_name: Debian 9.2
    run_on:
      - debian92-test
    expansions:
      compile_flags: "--ssl MONGO_DISTMOD=debian92 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      large_distro_name: debian92-build
      multiversion_edition: targeted
      multiversion_platform: debian92
      packager_arch: x86_64
      packager_distro: debian92
      packager_script: packager.py
      push_arch: x86_64-debian92
      push_bucket: downloads.mongodb.org
      push_name: linux
      push_path: linux
      repo_edition: org
      scons_cache_scope: shared
  - name: enterprise-debian10-64
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - debian10-build
      - name: ".aggfuzzer .common"
      - name: audit
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".encrypt !.replica_sets !.aggregation !.sharding !.jscore"
      - name: ".jscore .common !.decimal !.compat !.sharding"
      - name: ".jstestfuzz .common"
      - name: ".logical_session_cache .one_sec"
      - name: replica_sets_auth_gen
      - name: replica_sets_jscore_passthrough
      - name: sasl
      - name: sharding_auth_gen
      - name: snmp
      - name: ".stitch"
      - name: test_packages
        distros:
          - ubuntu2004-package
      - name: ".publish"
        distros:
          - debian10-small
    display_name: Enterprise Debian 10
    run_on:
      - debian10-test
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
      compile_flags: "--ssl MONGO_DISTMOD=debian10 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      large_distro_name: debian10-build
      multiversion_edition: enterprise
      multiversion_platform: debian10
      packager_arch: x86_64
      packager_distro: debian10
      packager_script: packager_enterprise.py
      push_arch: x86_64-enterprise-debian10
      push_bucket: downloads.10gen.com
      push_name: linux
      push_path: linux
      repo_edition: enterprise
      scons_cache_scope: shared
    modules:
      - enterprise
  - name: debian10
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - debian10-build
      - name: ".aggfuzzer .common"
      - name: aggregation
      - name: aggregation_auth
      - name: ".auth !.audit !.multiversion"
      - name: causally_consistent_jscore_txns_passthrough
      - name: ".misc_js"
      - name: ".concurrency .common"
      - name: concurrency_replication_causal_consistency_gen
      - name: disk_wiredtiger
      - name: free_monitoring
      - name: ".jscore .common !.decimal"
      - name: ".jstestfuzz .common"
      - name: ".logical_session_cache .one_sec"
      - name: multiversion_gen
      - name: replica_sets
      - name: ".replica_sets .common"
      - name: ".sharding .jscore !.wo_snapshot !.multi_stmt"
      - name: ".sharding .common !.op_query !.csrs"
      - name: ".ssl"
      - name: ".stitch"
      - name: test_packages
        distros:
          - ubuntu2004-package
      - name: ".publish"
        distros:
          - debian10-small
    display_name: Debian 10
    run_on:
      - debian10-test
    expansions:
      compile_flags: "--ssl MONGO_DISTMOD=debian10 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      has_packages: "true"
      large_distro_name: debian10-build
      multiversion_edition: targeted
      multiversion_platform: debian10
      packager_arch: x86_64
      packager_distro: debian10
      packager_script: packager.py
      push_arch: x86_64-debian10
      push_bucket: downloads.mongodb.org
      push_name: linux
      push_path: linux
      repo_edition: org
      scons_cache_scope: shared
  - name: enterprise-rhel-80-benchmarks
    tasks:
      - name: compile_benchmarks
        distros:
          - rhel80-medium
      - name: ".benchmarks"
        distros:
          - centos6-perf
    display_name: Enterprise RHEL 8.0 (Benchmarks)
    run_on:
      - centos6-perf
    expansions:
      compile_flags: "--ssl MONGO_DISTMOD=rhel80 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
    modules:
      - enterprise
  - name: enterprise-rhel-80-64-bit-inmem
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - rhel80-xlarge
      - name: ".aggfuzzer .common"
      - name: ".aggregation !.unwind !.encrypt"
      - name: audit
      - name: ".auth !.multiversion"
      - name: ".causally_consistent !.wo_snapshot !.durable_history"
      - name: ".change_streams !.secondary_reads"
      - name: ".misc_js"
      - name: ".concurrency !.ubsan !.no_txns !.debug_only !.kill_terminate"
        distros:
          - rhel80-medium
      - name: initial_sync_fuzzer_gen
      - name: ".integration !.audit"
        distros:
          - rhel80-medium
      - name: ".jscore .common !.decimal"
      - name: jsCore_op_query
      - name: jsCore_txns_large_txns_format
      - name: ".jstestfuzz !.initsync"
      - name: ".logical_session_cache"
      - name: ".multi_shard .common"
      - name: multi_stmt_txn_jscore_passthrough_with_migration_gen
      - name: ".read_write_concern !.durable_history"
      - name: replica_sets
      - name: ".replica_sets .common"
      - name: ".replica_sets .multi_oplog"
      - name: replica_sets_multi_stmt_txn_jscore_passthrough
      - name: replica_sets_multi_stmt_txn_stepdown_jscore_passthrough_gen
        distros:
          - rhel80-medium
      - name: ".resharding_fuzzer"
      - name: ".retry"
      - name: rollback_fuzzer_gen
      - name: sasl
      - name: secondary_reads_passthrough_gen
      - name: session_jscore_passthrough
      - name: sharded_multi_stmt_txn_jscore_passthrough
        distros:
          - rhel80-medium
      - name: ".sharding .jscore !.wo_snapshot !.multi_stmt"
      - name: ".sharding .common !.multiversion !.csrs"
      - name: snmp
      - name: ".ssl"
      - name: ".updatefuzzer"
    display_name: Enterprise RHEL 8.0 (inMemory)
    run_on:
      - rhel80-small
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
      compile_flags: "--ssl MONGO_DISTMOD=rhel80 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      large_distro_name: rhel80-medium
      multiversion_edition: enterprise
      multiversion_platform: rhel80
      scons_cache_scope: shared
      test_flags: "--storageEngine=inMemory --excludeWithAnyTags=requires_persistence,requires_journaling"
    modules:
      - enterprise
  - name: linux-64-ephemeralForTest
    tasks:
      - name: compile_test_and_package_serial_TG
      - name: ".aggfuzzer .common"
      - name: aggregation
      - name: ".auth !.multiversion !.audit !.sharding"
      - name: ".misc_js"
      - name: ".integration !.audit"
      - name: ".jscore .common !.txns !.decimal"
      - name: jsCore_op_query
      - name: ".logical_session_cache .one_sec"
      - name: ".read_write_concern .linearize"
      - name: replica_sets
      - name: ".replica_sets .common"
      - name: ".updatefuzzer"
    display_name: Linux (ephemeralForTest)
    run_on:
      - rhel80-medium
    expansions:
      compile_flags: "-j$(grep -c ^processor /proc/cpuinfo) --dbg=off --opt=on --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      multiversion_edition: targeted
      multiversion_platform: rhel80
      scons_cache_scope: shared
      test_flags: "--storageEngine=ephemeralForTest --excludeWithAnyTags=requires_persistence,requires_fsync,SERVER-21420,SERVER-21658,requires_journaling,requires_wiredtiger,uses_transactions,uses_speculative_majority,requires_snapshot_read,requires_majority_read_concern,uses_change_streams,requires_sharding,incompatible_with_eft --mongodSetParameters=\"{oplogApplicationEnforcesSteadyStateConstraints: false}\""
  - name: enterprise-rhel-72-s390x-inmem
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - rhel72-zseries-build
      - name: ".aggregation .common"
      - name: ".auth !.multiversion"
      - name: audit
      - name: ".misc_js"
      - name: ".integration !.audit"
        distros:
          - rhel72-zseries-build
      - name: ".jscore .common !.decimal"
      - name: jsCore_op_query
      - name: ".read_write_concern !.durable_history"
      - name: replica_sets
      - name: ".replica_sets .common"
      - name: sasl
      - name: secondary_reads_passthrough_gen
      - name: ".sharding .jscore !.wo_snapshot !.multi_stmt"
      - name: ".sharding .common !.multiversion !.csrs"
      - name: snmp
      - name: ".ssl"
    display_name: Enterprise RHEL 7.2 s390x (inMemory) DEBUG
    run_on:
      - rhel72-zseries-test
    batchtime: 525600
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
      compile_flags: "--dbg=on --opt=on --ssl MONGO_DISTMOD=rhel72 -j3 --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars"
      resmoke_jobs_max: "2"
      test_flags: "--storageEngine=inMemory --excludeWithAnyTags=requires_persistence,requires_journaling"
    stepback: false
    modules:
      - enterprise
  - name: ubuntu1804-debug-asan
    tasks:
      - name: compile_test_and_package_serial_TG
      - name: compile_benchmarks
      - name: ".aggregation"
      - name: ".auth"
      - name: audit
      - name: ".benchmarks"
      - name: ".causally_consistent !.wo_snapshot"
      - name: ".change_streams"
      - name: ".misc_js"
      - name: ".concurrency !.ubsan !.no_txns !.kill_terminate"
      - name: disk_wiredtiger
      - name: ".encrypt"
      - name: free_monitoring
      - name: external_auth
      - name: external_auth_aws
      - name: initial_sync_fuzzer_gen
      - name: ".integration !.standalone !.audit"
      - name: ".jscore .common"
      - name: jsCore_minimum_batch_size
      - name: jsCore_op_query
      - name: jsCore_txns_large_txns_format
      - name: jsonSchema
      - name: ".logical_session_cache"
      - name: ".multi_shard .common"
      - name: multiversion_gen
      - name: ".multiversion_fuzzer"
      - name: ".multiversion_passthrough"
      - name: ".query_fuzzer"
      - name: ".random_multiversion_ds"
      - name: ".read_write_concern"
      - name: replica_sets_large_txns_format_gen
      - name: replica_sets_large_txns_format_jscore_passthrough
      - name: ".replica_sets !.multi_oplog"
      - name: ".resharding_fuzzer"
      - name: ".retry"
      - name: ".read_only"
      - name: ".rollbackfuzzer"
      - name: ".updatefuzzer"
      - name: sasl
      - name: secondary_reads_passthrough_gen
      - name: session_jscore_passthrough
      - name: ".sharding .jscore !.wo_snapshot"
      - name: ".sharding .common !.csrs"
      - name: snmp
      - name: ".watchdog"
      - name: ".stitch"
      - name: unittest_shell_hang_analyzer_gen
      - name: ".updatefuzzer"
      - name: server_discovery_and_monitoring_json_test_TG
      - name: server_selection_json_test_TG
    display_name: ~ ASAN Enterprise Ubuntu 18.04 DEBUG
    run_on:
      - ubuntu1804-build
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
      compile_flags: "--variables-files=etc/scons/mongodbtoolchain_v3_clang.vars --dbg=on --opt=on --allocator=system --sanitize=address --ssl --ocsp-stapling=off --enable-free-mon=on -j$(grep -c ^processor /proc/cpuinfo)"
      exec_timeout_secs: "14400"
      hang_analyzer_dump_core: "false"
      lang_environment: LANG=C
      multiversion_edition: enterprise
      multiversion_platform: ubuntu1804
      resmoke_jobs_factor: "0.3"
      san_options: "LSAN_OPTIONS=\"suppressions=etc/lsan.suppressions:report_objects=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer\" ASAN_OPTIONS=\"detect_leaks=1:check_initialization_order=true:strict_init_order=true:abort_on_error=1:disable_coredump=0:handle_abort=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer\""
      scons_cache_scope: shared
      test_flags: "--excludeWithAnyTags=requires_fast_memory,requires_ocsp_stapling"
    stepback: false
    modules:
      - enterprise
  - name: ubuntu1804-debug-asan-all-feature-flags
    tasks:
      - name: compile_test_and_package_serial_TG
      - name: compile_benchmarks
      - name: ".aggregation"
      - name: audit
      - name: ".causally_consistent !.wo_snapshot"
      - name: ".change_streams"
      - name: ".misc_js"
      - name: free_monitoring
      - name: external_auth
      - name: external_auth_aws
      - name: initial_sync_fuzzer_gen
      - name: ".integration !.standalone !.audit"
      - name: ".jscore .common"
      - name: jsCore_minimum_batch_size
      - name: jsCore_op_query
      - name: jsCore_txns_large_txns_format
      - name: jsonSchema
      - name: ".logical_session_cache"
      - name: ".multi_shard .common"
      - name: ".query_fuzzer"
      - name: ".read_write_concern"
      - name: replica_sets_large_txns_format_gen
      - name: replica_sets_large_txns_format_jscore_passthrough
      - name: ".replica_sets !.multi_oplog"
      - name: ".resharding_fuzzer"
      - name: ".retry"
      - name: ".read_only"
      - name: ".rollbackfuzzer"
      - name: sasl
      - name: secondary_reads_passthrough_gen
      - name: session_jscore_passthrough
      - name: ".sharding .jscore !.wo_snapshot"
      - name: ".sharding .common !.csrs"
      - name: snmp
      - name: ".tenant_migration"
      - name: ".watchdog"
      - name: ".stitch"
    display_name: ~ Shared Library ASAN Enterprise Ubuntu 18.04 DEBUG (all feature flags)
    run_on:
      - ubuntu1804-build
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
      compile_flags: "--variables-files=etc/scons/mongodbtoolchain_v3_clang.vars --dbg=on --opt=on --allocator=system --sanitize=address --ssl --ocsp-stapling=off --enable-free-mon=on -j$(grep -c ^processor /proc/cpuinfo)"
      exec_timeout_secs: "14400"
      hang_analyzer_dump_core: "false"
      lang_environment: LANG=C
      multiversion_edition: enterprise
      multiversion_platform: ubuntu1804
      resmoke_jobs_factor: "0.3"
      san_options: "LSAN_OPTIONS=\"suppressions=etc/lsan.suppressions:report_objects=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer\" ASAN_OPTIONS=\"detect_leaks=1:check_initialization_order=true:strict_init_order=true:abort_on_error=1:disable_coredump=0:handle_abort=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer\""
      scons_cache_scope: shared
      test_flags: "--runAllFeatureFlagTests"
    stepback: false
    modules:
      - enterprise
  - name: ubuntu1804-asan
    tasks:
      - name: compile_test_and_package_serial_TG
      - name: ".aggfuzzer .common"
      - name: free_monitoring
      - name: ".jstestfuzz !.initsync"
    display_name: ~ ASAN Ubuntu 18.04
    run_on:
      - ubuntu1804-build
    expansions:
      compile_flags: "--variables-files=etc/scons/mongodbtoolchain_v3_clang.vars --opt=on --allocator=system --sanitize=address --ssl --ocsp-stapling=off -j$(grep -c ^processor /proc/cpuinfo)"
      hang_analyzer_dump_core: "false"
      lang_environment: LANG=C
      multiversion_edition: enterprise
      multiversion_platform: ubuntu1804
      resmoke_jobs_factor: "0.3"
      san_options: "LSAN_OPTIONS=\"suppressions=etc/lsan.suppressions:report_objects=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer\" ASAN_OPTIONS=\"detect_leaks=1:check_initialization_order=true:strict_init_order=true:abort_on_error=1:disable_coredump=0:handle_abort=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer\""
      scons_cache_scope: shared
      test_flags: "--excludeWithAnyTags=requires_fast_memory,requires_ocsp_stapling"
    stepback: true
  - name: ubuntu1804-debug-ubsan
    tasks:
      - name: compile_test_and_package_serial_TG
      - name: compile_benchmarks
      - name: ".aggregation"
      - name: ".auth"
      - name: audit
      - name: ".benchmarks"
      - name: ".causally_consistent !.wo_snapshot"
      - name: ".change_streams"
      - name: ".misc_js"
      - name: ".concurrency !.no_txns !.repl !.kill_terminate"
      - name: disk_wiredtiger
      - name: ".encrypt"
      - name: free_monitoring
      - name: initial_sync_fuzzer_gen
      - name: ".integration !.audit"
      - name: ".jscore .common"
      - name: jsCore_minimum_batch_size
      - name: jsCore_op_query
      - name: jsCore_txns_large_txns_format
      - name: jsonSchema
      - name: ".logical_session_cache .one_sec"
      - name: ".multi_shard .common"
      - name: multiversion_gen
      - name: ".multiversion_fuzzer"
      - name: ".multiversion_passthrough"
      - name: ".random_multiversion_ds"
      - name: ".read_write_concern"
      - name: replica_sets_large_txns_format_gen
      - name: replica_sets_large_txns_format_jscore_passthrough
      - name: ".replica_sets !.multi_oplog"
      - name: ".resharding_fuzzer"
      - name: ".retry"
      - name: ".rollbackfuzzer"
      - name: ".read_only"
      - name: sasl
      - name: secondary_reads_passthrough_gen
      - name: session_jscore_passthrough
      - name: ".sharding .jscore !.wo_snapshot"
      - name: ".sharding .common !.csrs"
      - name: snmp
      - name: ".stitch"
      - name: ".updatefuzzer"
      - name: watchdog_wiredtiger
      - name: server_discovery_and_monitoring_json_test_TG
      - name: server_selection_json_test_TG
    display_name: ~ UBSAN Enterprise Ubuntu 18.04 DEBUG
    run_on:
      - ubuntu1804-build
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
      compile_flags: "--variables-files=etc/scons/mongodbtoolchain_v3_clang.vars --dbg=on --opt=on --sanitize=undefined --ssl --ocsp-stapling=off --enable-free-mon=on -j$(grep -c ^processor /proc/cpuinfo)"
      lang_environment: LANG=C
      multiversion_edition: enterprise
      multiversion_platform: ubuntu1804
      resmoke_jobs_factor: "0.3"
      san_options: "UBSAN_OPTIONS=\"print_stacktrace=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer\""
      scons_cache_scope: shared
      test_flags: "--excludeWithAnyTags=requires_ocsp_stapling"
    stepback: false
    modules:
      - enterprise
  - name: ubuntu1804-debug-ubsan-all-feature-flags
    tasks:
      - name: compile_test_and_package_serial_TG
      - name: compile_benchmarks
      - name: ".aggregation"
      - name: ".auth"
      - name: audit
      - name: ".causally_consistent !.wo_snapshot"
      - name: ".change_streams"
      - name: ".misc_js"
      - name: ".concurrency !.no_txns !.repl !.kill_terminate"
      - name: disk_wiredtiger
      - name: ".encrypt"
      - name: free_monitoring
      - name: initial_sync_fuzzer_gen
      - name: ".integration !.audit"
      - name: ".jscore .common"
      - name: jsCore_minimum_batch_size
      - name: jsCore_op_query
      - name: jsCore_txns_large_txns_format
      - name: jsonSchema
      - name: ".logical_session_cache .one_sec"
      - name: ".multi_shard .common"
      - name: ".read_write_concern"
      - name: replica_sets_large_txns_format_gen
      - name: replica_sets_large_txns_format_jscore_passthrough
      - name: ".replica_sets !.multi_oplog"
      - name: ".resharding_fuzzer"
      - name: ".retry"
      - name: ".rollbackfuzzer"
      - name: ".read_only"
      - name: sasl
      - name: secondary_reads_passthrough_gen
      - name: session_jscore_passthrough
      - name: ".sharding .jscore !.wo_snapshot"
      - name: ".sharding .common !.csrs"
      - name: snmp
      - name: ".stitch"
      - name: ".tenant_migration"
      - name: ".updatefuzzer"
      - name: watchdog_wiredtiger
    display_name: ~ Shared Library UBSAN Enterprise Ubuntu 18.04 DEBUG (all feature flags)
    run_on:
      - ubuntu1804-build
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
      compile_flags: "--variables-files=etc/scons/mongodbtoolchain_v3_clang.vars --dbg=on --opt=on --sanitize=undefined --ssl --ocsp-stapling=off --enable-free-mon=on -j$(grep -c ^processor /proc/cpuinfo)"
      lang_environment: LANG=C
      multiversion_edition: enterprise
      multiversion_platform: ubuntu1804
      resmoke_jobs_factor: "0.3"
      san_options: "UBSAN_OPTIONS=\"print_stacktrace=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer\""
      scons_cache_scope: shared
      test_flags: "--excludeWithAnyTags=requires_ocsp_stapling --runAllFeatureFlagTests"
    stepback: false
    modules:
      - enterprise
  - name: ubuntu1804-debug-aubsan-lite-required
    tasks:
      - name: compile_test_and_package_parallel_core_stream_TG
        distros:
          - ubuntu1804-xlarge
      - name: compile_test_and_package_parallel_unittest_stream_TG
        distros:
          - ubuntu1804-xlarge
      - name: compile_test_and_package_parallel_dbtest_stream_TG
        distros:
          - ubuntu1804-xlarge
      - name: jsCore
      - name: jsCore_txns
      - name: unittest_shell_hang_analyzer_gen
    display_name: "! Shared Library {A,UB}SAN Enterprise Ubuntu 18.04 DEBUG"
    run_on:
      - ubuntu1804-build
    batchtime: 240
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
      compile_flags: "--variables-files=etc/scons/mongodbtoolchain_v3_clang.vars --dbg=on --opt=on --allocator=system --sanitize=undefined,address --ssl --ocsp-stapling=off -j$(grep -c ^processor /proc/cpuinfo) --link-model=dynamic"
      hang_analyzer_dump_core: "false"
      lang_environment: LANG=C
      max_sub_suites: "3"
      num_scons_link_jobs_available: "0.99"
      resmoke_jobs_factor: "0.3"
      san_options: "UBSAN_OPTIONS=\"print_stacktrace=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer\" LSAN_OPTIONS=\"suppressions=etc/lsan.suppressions:report_objects=1\" ASAN_OPTIONS=\"detect_leaks=1:check_initialization_order=true:strict_init_order=true:abort_on_error=1:disable_coredump=0:handle_abort=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer\""
      scons_cache_mode: all
      scons_cache_scope: shared
      test_flags: "--excludeWithAnyTags=requires_ocsp_stapling"
    stepback: true
    modules:
      - enterprise
  - name: ubuntu1804-debug-aubsan-lite-all-feature-flags-required
    tasks:
      - name: compile_test_and_package_parallel_core_stream_TG
        distros:
          - ubuntu1804-xlarge
      - name: jsCore
      - name: jsCore_txns
    display_name: "! Shared Library {A,UB}SAN Enterprise Ubuntu 18.04 DEBUG (all feature flags)"
    run_on:
      - ubuntu1804-build
    batchtime: 240
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
      compile_flags: "--variables-files=etc/scons/mongodbtoolchain_v3_clang.vars --dbg=on --opt=on --allocator=system --sanitize=undefined,address --ssl --ocsp-stapling=off -j$(grep -c ^processor /proc/cpuinfo) --link-model=dynamic"
      hang_analyzer_dump_core: "false"
      lang_environment: LANG=C
      max_sub_suites: "3"
      num_scons_link_jobs_available: "0.99"
      resmoke_jobs_factor: "0.3"
      san_options: "UBSAN_OPTIONS=\"print_stacktrace=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer\" LSAN_OPTIONS=\"suppressions=etc/lsan.suppressions:report_objects=1\" ASAN_OPTIONS=\"detect_leaks=1:check_initialization_order=true:strict_init_order=true:abort_on_error=1:disable_coredump=0:handle_abort=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer\""
      scons_cache_mode: all
      scons_cache_scope: shared
      test_flags: "--excludeWithAnyTags=requires_ocsp_stapling --runAllFeatureFlagTests"
    stepback: true
    modules:
      - enterprise
  - name: ubuntu1804-debug-aubsan-lite_fuzzer
    tasks:
      - name: compile_archive_and_run_libfuzzertests_TG
    display_name: "{A,UB}SAN Enterprise Ubuntu 18.04 FUZZER"
    run_on:
      - ubuntu1804-build
    display_tasks:
      - name: libfuzzertests!
        execution_tasks:
          - compile_and_archive_libfuzzertests
          - fetch_and_run_libfuzzertests
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
      compile_flags: "LINKFLAGS=-nostdlib++ LIBS=stdc++ --variables-files=etc/scons/mongodbtoolchain_v3_clang.vars --dbg=on --opt=on --allocator=system --sanitize=undefined,address,fuzzer --ssl --ocsp-stapling=off -j$(grep -c ^processor /proc/cpuinfo)"
      hang_analyzer_dump_core: "false"
      lang_environment: LANG=C
      resmoke_jobs_factor: "0.3"
      san_options: "UBSAN_OPTIONS=\"print_stacktrace=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer\" LSAN_OPTIONS=\"suppressions=etc/lsan.suppressions:report_objects=1\" ASAN_OPTIONS=\"detect_leaks=1:check_initialization_order=true:strict_init_order=true:abort_on_error=1:disable_coredump=0:handle_abort=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer\""
      scons_cache_scope: shared
      test_flags: "--excludeWithAnyTags=requires_ocsp_stapling"
    stepback: false
    modules:
      - enterprise
  - name: enterprise-ubuntu2004-debug-tsan
    tasks:
      - name: compile_test_and_package_serial_TG
      - name: jsCore
    display_name: ~ TSAN Enterprise Ubuntu 20.04 DEBUG (ephemeralForTest)
    run_on:
      - ubuntu2004-large
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
      compile_flags: "--variables-files=etc/scons/mongodbtoolchain_v3_clang.vars --dbg=on --opt=on --allocator=system --sanitize=thread --ssl --enable-free-mon=on --use-libunwind=off -j$(grep -c ^processor /proc/cpuinfo)"
      lang_environment: LANG=C
      resmoke_jobs_factor: "0.3"
      san_options: "TSAN_OPTIONS=\"halt_on_error=1:report_thread_leaks=0:die_after_fork=0:suppressions=etc/tsan.suppressions:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer\""
      scons_cache_scope: shared
      test_flags: "--storageEngine=ephemeralForTest --excludeWithAnyTags=requires_persistence,requires_journaling,uses_transactions,requires_wiredtiger,requires_snapshot_read,requires_majority_read_concern"
    stepback: false
    modules:
      - enterprise
  - name: enterprise-ubuntu-unoptimized-1804-64-bit
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - ubuntu1804-build
    display_name: ~ Enterprise Ubuntu 18.04 (without Diagnostic Latches)
    batchtime: 1440
    expansions:
      compile_flags: MONGO_DISTMOD=ubuntu1804 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars --use-diagnostic-latches=off
    modules:
      - enterprise
  - name: enterprise-ubuntu-no-latch-1804-64-bit
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - ubuntu1804-build
    display_name: ~ Enterprise Ubuntu 18.04 DEBUG (Unoptimized)
    expansions:
      compile_flags: MONGO_DISTMOD=ubuntu1804 -j$(grep -c ^processor /proc/cpuinfo) --dbg=on --opt=off --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars --detect-odr-violations
      scons_cache_scope: shared
    modules:
      - enterprise
  - name: enterprise-ubuntu-fixed-service-executor-1804-64-bit
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - ubuntu1804-build
      - name: ".aggregation !.no_async"
      - name: ".sharding .auth"
      - name: ".sharding .causally_consistent !.wo_snapshot"
      - name: ".concurrency .common !.kill_terminate"
      - name: ".integration !.audit"
      - name: ".jscore .common"
      - name: noPassthrough_gen
      - name: noPassthroughWithMongod_gen
      - name: ".logical_session_cache .one_sec"
      - name: ".sharding .jscore !.wo_snapshot !.multi_stmt"
      - name: ".sharding .common !.csrs"
    display_name: ~ Enterprise Ubuntu 18.04 (with FixedServiceExecutor)
    run_on:
      - ubuntu1804-test
    batchtime: 1440
    expansions:
      compile_flags: MONGO_DISTMOD=ubuntu1804 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
      large_distro_name: ubuntu1804-build
      multiversion_edition: enterprise
      multiversion_platform: ubuntu1804
      scons_cache_scope: shared
      test_flags: "--mongosSetParameters=\"{initialServiceExecutorThreadingModel: borrowed}\" --mongodSetParameters=\"{initialServiceExecutorThreadingModel: borrowed}\""
    modules:
      - enterprise
  - name: enterprise-ubuntu-sdam-replica-set-monitor-1804-64-bit
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - ubuntu1804-build
      - name: ".aggregation !.no_async"
      - name: ".sharding .auth"
      - name: ".sharding .causally_consistent !.wo_snapshot"
      - name: ".concurrency .common !.kill_terminate"
      - name: ".integration !.audit"
      - name: ".jscore .common"
      - name: ".logical_session_cache .one_sec"
      - name: ".sharding .jscore !.wo_snapshot !.multi_stmt"
      - name: ".sharding .common !.csrs"
    display_name: ~ Enterprise Ubuntu 18.04 (with SdamReplicaSetMonitor)
    run_on:
      - ubuntu1804-test
    batchtime: 1440
    expansions:
      compile_flags: MONGO_DISTMOD=ubuntu1804 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
      large_distro_name: ubuntu1804-build
      multiversion_edition: enterprise
      multiversion_platform: ubuntu1804
      scons_cache_scope: shared
      test_flags: "--mongosSetParameters=\"{replicaSetMonitorProtocol: sdam}\" --mongodSetParameters=\"{replicaSetMonitorProtocol: sdam}\" --excludeWithAnyTags=requires_streamable_rsm"
    modules:
      - enterprise
  - name: enterprise-ubuntu-task-executor-pool-size-1804-64-bit
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - ubuntu1804-build
      - name: ".aggregation !.no_async"
      - name: ".sharding .auth"
      - name: ".sharding .causally_consistent !.wo_snapshot"
      - name: ".concurrency .common !.kill_terminate"
      - name: ".integration !.audit"
      - name: ".jscore .common"
      - name: ".logical_session_cache .one_sec"
      - name: ".sharding .jscore !.wo_snapshot !.multi_stmt"
      - name: ".sharding .common !.csrs"
    display_name: "~ Enterprise Ubuntu 18.04 (with {taskExecutorPoolSize: 4})"
    run_on:
      - ubuntu1804-test
    batchtime: 1440
    expansions:
      compile_flags: MONGO_DISTMOD=ubuntu1804 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
      large_distro_name: ubuntu1804-build
      multiversion_edition: enterprise
      multiversion_platform: ubuntu1804
      scons_cache_scope: shared
      test_flags: "--mongosSetParameters=\"taskExecutorPoolSize: 4\""
    modules:
      - enterprise
  - name: enterprise-ubuntu-sharding-task-executor-pool-rsm-matchPrimary-1804-64-bit
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - ubuntu1804-build
      - name: ".aggregation !.no_async"
      - name: ".sharding .auth"
      - name: ".sharding .causally_consistent !.wo_snapshot"
      - name: ".concurrency .common !.kill_terminate"
      - name: ".integration !.audit"
      - name: ".jscore .common"
      - name: ".logical_session_cache .one_sec"
      - name: ".sharding .jscore !.wo_snapshot !.multi_stmt"
      - name: ".sharding .common !.csrs"
    display_name: "~ Enterprise Ubuntu 18.04 (with {ShardingTaskExecutorPoolReplicaSetMatching: \"matchPrimaryNode\"})"
    run_on:
      - ubuntu1804-test
    batchtime: 1440
    expansions:
      compile_flags: MONGO_DISTMOD=ubuntu1804 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
      large_distro_name: ubuntu1804-build
      multiversion_edition: enterprise
      multiversion_platform: ubuntu1804
      scons_cache_scope: shared
      test_flags: "--mongosSetParameters=\"ShardingTaskExecutorPoolReplicaSetMatching: \\\"matchPrimaryNode\\\"\" --excludeWithAnyTags=sets_replica_set_matching_strategy"
    modules:
      - enterprise
  - name: enterprise-ubuntu-sharding-task-executor-pool-rsm-matchBusiest-1804-64-bit
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - ubuntu1804-build
      - name: ".aggregation !.no_async"
      - name: ".sharding .auth"
      - name: ".sharding .causally_consistent !.wo_snapshot"
      - name: ".concurrency .common !.kill_terminate"
      - name: ".integration !.audit"
      - name: ".jscore .common"
      - name: ".logical_session_cache .one_sec"
      - name: ".sharding .jscore !.wo_snapshot !.multi_stmt"
      - name: ".sharding .common !.csrs"
    display_name: "~ Enterprise Ubuntu 18.04 (with {ShardingTaskExecutorPoolReplicaSetMatching: \"matchBusiestNode\"})"
    run_on:
      - ubuntu1804-test
    batchtime: 1440
    expansions:
      compile_flags: MONGO_DISTMOD=ubuntu1804 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
      large_distro_name: ubuntu1804-build
      multiversion_edition: enterprise
      multiversion_platform: ubuntu1804
      scons_cache_scope: shared
      test_flags: "--mongosSetParameters=\"ShardingTaskExecutorPoolReplicaSetMatching: \\\"matchBusiestNode\\\"\" --excludeWithAnyTags=sets_replica_set_matching_strategy"
    modules:
      - enterprise
  - name: enterprise-ubuntu-sharding-task-executor-pool-rsm-disabled-1804-64-bit
    tasks:
      - name: compile_test_and_package_serial_TG
        distros:
          - ubuntu1804-build
      - name: ".aggregation !.no_async"
      - name: ".sharding .auth"
      - name: ".sharding .causally_consistent !.wo_snapshot"
      - name: ".concurrency .common !.kill_terminate"
      - name: ".integration !.audit"
      - name: ".jscore .common"
      - name: ".logical_session_cache .one_sec"
      - name: ".sharding .jscore !.wo_snapshot !.multi_stmt"
      - name: ".sharding .common !.csrs"
    display_name: "~ Enterprise Ubuntu 18.04 (with {ShardingTaskExecutorPoolReplicaSetMatching: \"disabled\"})"
    run_on:
      - ubuntu1804-test
    batchtime: 1440
    expansions:
      compile_flags: MONGO_DISTMOD=ubuntu1804 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
      large_distro_name: ubuntu1804-build
      multiversion_edition: enterprise
      multiversion_platform: ubuntu1804
      scons_cache_scope: shared
      test_flags: "--mongosSetParameters=\"ShardingTaskExecutorPoolReplicaSetMatching: \\\"disabled\\\"\" --excludeWithAnyTags=sets_replica_set_matching_strategy"
    modules:
      - enterprise
  - name: shared-scons-cache-pruning
    tasks:
      - name: shared_scons_cache_pruning
    display_name: Shared SCons Cache Pruning
    run_on:
      - ubuntu1604-test
    stepback: false
  - name: windows-shared-scons-cache-pruning
    tasks:
      - name: win_shared_scons_cache_pruning
    display_name: Windows shared SCons Cache Pruning
    run_on:
      - windows-vsCurrent-small
    stepback: false
  - name: selected-tests
    tasks:
      - name: selected_tests_gen
    display_name: ~ Selected Tests
    run_on:
      - rhel80-small
    batchtime: 10080
    expansions:
      selected_tests_buildvariants: enterprise-windows-required linux-64-debug-required enterprise-ubuntu-dynamic-1604-clang ubuntu1804-debug-aubsan-lite-required
    stepback: false
    modules:
      - enterprise
  - name: commit-queue
    tasks:
      - name: validate_commit_message
    display_name: ~ Commit Queue
    run_on:
      - rhel80-small
    batchtime: 10080
    stepback: false
    modules:
      - enterprise
  - name: live-record
    tasks:
      - name: compile_and_archive_dist_test_TG
      - name: ".aggfuzzer"
      - name: ".aggregation"
      - name: ".concurrency !.ubsan !.no_txns !.debug_only !.stepdowns !.non_live_record !.large"
      - name: ".jscore .common"
      - name: jsCore_op_query
      - name: jsCore_txns_large_txns_format
      - name: ".jstestfuzz !.flow_control !.stepdowns !.causal"
      - name: retryable_writes_jscore_passthrough_gen
      - name: retryable_writes_jscore_stepdown_passthrough
      - name: sasl
      - name: ".sharding .jscore !.wo_snapshot !.multi_stmt"
      - name: snmp
    display_name: ~ RHEL 8.0 Shared Library (with UndoDB live-record)
    run_on:
      - rhel80-medium
    batchtime: 1440
    expansions:
      compile_flags: "--ssl MONGO_DISTMOD=rhel80 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars --link-model=dynamic"
      exec_timeout_secs: "28800"
      has_packages: "false"
      large_distro_name: rhel80-medium
      max_sub_suites: "3"
      multiversion_edition: enterprise
      multiversion_platform: rhel80
      num_scons_link_jobs_available: "0.99"
      record_with: "--recordWith /opt/undodb5/bin/live-record"
      resmoke_jobs_factor: "0.3"
      scons_cache_mode: all
      scons_cache_scope: shared
      target_resmoke_time: "10"
      test_flags: "--excludeWithAnyTags=requires_fast_memory,live_record_incompatible"
    stepback: false
    modules:
      - enterprise
  - name: rhel-80-64-bit-dynamic-visibility-test
    tasks:
      - name: compile_test_and_package_parallel_core_stream_TG
        distros:
          - rhel80-xlarge
      - name: compile_test_and_package_parallel_unittest_stream_TG
        distros:
          - rhel80-xlarge
      - name: compile_test_and_package_parallel_dbtest_stream_TG
        distros:
          - rhel80-xlarge
      - name: lint_pylinters
      - name: lint_clang_format
      - name: lint_eslint
      - name: lint_cpplint
      - name: lint_fuzzer_sanity_patch
      - name: lint_yaml
      - name: lint_errorcodes
      - name: test_api_version_compatibility
      - name: burn_in_tests_gen
      - name: burn_in_tests_multiversion_gen
      - name: ".aggfuzzer"
      - name: ".aggregation"
      - name: audit
      - name: ".auth"
      - name: burn_in_tags_gen
      - name: buildscripts_test
      - name: resmoke_end2end_tests
      - name: unittest_shell_hang_analyzer_gen
      - name: ".causally_consistent !.sharding"
      - name: ".change_streams"
      - name: ".misc_js"
      - name: ".concurrency !.large !.ubsan !.no_txns !.debug_only"
      - name: ".concurrency .large !.ubsan !.no_txns !.debug_only"
        distros:
          - rhel80-medium
      - name: disk_wiredtiger
      - name: ".encrypt"
      - name: idl_tests
      - name: initial_sync_fuzzer_gen
      - name: ".integration"
        distros:
          - rhel80-medium
      - name: jsCore
        distros:
          - rhel80-xlarge
      - name: ".jscore .common !jsCore"
      - name: jsCore_minimum_batch_size
      - name: jsCore_op_query
      - name: jsCore_txns_large_txns_format
      - name: jsonSchema
      - name: ".jstestfuzz !.flow_control"
      - name: libunwind_tests
      - name: multiversion_sanity_check_gen
      - name: mqlrun
      - name: ".multi_shard"
      - name: multi_stmt_txn_jscore_passthrough_with_migration_gen
      - name: multiversion_gen
      - name: ".query_fuzzer"
      - name: ".random_multiversion_ds"
      - name: ".read_write_concern .large"
        distros:
          - rhel80-medium
      - name: ".read_write_concern !.large"
      - name: ".replica_sets !.encrypt !.auth"
        distros:
          - rhel80-xlarge
      - name: replica_sets_reconfig_jscore_passthrough_gen
      - name: replica_sets_reconfig_jscore_stepdown_passthrough
        distros:
          - rhel80-xlarge
      - name: replica_sets_reconfig_kill_primary_jscore_passthrough
        distros:
          - rhel80-xlarge
      - name: retryable_writes_jscore_passthrough_gen
      - name: retryable_writes_jscore_stepdown_passthrough
        distros:
          - rhel80-medium
      - name: ".read_only"
      - name: ".rollbackfuzzer"
      - name: sasl
      - name: search
      - name: search_auth
      - name: search_ssl
      - name: session_jscore_passthrough
      - name: ".sharding .jscore !.wo_snapshot !.multi_stmt"
      - name: ".sharding .txns"
      - name: ".sharding .common"
      - name: snmp
      - name: ".stitch"
      - name: ".updatefuzzer"
      - name: secondary_reads_passthrough_gen
      - name: server_discovery_and_monitoring_json_test_TG
        distros:
          - rhel80-xlarge
      - name: server_selection_json_test_TG
        distros:
          - rhel80-xlarge
    display_name: ~ Shared Library RHEL 8.0 (visibility test)
    run_on:
      - rhel80-small
    batchtime: 240
    expansions:
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
      burn_in_tag_buildvariants: enterprise-rhel-80-64-bit-inmem linux-64-duroff enterprise-rhel-80-64-bit-multiversion
      compile_flags: "--ssl MONGO_DISTMOD=rhel80 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars --link-model=dynamic --experimental-visibility-support=on"
      has_packages: "false"
      jstestfuzz_concurrent_num_files: "10"
      jstestfuzz_num_generated_files: "40"
      large_distro_name: rhel80-medium
      max_sub_suites: "5"
      multiversion_edition: enterprise
      multiversion_platform: rhel80
      num_scons_link_jobs_available: "0.99"
      scons_cache_mode: all
      scons_cache_scope: shared
      target_resmoke_time: "10"
    modules:
      - enterprise
  - name: windows-dynamic-visibility-test
    tasks:
      - name: visibility_test_TG
        distros:
          - windows-vsCurrent-large
    display_name: ~ Shared Library Windows (visibility test)
    expansions:
      compile_flags: "CPPPATH=\"c:/sasl/include c:/snmp/include\" LIBPATH=\"c:/sasl/lib c:/snmp/lib\" -j$(( $(grep -c ^processor /proc/cpuinfo) / 2 )) --win-version-min=win10"
      ext: zip
      has_packages: "false"
      python: /cygdrive/c/python/python37/python.exe
      scons_cache_mode: all
      scons_cache_scope: shared
tasks:
  - name: compile_dist_test
    commands:
      - func: scons compile
        vars:
          targets: "install-dist-test ${additional_compile_targets|}"
          task_compile_flags: "--separate-debug PREFIX=dist-test"
    depends_on: []
  - name: archive_dist_test
    commands:
      - func: scons compile
        vars:
          targets: archive-dist-test
          task_compile_flags: "--separate-debug PREFIX=dist-test"
      - command: s3.put
        params:
          local_file: "src/mongodb-binaries.${ext|tgz}"
          remote_file: "${mongo_binaries}"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: mciuploads
          permissions: public-read
          content_type: application/gzip
          display_name: Binaries
          optional: true
      - command: expansions.write
        params:
          file: expansions.yml
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - src/evergreen/gen_feature_flags.sh
          env:
            python: "${python}"
            workdir: "${workdir}"
        type: test
      - command: archive.targz_pack
        params:
          target: artifacts.tgz
          source_dir: src
          include:
            - "./build/**.gcno"
            - "./etc/*san.suppressions"
            - "./etc/pip/**"
            - "./etc/repo_config.yaml"
            - "./etc/scons/**"
            - artifacts.json
            - buildscripts/**
            - compile_expansions.yml
            - all_feature_flags.txt
            - jstests/**
            - library_dependency_graph.json
            - patch_files.txt
            - pytests/**
            - src/mongo/client/sdam/json_tests/sdam_tests/**
            - src/mongo/client/sdam/json_tests/server_selection_tests/**
            - src/mongo/db/modules/enterprise/docs/**
            - src/mongo/db/modules/enterprise/jstests/**
            - src/mongo/db/modules/subscription/jstests/**
            - src/mongo/util/options_parser/test_config_files/**
            - src/third_party/JSON-Schema-Test-Suite/tests/draft4/**
            - src/third_party/mock_ocsp_responder/**
            - src/third_party/schemastore.org/**
          exclude_files:
            - "*_test.pdb"
      - command: s3.put
        params:
          local_file: artifacts.tgz
          remote_file: "${project}/${build_variant}/${revision}/artifacts/${build_id}.tgz"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: mciuploads
          permissions: private
          content_type: application/tar
          display_name: Artifacts
          visibility: signed
      - command: attach.artifacts
        params:
          files:
            - src/artifacts.json
          optional: true
          ignore_artifacts_for_spawn: false
    depends_on:
      - name: compile_dist_test
  - name: archive_dist_test_debug
    commands:
      - func: scons compile
        vars:
          targets: archive-dist-test-debug
          task_compile_flags: "--separate-debug PREFIX=dist-test"
      - func: upload debugsymbols
    depends_on:
      - name: archive_dist_test
  - name: compile_ninja
    commands:
      - func: scons compile
        vars:
          task_compile_flags: "--ninja"
          targets: build.ninja
          task_install_action: default
      - command: shell.exec
        params:
          script: "${activate_virtualenv}\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  vcvars=\"$(vswhere -latest -property installationPath | tr '\\\\' '/' | dos2unix.exe)/VC/Auxiliary/Build/\"\n  cd \"$vcvars\" && cmd /K \"vcvarsall.bat amd64 && cd ${workdir}\\src\"\nfi\npython -m pip install ninja\nninja install-core\n"
          working_dir: src
          shell: bash
  - name: compile_ninja_next
    commands:
      - func: scons compile
        vars:
          task_install_action: default
          task_compile_flags: "--build-tools=next --ninja"
          targets: generate-ninja
      - command: shell.exec
        params:
          script: "${activate_virtualenv}\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  vcvars=\"$(vswhere -latest -property installationPath | tr '\\\\' '/' | dos2unix.exe)/VC/Auxiliary/Build/\"\n  cd \"$vcvars\" && cmd /K \"vcvarsall.bat amd64 && cd ${workdir}\\src\"\nfi\npython -m pip install ninja\nninja install-core\n"
          working_dir: src
          shell: bash
  - name: compile_build_tools_next
    commands:
      - func: scons compile
        vars:
          task_compile_flags: "--build-tools=next"
          task_install_action: default
          targets: install-core
  - name: libdeps_graph_linting
    commands:
      - command: expansions.write
        params:
          file: expansions.yml
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - src/evergreen/libdeps_setup.sh
          env:
            python: "${python}"
            workdir: "${workdir}"
      - func: scons compile
        vars:
          task_compile_flags: "--link-model=dynamic --build-tools=next"
          targets: generate-libdeps-graph
          task_install_action: default
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - src/evergreen/libdeps_run.sh
          env:
            python: "${python}"
            workdir: "${workdir}"
      - command: s3.put
        params:
          local_file: src/results.txt
          remote_file: "${project}/${build_variant}/${revision}/artifacts/libdeps-results.txt.${build_id}-${task_name}.${execution}"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: mciuploads
          permissions: public-read
          content_type: text/plain
          display_name: Libdeps Linter Results
      - command: s3.put
        params:
          local_file: src/libdeps.graphml.gz
          remote_file: "${project}/${build_variant}/${revision}/artifacts/libdeps.graphml.${build_id}-${task_name}.${execution}.gz"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: mciuploads
          permissions: public-read
          content_type: "${content_type|application/gzip}"
          display_name: Libdeps Graph Data
  - name: compile_all
    commands:
      - func: scons compile
        vars:
          compiling_for_test: true
          targets: install-all-meta
          task_compile_flags: "--separate-debug"
    depends_on:
      - name: compile_dist_test
  - name: clang_tidy
    commands:
      - func: scons compile
        vars:
          targets: generated-sources compiledb
          compiling_for_test: true
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - "./src/evergreen/run_clang_tidy.sh"
        type: test
    exec_timeout_secs: 3600
  - name: compile_unittests
    commands:
      - func: scons compile
        vars:
          compiling_for_test: true
          targets: install-unittests install-unittests-debug
          task_compile_flags: "--separate-debug"
    depends_on:
      - name: compile_dist_test
  - name: run_unittests
    commands:
      - func: run diskstats
      - func: monitor process threads
      - func: collect system resource info
      - func: run tests
        vars:
          resmoke_args: "--suites=unittests"
    depends_on:
      - name: compile_unittests
  - name: compile_and_archive_libfuzzertests
    commands:
      - func: scons compile
        vars:
          compiling_for_test: true
          targets: archive-fuzzertests
      - command: s3.put
        params:
          local_file: src/fuzzertests-runtime.tgz
          remote_file: "${project}/libfuzzer-tests/${build_variant}/${revision}/libfuzzer-tests.tgz"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: mciuploads
          permissions: private
          content_type: application/tar
          display_name: LibFuzzer Tests
          visibility: signed
  - name: fetch_and_run_libfuzzertests
    commands:
      - func: fetch corpus
      - func: fetch legacy corpus
      - func: run tests
        vars:
          resmoke_args: "--suites=libfuzzer"
  - name: server_discovery_and_monitoring_json_test
    commands:
      - func: scons compile
        vars:
          compiling_for_test: true
          targets: install-sdam-json-test
      - func: run tests
        vars:
          resmoke_args: "--suites=sdam_json_test"
  - name: server_selection_json_test
    commands:
      - func: scons compile
        vars:
          targets: install-server-selection-json-test
          compiling_for_test: true
      - func: run tests
        vars:
          resmoke_args: "--suites=server_selection_json_test"
  - name: compile_dbtest
    commands:
      - func: scons compile
        vars:
          compiling_for_test: true
          task_compile_flags: "--separate-debug"
          targets: install-dbtest install-dbtest-debug
    depends_on:
      - name: compile_dist_test
  - name: run_dbtest
    commands:
      - func: run diskstats
      - func: monitor process threads
      - func: collect system resource info
      - func: run tests
        vars:
          install_dir: build/install/bin
          resmoke_args: "--suites=dbtest --storageEngine=wiredTiger"
    depends_on:
      - name: compile_dbtest
  - name: archive_dbtest
    commands:
      - func: scons compile
        vars:
          compiling_for_test: true
          targets: archive-dbtest archive-dbtest-debug
          task_compile_flags: "--separate-debug"
    depends_on:
      - name: compile_dbtest
  - name: compile_visibility_test
    commands:
      - func: scons compile
        vars:
          task_compile_flags: "--ssl --dbg=on --opt=on --separate-debug --link-model=dynamic --experimental-visibility-support=on"
          targets: archive-visibility-test-meta
      - command: s3.put
        params:
          local_file: "src/visibility-test-meta.${ext|tgz}"
          remote_file: "${project}/${build_variant}/${revision}/visibility-test-meta-${build_id}-${task_name}-${execution}.${ext|tgz}"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: mciuploads
          permissions: public-read
          content_type: "${content_type|application/gzip}"
          display_name: Binaries
          optional: true
  - name: embedded_sdk_build_cdriver
    commands:
      - command: expansions.write
        params:
          file: expansions.yml
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - src/evergreen/embedded_sdk_build_cdriver.sh
          env:
            workdir: "${workdir}"
            python: "${python}"
  - name: embedded_sdk_install_dev
    commands:
      - func: scons compile
        vars:
          task_compile_flags_extra: "--link-model=dynamic-sdk"
          targets: install-embedded-dev
          task_compile_flags: "--allocator=system --dbg=off --enable-free-mon=off --enable-http-client=off --js-engine=none --opt=size --separate-debug --ssl=off --use-system-mongo-c=on DESTDIR='$BUILD_ROOT/mongo-embedded-sdk-$MONGO_VERSION' CPPPATH='$BUILD_ROOT/mongo-embedded-sdk-$MONGO_VERSION/include/libbson-1.0 $BUILD_ROOT/mongo-embedded-sdk-$MONGO_VERSION/include/libmongoc-1.0'"
  - name: embedded_sdk_s3_put
    commands:
      - command: expansions.write
        params:
          file: expansions.yml
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - src/evergreen/embedded_sdk_s3_tar.sh
          env:
            python: "${python}"
            workdir: "${workdir}"
      - command: s3.put
        params:
          local_file: src/build/embedded-sdk.tgz
          remote_file: "${project}/embedded-sdk/${build_variant}/${revision}/mongo-embedded-sdk-${version}.tgz"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: mciuploads
          permissions: public-read
          content_type: application/tar
          display_name: Embedded SDK Tar Archive
          optional: true
  - name: embedded_sdk_install_tests
    commands:
      - func: scons compile
        vars:
          compiling_for_test: true
          task_compile_flags: "--allocator=system --dbg=off --enable-free-mon=off --enable-http-client=off --js-engine=none --opt=size --separate-debug --ssl=off --use-system-mongo-c=on DESTDIR='$BUILD_ROOT/mongo-embedded-sdk-$MONGO_VERSION' CPPPATH='$BUILD_ROOT/mongo-embedded-sdk-$MONGO_VERSION/include/libbson-1.0 $BUILD_ROOT/mongo-embedded-sdk-$MONGO_VERSION/include/libmongoc-1.0'"
          task_compile_flags_extra: "--link-model=dynamic"
          num_scons_link_jobs_available: 0.99
          targets: install-embedded-test
  - name: embedded_sdk_tests_s3_put
    commands:
      - command: expansions.write
        params:
          file: expansions.yml
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - src/evergreen/embedded_sdk_tests_s3_tar.sh
          env:
            python: "${python}"
            workdir: "${workdir}"
        type: test
      - command: s3.put
        params:
          local_file: src/build/embedded-sdk-tests.tgz
          remote_file: "${project}/embedded-sdk-test/${build_variant}/${revision}/mongo-embedded-sdk-test-${version}.tgz"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: mciuploads
          permissions: public-read
          content_type: application/tar
          display_name: Embedded SDK Tests Tar Archive
          optional: true
  - name: embedded_sdk_run_tests
    commands:
      - command: expansions.write
        params:
          file: expansions.yml
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - src/evergreen/embedded_sdk_run_tests.sh
          env:
            workdir: "${workdir}"
            python: "${python}"
        type: test
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - src/evergreen/embedded_sdk_run_tests_post.sh
          env:
            python: "${python}"
            workdir: "${workdir}"
  - name: embedded_sdk_s3_put_latest
    commands:
      - command: s3.put
        params:
          local_file: src/build/embedded-sdk.tgz
          remote_file: "${project}/embedded-sdk/mongo-${build_variant}-latest.tgz"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: mciuploads
          permissions: public-read
          content_type: "${content_type|application/x-gzip}"
          optional: true
          visibility: none
  - name: embedded_sdk_tests_s3_put_latest
    commands:
      - command: s3.put
        params:
          local_file: src/build/embedded-sdk-tests.tgz
          remote_file: "${project}/embedded-sdk-test/mongo-${build_variant}-latest.tgz"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: mciuploads
          permissions: public-read
          content_type: "${content_type|application/x-gzip}"
          optional: true
          visibility: none
  - name: stitch_support_create_lib
    commands:
      - func: scons compile
        vars:
          task_compile_flags: "--dbg=off --link-model=dynamic-sdk --enable-free-mon=off --ssl=off --enable-http-client=off --modules= --separate-debug DESTDIR='$BUILD_ROOT/stitch-support-lib-$MONGO_VERSION'"
          targets: install-stitch-support install-stitch-support-debug install-stitch-support-dev
      - command: expansions.write
        params:
          file: expansions.yml
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - src/evergreen/stitch_support_create_lib_tar.sh
          env:
            python: "${python}"
            workdir: "${workdir}"
      - command: s3.put
        params:
          local_file: src/build/stitch-support.tgz
          remote_file: "${project}/stitch-support/${build_variant}/${revision}/stitch-support-${version}.tgz"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: mciuploads
          permissions: public-read
          content_type: application/tar
          display_name: Stitch Support Library
  - name: stitch_support_install_tests
    commands:
      - func: scons compile
        vars:
          compiling_for_test: true
          targets: install-stitch-support-test
          task_compile_flags: "--dbg=off --enable-free-mon=off --ssl=off --enable-http-client=off --modules= --separate-debug DESTDIR='$BUILD_ROOT/stitch-support-lib-$MONGO_VERSION'"
  - name: stitch_support_run_tests
    commands:
      - command: expansions.write
        params:
          file: expansions.yml
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - src/evergreen/stitch_support_run_tests.sh
          env:
            workdir: "${workdir}"
            python: "${python}"
        type: test
  - name: compile_benchmarks
    commands:
      - func: set task expansion macros
      - func: set up venv
      - func: upload pip requirements
      - func: get buildnumber
      - func: set up credentials
      - func: use WiredTiger develop
      - func: set up win mount script
      - func: generate compile expansions
      - func: apply compile expansions
      - func: scons compile
        vars:
          compiling_for_test: true
          targets: install-benchmarks
      - func: attach scons logs
      - command: archive.targz_pack
        params:
          target: benchmarks.tgz
          source_dir: src
          include:
            - "./build/benchmarks.txt"
            - "./build/**_bm"
            - "./build/**_bm.gcno"
            - "./build/**_bm.exe"
            - "./build/**_bm.pdb"
      - command: s3.put
        params:
          local_file: benchmarks.tgz
          remote_file: "${project}/${build_variant}/${revision}/benchmarks/${build_id}.tgz"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: mciuploads
          permissions: public-read
          content_type: application/tar
          display_name: Benchmarks
    depends_on: []
  - name: lint_pylinters
    commands:
      - command: timeout.update
        params:
          exec_timeout_secs: 2400
      - func: set task expansion macros
      - func: set up venv
      - func: upload pip requirements
      - func: scons lint
        vars:
          targets: lint-pylinters
  - name: lint_clang_format
    commands:
      - command: timeout.update
        params:
          exec_timeout_secs: 2400
      - func: set task expansion macros
      - func: set up venv
      - func: upload pip requirements
      - func: scons lint
        vars:
          targets: lint-clang-format
  - name: lint_eslint
    commands:
      - command: timeout.update
        params:
          exec_timeout_secs: 2400
      - func: set task expansion macros
      - func: set up venv
      - func: upload pip requirements
      - func: scons lint
        vars:
          targets: lint-eslint
  - name: lint_cpplint
    commands:
      - command: timeout.update
        params:
          exec_timeout_secs: 2400
      - func: set task expansion macros
      - func: set up venv
      - func: upload pip requirements
      - func: scons lint
        vars:
          targets: lint-lint.py
  - name: lint_yaml
    commands:
      - func: set task expansion macros
      - func: set up venv
      - func: upload pip requirements
      - command: expansions.write
        params:
          file: expansions.yml
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - src/evergreen/lint_yaml.sh
          env:
            python: "${python}"
            workdir: "${workdir}"
        type: test
    depends_on: []
  - name: lint_errorcodes
    commands:
      - func: set task expansion macros
      - func: set up venv
      - func: upload pip requirements
      - func: scons lint
        vars:
          targets: lint-errorcodes
  - name: test_api_version_compatibility
    commands:
      - func: set task expansion macros
      - func: set up venv
      - func: upload pip requirements
      - func: do setup
      - command: expansions.write
        params:
          file: expansions.yml
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - src/evergreen/check_idl_compat.sh
          env:
            python: "${python}"
            workdir: "${workdir}"
        type: test
    depends_on:
      - name: archive_dist_test_debug
  - name: burn_in_tests_gen
    commands:
      - func: set task expansion macros
      - func: burn_in_burn_in_tests
  - name: burn_in_tests_multiversion_gen
    commands:
      - func: set task expansion macros
      - func: burn_in_burn_in_multiversion_tests
  - name: benchmarks_orphaned
    commands:
      - func: do benchmark setup
      - func: run tests
        vars:
          resmoke_args: "--suites=benchmarks"
          resmoke_jobs_max: 1
      - func: send benchmark results
    depends_on:
      - name: compile_benchmarks
    tags:
      - benchmarks
  - name: benchmarks_sharding
    commands:
      - func: do benchmark setup
      - func: run tests
        vars:
          resmoke_args: "--suites=benchmarks_sharding"
          resmoke_jobs_max: 1
      - func: send benchmark results
    depends_on:
      - name: compile_benchmarks
    tags:
      - benchmarks
  - name: benchmarks_cst
    commands:
      - func: do benchmark setup
      - func: run tests
        vars:
          resmoke_args: "--suites=benchmarks_cst"
          resmoke_jobs_max: 1
      - func: send benchmark results
    depends_on:
      - name: compile_benchmarks
    tags:
      - benchmarks
  - name: jepsen_register_findAndModify
    commands:
      - func: do setup
      - func: do jepsen setup
      - func: run jepsen test
        vars:
          jepsen_protocol_version: "--protocol-version 1"
          jepsen_read_concern: ""
          jepsen_time_limit: "--time-limit 1200"
          jepsen_write_concern: ""
          jepsen_test_name: register
          jepsen_key_time_limit: "--key-time-limit 15"
          jepsen_read_with_find_and_modify: "--read-with-find-and-modify"
          jepsen_storage_engine: "--storage-engine wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - jepsen
  - name: jepsen_register_linearizableRead
    commands:
      - func: do setup
      - func: do jepsen setup
      - func: run jepsen test
        vars:
          jepsen_test_name: register
          jepsen_key_time_limit: "--key-time-limit 15"
          jepsen_protocol_version: "--protocol-version 1"
          jepsen_read_with_find_and_modify: ""
          jepsen_storage_engine: "--storage-engine wiredTiger"
          jepsen_write_concern: ""
          jepsen_read_concern: "--read-concern linearizable"
          jepsen_time_limit: "--time-limit 1200"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - jepsen
  - name: jepsen_set_linearizableRead
    commands:
      - func: do setup
      - func: do jepsen setup
      - func: run jepsen test
        vars:
          jepsen_write_concern: ""
          jepsen_protocol_version: "--protocol-version 1"
          jepsen_test_name: set
          jepsen_time_limit: "--time-limit 1200"
          jepsen_storage_engine: "--storage-engine wiredTiger"
          jepsen_read_concern: "--read-concern linearizable"
          jepsen_read_with_find_and_modify: ""
          jepsen_key_time_limit: "--key-time-limit 15"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - jepsen
  - name: jepsen_read-concern-majority
    commands:
      - func: do setup
      - func: do jepsen setup
      - func: run jepsen test
        vars:
          jepsen_time_limit: "--time-limit 1200"
          jepsen_key_time_limit: "--key-time-limit 15"
          jepsen_test_name: read-concern-majority
          jepsen_protocol_version: "--protocol-version 1"
          jepsen_read_concern: ""
          jepsen_read_with_find_and_modify: ""
          jepsen_storage_engine: "--storage-engine wiredTiger"
          jepsen_write_concern: ""
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - jepsen
  - name: jepsen-smoke
    commands:
      - func: do setup
      - func: do jepsen setup
      - func: run jepsen test
        vars:
          jepsen_read_concern: ""
          jepsen_test_name: read-concern-majority
          jepsen_key_time_limit: "--key-time-limit 15"
          jepsen_time_limit: "--time-limit 120"
          jepsen_read_with_find_and_modify: ""
          jepsen_protocol_version: "--protocol-version 1"
          jepsen_write_concern: ""
          jepsen_storage_engine: "--storage-engine wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
  - name: jepsen_read-concern-majority_w1
    commands:
      - func: do setup
      - func: do jepsen setup
      - func: run jepsen test
        vars:
          jepsen_write_concern: "--write-concern w1"
          jepsen_protocol_version: "--protocol-version 1"
          jepsen_read_with_find_and_modify: ""
          jepsen_time_limit: "--time-limit 1200"
          jepsen_read_concern: ""
          jepsen_test_name: read-concern-majority
          jepsen_key_time_limit: "--key-time-limit 15"
          jepsen_storage_engine: "--storage-engine wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - jepsen
  - name: initial_sync_multiversion_fuzzer_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          npm_command: initsync-fuzzer
          task_path_suffix: /data/multiversion
          num_files: 10
          resmoke_jobs_max: 1
          should_shuffle: false
          continue_on_failure: false
          resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
          name: initial_sync_multiversion_fuzzer
          suite: initial_sync_multiversion_fuzzer
          num_tasks: 5
          timeout_secs: 1800
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - multiversion_fuzzer
  - name: initial_sync_fuzzer_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          suite: initial_sync_fuzzer
          name: initial_sync_fuzzer
          num_tasks: 5
          npm_command: initsync-fuzzer
          resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
          resmoke_jobs_max: 1
          continue_on_failure: false
          should_shuffle: false
          num_files: 10
          timeout_secs: 1800
    depends_on: []
    exec_timeout_secs: 14400
  - name: aggregation_multiversion_fuzzer_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          continue_on_failure: false
          suite: generational_fuzzer
          num_tasks: 5
          timeout_secs: 1800
          name: aggregation_multiversion_fuzzer
          resmoke_jobs_max: 1
          resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
          num_files: 5
          npm_command: agg-fuzzer
          task_path_suffix: /data/multiversion
          should_shuffle: false
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - aggfuzzer
      - common
      - multiversion
  - name: aggregation_expression_multiversion_fuzzer_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
          task_path_suffix: /data/multiversion
          timeout_secs: 1800
          should_shuffle: false
          resmoke_jobs_max: 1
          npm_command: agg-expr-fuzzer
          num_files: 5
          continue_on_failure: false
          name: aggregation_expression_multiversion_fuzzer
          num_tasks: 5
          suite: generational_fuzzer
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - aggfuzzer
      - multiversion
  - name: aggregation_expression_optimization_fuzzer_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          npm_command: agg-expr-fuzzer
          suite: generational_fuzzer
          num_tasks: 5
          resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
          name: aggregation_expression_optimization_fuzzer
          resmoke_jobs_max: 1
          timeout_secs: 1800
          jstestfuzz_vars: "--diffTestingMode optimization"
          num_files: 5
          should_shuffle: false
          continue_on_failure: false
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - aggfuzzer
  - name: aggregation_optimization_fuzzer_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          continue_on_failure: false
          resmoke_jobs_max: 1
          npm_command: agg-fuzzer
          suite: generational_fuzzer
          timeout_secs: 1800
          num_tasks: 5
          should_shuffle: false
          resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
          jstestfuzz_vars: "--diffTestingMode optimization"
          name: aggregation_optimization_fuzzer
          num_files: 5
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - aggfuzzer
  - name: aggregation_wildcard_fuzzer_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          jstestfuzz_vars: "--diffTestingMode wildcard"
          resmoke_jobs_max: 1
          num_files: 5
          should_shuffle: false
          resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
          name: aggregation_wildcard_fuzzer
          suite: generational_fuzzer
          continue_on_failure: false
          npm_command: agg-fuzzer
          timeout_secs: 1800
          num_tasks: 5
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - aggfuzzer
      - common
      - wildcard
  - name: query_fuzzer_standalone_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
          suite: generational_fuzzer
          num_files: 5
          name: query_fuzzer_standalone
          num_tasks: 5
          jstestfuzz_vars: "--diffTestingMode standalone"
          resmoke_jobs_max: 1
          should_shuffle: false
          continue_on_failure: false
          npm_command: query-fuzzer
          timeout_secs: 1800
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - query_fuzzer
  - name: query_fuzzer_sharded_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          should_shuffle: false
          continue_on_failure: false
          name: query_fuzzer_sharded
          suite: generational_fuzzer
          jstestfuzz_vars: "--diffTestingMode sharded"
          npm_command: query-fuzzer
          resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
          num_files: 5
          num_tasks: 5
          timeout_secs: 1800
          resmoke_jobs_max: 1
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - query_fuzzer
  - name: update_fuzzer_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          num_tasks: 5
          continue_on_failure: false
          name: update_fuzzer
          timeout_secs: 1800
          num_files: 5
          suite: generational_fuzzer
          task_path_suffix: /data/multiversion
          npm_command: update-fuzzer
          resmoke_jobs_max: 1
          should_shuffle: false
          resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - updatefuzzer
  - name: update_fuzzer_replication_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          should_shuffle: false
          suite: generational_fuzzer_replication
          num_tasks: 5
          timeout_secs: 1800
          name: update_fuzzer_replication
          resmoke_jobs_max: 1
          task_path_suffix: /data/multiversion
          resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
          npm_command: update-fuzzer
          num_files: 5
          continue_on_failure: false
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - updatefuzzer
  - name: rollback_multiversion_fuzzer_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          continue_on_failure: false
          num_files: 3
          npm_command: rollback-fuzzer
          name: rollback_multiversion_fuzzer
          num_tasks: 5
          task_path_suffix: /data/multiversion
          timeout_secs: 1800
          resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}, enableIndexBuildCommitQuorum: false}'"
          suite: rollback_multiversion_fuzzer
          resmoke_jobs_max: 1
          should_shuffle: false
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - multiversion_fuzzer
  - name: rollback_fuzzer_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          timeout_secs: 1800
          resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}, enableIndexBuildCommitQuorum: false}'"
          num_tasks: 5
          npm_command: rollback-fuzzer
          continue_on_failure: false
          suite: rollback_fuzzer
          num_files: 3
          name: rollback_fuzzer
          resmoke_jobs_max: 1
          should_shuffle: false
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - rollbackfuzzer
  - name: rollback_fuzzer_clean_shutdowns_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}, enableIndexBuildCommitQuorum: false}'"
          jstestfuzz_vars: "--numLinesPerFile 300 --maxLinesBetweenEvents 50"
          num_files: 1
          num_tasks: 4
          npm_command: rollback-fuzzer
          suite: rollback_fuzzer_clean_shutdowns
          resmoke_jobs_max: 1
          should_shuffle: false
          name: rollback_fuzzer_clean_shutdowns
          continue_on_failure: false
          timeout_secs: 1800
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - rollbackfuzzer
  - name: rollback_fuzzer_unclean_shutdowns_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          name: rollback_fuzzer_unclean_shutdowns
          timeout_secs: 1800
          resmoke_jobs_max: 1
          num_files: 1
          npm_command: rollback-fuzzer
          suite: rollback_fuzzer_unclean_shutdowns
          jstestfuzz_vars: "--numLinesPerFile 300 --maxLinesBetweenEvents 50"
          should_shuffle: false
          resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}, enableIndexBuildCommitQuorum: false}'"
          continue_on_failure: false
          num_tasks: 4
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - rollbackfuzzer
  - name: jstestfuzz_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
          should_shuffle: false
          num_files: 15
          timeout_secs: 1800
          npm_command: jstestfuzz
          name: jstestfuzz
          resmoke_jobs_max: 1
          continue_on_failure: false
          suite: jstestfuzz
          jstestfuzz_vars: "--jsTestsDir ../jstests"
          num_tasks: 5
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - jstestfuzz
      - common
  - name: jstestfuzz_concurrent_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          jstestfuzz_vars: "--jsTestsDir ../jstests"
          resmoke_args: "--storageEngine=wiredTiger --numClientsPerFixture=10"
          num_tasks: 5
          num_files: "${jstestfuzz_concurrent_num_files|10}"
          suite: jstestfuzz
          name: jstestfuzz_concurrent
          should_shuffle: false
          continue_on_failure: false
          resmoke_jobs_max: 1
          timeout_secs: 1800
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - jstestfuzz
      - common
  - name: jstestfuzz_concurrent_replication_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          name: jstestfuzz_concurrent_replication
          num_tasks: 5
          resmoke_jobs_max: 1
          continue_on_failure: false
          timeout_secs: 1800
          should_shuffle: false
          num_files: "${jstestfuzz_concurrent_num_files|10}"
          jstestfuzz_vars: "--jsTestsDir ../jstests"
          resmoke_args: "--storageEngine=wiredTiger --numClientsPerFixture=10"
          suite: jstestfuzz_replication
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - jstestfuzz
      - common
      - repl
  - name: jstestfuzz_concurrent_replication_session_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          suite: jstestfuzz_replication_session
          continue_on_failure: false
          num_files: "${jstestfuzz_concurrent_num_files|10}"
          resmoke_jobs_max: 1
          should_shuffle: false
          timeout_secs: 1800
          num_tasks: 5
          jstestfuzz_vars: "--jsTestsDir ../jstests"
          name: jstestfuzz_concurrent_replication_session
          resmoke_args: "--storageEngine=wiredTiger --numClientsPerFixture=10"
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - jstestfuzz
      - session
  - name: jstestfuzz_concurrent_sharded_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger --numClientsPerFixture=10"
          num_files: "${jstestfuzz_concurrent_num_files|10}"
          resmoke_jobs_max: 1
          should_shuffle: false
          num_tasks: 5
          jstestfuzz_vars: "--jsTestsDir ../jstests"
          continue_on_failure: false
          suite: jstestfuzz_sharded
          timeout_secs: 1800
          name: jstestfuzz_concurrent_sharded
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - jstestfuzz
      - common
      - sharding
  - name: jstestfuzz_concurrent_sharded_causal_consistency_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          jstestfuzz_vars: "--jsTestsDir ../jstests"
          num_tasks: 5
          num_files: "${jstestfuzz_concurrent_num_files|10}"
          suite: jstestfuzz_sharded_causal_consistency
          resmoke_args: "--storageEngine=wiredTiger --numClientsPerFixture=10"
          name: jstestfuzz_concurrent_sharded_causal_consistency
          resmoke_jobs_max: 1
          should_shuffle: false
          continue_on_failure: false
          timeout_secs: 1800
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - jstestfuzz
      - causal
  - name: jstestfuzz_concurrent_sharded_continuous_stepdown_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          num_tasks: 2
          resmoke_jobs_max: 1
          suite: jstestfuzz_sharded_continuous_stepdown
          timeout_secs: 1800
          resmoke_args: "--storageEngine=wiredTiger --numClientsPerFixture=10"
          should_shuffle: false
          num_files: "${jstestfuzz_concurrent_num_files|10}"
          continue_on_failure: false
          jstestfuzz_vars: "--jsTestsDir ../jstests"
          name: jstestfuzz_concurrent_sharded_continuous_stepdown
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - jstestfuzz
      - stepdowns
  - name: jstestfuzz_concurrent_sharded_session_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          timeout_secs: 1800
          resmoke_args: "--storageEngine=wiredTiger --numClientsPerFixture=10"
          should_shuffle: false
          resmoke_jobs_max: 1
          name: jstestfuzz_concurrent_sharded_session
          jstestfuzz_vars: "--jsTestsDir ../jstests"
          num_files: "${jstestfuzz_concurrent_num_files|10}"
          num_tasks: 5
          suite: jstestfuzz_sharded_session
          continue_on_failure: false
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - jstestfuzz
      - session
  - name: jstestfuzz_interrupt_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          name: jstestfuzz_interrupt
          should_shuffle: false
          resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
          jstestfuzz_vars: "--jsTestsDir ../jstests"
          timeout_secs: 1800
          suite: jstestfuzz_interrupt
          continue_on_failure: false
          resmoke_jobs_max: 1
          num_files: 15
          num_tasks: 5
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - jstestfuzz
      - interrupt
  - name: jstestfuzz_interrupt_replication_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          num_tasks: 5
          num_files: 15
          resmoke_jobs_max: 1
          should_shuffle: false
          timeout_secs: 1800
          continue_on_failure: false
          jstestfuzz_vars: "--jsTestsDir ../jstests"
          name: jstestfuzz_interrupt_replication
          suite: jstestfuzz_interrupt_replication
          resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - jstestfuzz
      - interrupt
  - name: jstestfuzz_replication_write_conflicts_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          continue_on_failure: false
          resmoke_jobs_max: 1
          name: jstestfuzz_replication_write_conflicts
          num_tasks: 5
          resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
          timeout_secs: 1800
          should_shuffle: false
          suite: jstestfuzz_replication_write_conflicts
          jstestfuzz_vars: "--jsTestsDir ../jstests"
          num_files: 15
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - jstestfuzz
      - write_conflict
  - name: jstestfuzz_concurrent_replication_write_conflicts_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          timeout_secs: 1800
          num_files: 15
          continue_on_failure: false
          resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}' --numClientsPerFixture=10"
          name: jstestfuzz_concurrent_replication_write_conflicts
          resmoke_jobs_max: 1
          jstestfuzz_vars: "--jsTestsDir ../jstests"
          suite: jstestfuzz_replication_write_conflicts
          num_tasks: 5
          should_shuffle: false
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - jstestfuzz
      - write_conflict
  - name: jstestfuzz_interrupt_replication_flow_control_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          resmoke_args: "--flowControlTicketOverride=1 --storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
          timeout_secs: 1800
          continue_on_failure: false
          resmoke_jobs_max: 1
          num_files: 2
          should_shuffle: false
          jstestfuzz_vars: "--jsTestsDir ../jstests"
          name: jstestfuzz_interrupt_replication_flow_control
          suite: jstestfuzz_interrupt_replication
          num_tasks: 1
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - jstestfuzz
      - interrupt
      - flow_control
  - name: jstestfuzz_sharded_continuous_stepdown_flow_control_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          continue_on_failure: false
          should_shuffle: false
          timeout_secs: 1800
          suite: jstestfuzz_sharded_continuous_stepdown
          num_files: 2
          name: jstestfuzz_sharded_continuous_stepdown_flow_control
          num_tasks: 1
          jstestfuzz_vars: "--jsTestsDir ../jstests"
          resmoke_args: "--flowControlTicketOverride=3 --storageEngine=wiredTiger --mongodSetParameters=\"{logComponentVerbosity: {command: 2}}\""
          resmoke_jobs_max: 1
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - jstestfuzz
      - flow_control
      - stepdowns
  - name: jstestfuzz_concurrent_sharded_continuous_stepdown_flow_control_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          resmoke_jobs_max: 1
          num_tasks: 1
          should_shuffle: false
          num_files: 2
          suite: jstestfuzz_sharded_continuous_stepdown
          timeout_secs: 1800
          continue_on_failure: false
          jstestfuzz_vars: "--jsTestsDir ../jstests"
          name: jstestfuzz_concurrent_sharded_continuous_stepdown_flow_control
          resmoke_args: "--flowControlTicketOverride=30 --storageEngine=wiredTiger --numClientsPerFixture=10"
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - jstestfuzz
      - flow_control
      - stepdowns
  - name: jstestfuzz_replication_continuous_stepdown_flow_control_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          should_shuffle: false
          resmoke_args: "--flowControlTicketOverride=1 --storageEngine=wiredTiger --mongodSetParameters=\"{logComponentVerbosity: {command: 2}}\""
          name: jstestfuzz_replication_continuous_stepdown_flow_control
          resmoke_jobs_max: 1
          jstestfuzz_vars: "--jsTestsDir ../jstests"
          continue_on_failure: false
          num_tasks: 1
          timeout_secs: 1800
          suite: jstestfuzz_replication_continuous_stepdown
          num_files: 2
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - jstestfuzz
      - repl
      - flow_control
      - stepdowns
  - name: jstestfuzz_concurrent_replication_continuous_stepdown_flow_control_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          resmoke_jobs_max: 1
          suite: jstestfuzz_replication_continuous_stepdown
          num_tasks: 1
          should_shuffle: false
          num_files: 2
          resmoke_args: "--flowControlTicketOverride=10 --storageEngine=wiredTiger --numClientsPerFixture=10"
          name: jstestfuzz_concurrent_replication_continuous_stepdown_flow_control
          jstestfuzz_vars: "--jsTestsDir ../jstests"
          continue_on_failure: false
          timeout_secs: 1800
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - jstestfuzz
      - repl
      - flow_control
      - stepdowns
  - name: jstestfuzz_replication_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          jstestfuzz_vars: "--jsTestsDir ../jstests"
          suite: jstestfuzz_replication
          resmoke_jobs_max: 1
          name: jstestfuzz_replication
          should_shuffle: false
          timeout_secs: 1800
          num_tasks: 5
          num_files: 15
          resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
          continue_on_failure: false
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - jstestfuzz
      - common
      - repl
  - name: jstestfuzz_replication_multiversion_gen
    commands:
      - func: generate implicit multiversion tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
          resmoke_jobs_max: 1
          continue_on_failure: false
          use_multiversion: /data/multiversion
          timeout_secs: 1800
          jstestfuzz_vars: "--jsTestsDir ../jstests"
          suite: jstestfuzz_replication
          should_shuffle: false
          num_files: 15
          task_path_suffix: /data/multiversion
          num_tasks: 5
          is_jstestfuzz: true
          npm_command: jstestfuzz
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - jstestfuzz_multiversion_gen
  - name: jstestfuzz_replication_initsync_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          suite: jstestfuzz_replication_initsync
          num_tasks: 5
          name: jstestfuzz_replication_initsync
          resmoke_jobs_max: 1
          timeout_secs: 1800
          jstestfuzz_vars: "--jsTestsDir ../jstests"
          num_files: 8
          resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
          should_shuffle: false
          continue_on_failure: false
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - jstestfuzz
      - initsync
  - name: jstestfuzz_replication_session_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          jstestfuzz_vars: "--jsTestsDir ../jstests"
          should_shuffle: false
          resmoke_jobs_max: 1
          num_tasks: 5
          suite: jstestfuzz_replication_session
          resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
          name: jstestfuzz_replication_session
          num_files: 15
          timeout_secs: 1800
          continue_on_failure: false
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - jstestfuzz
      - session
  - name: jstestfuzz_sharded_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          jstestfuzz_vars: "--jsTestsDir ../jstests"
          continue_on_failure: false
          name: jstestfuzz_sharded
          suite: jstestfuzz_sharded
          resmoke_jobs_max: 1
          num_files: 15
          resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
          should_shuffle: false
          num_tasks: 5
          timeout_secs: 1800
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - jstestfuzz
      - common
      - sharding
  - name: jstestfuzz_sharded_multiversion_gen
    commands:
      - func: generate implicit multiversion tasks
        vars:
          use_multiversion: /data/multiversion
          continue_on_failure: false
          resmoke_jobs_max: 1
          npm_command: jstestfuzz
          jstestfuzz_vars: "--jsTestsDir ../jstests"
          is_jstestfuzz: true
          task_path_suffix: /data/multiversion
          num_tasks: 5
          resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
          num_files: 15
          should_shuffle: false
          timeout_secs: 1800
          suite: jstestfuzz_sharded
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - jstestfuzz_multiversion_gen
  - name: jstestfuzz_sharded_causal_consistency_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          num_tasks: 5
          suite: jstestfuzz_sharded_causal_consistency
          resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
          timeout_secs: 1800
          should_shuffle: false
          continue_on_failure: false
          name: jstestfuzz_sharded_causal_consistency
          resmoke_jobs_max: 1
          jstestfuzz_vars: "--jsTestsDir ../jstests"
          num_files: 15
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - jstestfuzz
      - causal
  - name: jstestfuzz_sharded_continuous_stepdown_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
          name: jstestfuzz_sharded_continuous_stepdown
          continue_on_failure: false
          timeout_secs: 1800
          resmoke_jobs_max: 1
          should_shuffle: false
          suite: jstestfuzz_sharded_continuous_stepdown
          jstestfuzz_vars: "--jsTestsDir ../jstests"
          num_files: 5
          num_tasks: 5
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - jstestfuzz
      - stepdowns
  - name: jstestfuzz_sharded_session_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          continue_on_failure: false
          resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
          num_files: 15
          timeout_secs: 1800
          resmoke_jobs_max: 1
          num_tasks: 5
          name: jstestfuzz_sharded_session
          should_shuffle: false
          jstestfuzz_vars: "--jsTestsDir ../jstests"
          suite: jstestfuzz_sharded_session
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - jstestfuzz
      - session
  - name: resharding_fuzzer_inplace_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          num_files: 10
          continue_on_failure: false
          suite: resharding_fuzzer
          jstestfuzz_vars: "--numDonors 2 --numRecipients 2 --inPlace yes"
          name: resharding_fuzzer_inplace
          resmoke_jobs_max: 1
          should_shuffle: false
          timeout_secs: 1800
          resmoke_args: "--storageEngine=wiredTiger"
          num_tasks: 5
          npm_command: resharding-fuzzer
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - resharding_fuzzer
  - name: resharding_fuzzer_split_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          suite: resharding_fuzzer
          jstestfuzz_vars: "--numDonors 1 --numRecipients 2 --inPlace no"
          timeout_secs: 1800
          num_tasks: 5
          continue_on_failure: false
          name: resharding_fuzzer_split
          num_files: 10
          resmoke_jobs_max: 1
          resmoke_args: "--storageEngine=wiredTiger"
          npm_command: resharding-fuzzer
          should_shuffle: false
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - resharding_fuzzer
  - name: resharding_fuzzer_merge_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          timeout_secs: 1800
          num_files: 10
          name: resharding_fuzzer_merge
          resmoke_args: "--storageEngine=wiredTiger"
          resmoke_jobs_max: 1
          num_tasks: 5
          npm_command: resharding-fuzzer
          continue_on_failure: false
          suite: resharding_fuzzer
          jstestfuzz_vars: "--numDonors 2 --numRecipients 1 --inPlace no"
          should_shuffle: false
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - resharding_fuzzer
  - name: resharding_fuzzer_shuffle_gen
    commands:
      - func: generate fuzzer tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          continue_on_failure: false
          timeout_secs: 1800
          suite: resharding_fuzzer
          name: resharding_fuzzer_shuffle
          jstestfuzz_vars: "--numDonors 3 --numRecipients 3 --inPlace no"
          resmoke_jobs_max: 1
          should_shuffle: false
          num_files: 10
          num_tasks: 5
          npm_command: resharding-fuzzer
    depends_on: []
    exec_timeout_secs: 14400
    tags:
      - resharding_fuzzer
  - name: multiversion_sanity_check_gen
    commands:
      - func: generate implicit multiversion tasks
        vars:
          suite: replica_sets_jscore_passthrough
          task_path_suffix: /data/multiversion
          resmoke_args: "--storageEngine=wiredTiger --includeWithAnyTags=multiversion_sanity_check"
          fallback_num_sub_suites: 1
  - name: replica_sets_jscore_multiversion_passthrough_gen
    commands:
      - func: generate implicit multiversion tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          suite: replica_sets_jscore_passthrough
          task_path_suffix: /data/multiversion
          fallback_num_sub_suites: 4
    tags:
      - multiversion_passthrough
  - name: lint_fuzzer_sanity_patch
    commands:
      - func: set task expansion macros
      - func: get added and modified patch files
      - func: setup jstestfuzz
      - func: lint fuzzer sanity patch
  - name: lint_fuzzer_sanity_all
    commands:
      - func: set task expansion macros
      - func: setup jstestfuzz
      - func: lint fuzzer sanity all
  - name: aggregation
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=aggregation --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - aggregation
      - common
  - name: aggregation_disabled_optimization
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=aggregation_disabled_optimization --storageEngine=wiredTiger"
    depends_on:
      - name: aggregation
    tags:
      - aggregation
      - common
  - name: aggregation_ese
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=aggregation_ese --storageEngine=wiredTiger"
    depends_on:
      - name: aggregation
    tags:
      - aggregation
      - encrypt
  - name: aggregation_ese_gcm
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=aggregation_ese_gcm --storageEngine=wiredTiger"
    depends_on:
      - name: aggregation
    tags:
      - aggregation
      - encrypt
      - gcm
  - name: aggregation_auth
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=aggregation_auth --storageEngine=wiredTiger"
    depends_on:
      - name: aggregation
    tags:
      - aggregation
      - auth
      - common
  - name: aggregation_facet_unwind_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=aggregation_facet_unwind_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: aggregation
    tags:
      - aggregation
      - unwind
  - name: aggregation_mongos_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=aggregation_mongos_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: aggregation
    tags:
      - aggregation
      - no_async
  - name: aggregation_one_shard_sharded_collections
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=aggregation_one_shard_sharded_collections --storageEngine=wiredTiger"
    depends_on:
      - name: aggregation
    tags:
      - aggregation
      - no_async
      - sharded
  - name: aggregation_read_concern_majority_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=aggregation_read_concern_majority_passthrough --storageEngine=wiredTiger"
          resmoke_jobs_factor: 0.5
    depends_on:
      - name: aggregation
    tags:
      - aggregation
      - read_write_concern
  - name: aggregation_secondary_reads_gen
    commands:
      - func: generate resmoke tasks
        vars:
          depends_on: aggregation
          resmoke_args: "--storageEngine=wiredTiger"
          use_large_distro: "true"
          resmoke_jobs_max: 1
          fallback_num_sub_suites: 3
    depends_on:
      - name: aggregation
    tags:
      - aggregation
      - secondary_reads
  - name: aggregation_sharded_collections_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=aggregation_sharded_collections_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: aggregation
    tags:
      - aggregation
      - common
      - sharded
  - name: aggregation_sharded_collections_causally_consistent_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=aggregation_sharded_collections_causally_consistent_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: aggregation
    tags:
      - aggregation
      - secondary_reads
      - sharded
  - name: aggregation_slot_based_execution
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=aggregation_sbe --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - aggregation
      - sbe
  - name: audit
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=audit --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
  - name: auth_gen
    commands:
      - func: generate resmoke tasks
        vars:
          fallback_num_sub_suites: 4
          resmoke_args: "--storageEngine=wiredTiger"
    tags:
      - auth
  - name: burn_in_tags_gen
    commands:
      - func: set task expansion macros
      - func: set up venv
        vars:
          pip_dir: "${workdir}/src/etc/pip"
      - func: upload pip requirements
      - func: configure evergreen api credentials
      - func: multiversion_setup
      - func: generate burn in tags
        vars:
          max_revisions: 25
          repeat_tests_min: 2
          repeat_tests_secs: 600
          repeat_tests_max: 1000
    depends_on:
      - name: archive_dist_test_debug
  - name: selected_tests_gen
    commands:
      - func: set task expansion macros
      - func: set up venv
        vars:
          pip_dir: "${workdir}/src/etc/pip"
      - func: upload pip requirements
      - func: generate selected tests
  - name: auth_audit_gen
    commands:
      - func: generate resmoke tasks
        vars:
          fallback_num_sub_suites: 4
          resmoke_args: "--storageEngine=wiredTiger"
    tags:
      - auth
      - audit
  - name: change_streams
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=change_streams --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - change_streams
  - name: change_streams_multiversion_gen
    commands:
      - func: generate implicit multiversion tasks
        vars:
          task_path_suffix: /data/multiversion
          fallback_num_sub_suites: 4
          resmoke_args: "--storageEngine=wiredTiger"
          suite: change_streams
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - multiversion_passthrough
  - name: change_streams_update_v1_oplog
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=change_streams_update_v1_oplog --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - change_streams
  - name: change_streams_mongos_sessions_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=change_streams_mongos_sessions_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: change_streams
    tags:
      - change_streams
  - name: change_streams_mongos_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=change_streams_mongos_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: change_streams
    tags:
      - change_streams
  - name: change_streams_secondary_reads
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=change_streams_secondary_reads --storageEngine=wiredTiger"
    depends_on:
      - name: change_streams
    tags:
      - change_streams
      - secondary_reads
  - name: change_streams_sharded_collections_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=change_streams_sharded_collections_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: change_streams
    tags:
      - change_streams
  - name: change_streams_sharded_collections_multiversion_passthrough_gen
    commands:
      - func: generate implicit multiversion tasks
        vars:
          suite: change_streams_sharded_collections_passthrough
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 4
          task_path_suffix: /data/multiversion
    depends_on:
      - name: change_streams_multiversion_gen
    tags:
      - multiversion_passthrough
  - name: change_streams_whole_db_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=change_streams_whole_db_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: change_streams
    tags:
      - change_streams
  - name: change_streams_whole_db_mongos_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=change_streams_whole_db_mongos_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: change_streams_mongos_passthrough
    tags:
      - change_streams
  - name: change_streams_whole_db_secondary_reads_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=change_streams_whole_db_secondary_reads_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: change_streams_secondary_reads
    tags:
      - change_streams
      - secondary_reads
  - name: change_streams_whole_db_sharded_collections_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=change_streams_whole_db_sharded_collections_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: change_streams_sharded_collections_passthrough
    tags:
      - change_streams
  - name: change_streams_whole_cluster_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=change_streams_whole_cluster_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: change_streams
    tags:
      - change_streams
  - name: change_streams_whole_cluster_mongos_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=change_streams_whole_cluster_mongos_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: change_streams_mongos_passthrough
    tags:
      - change_streams
  - name: change_streams_whole_cluster_secondary_reads_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=change_streams_whole_cluster_secondary_reads_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: change_streams_secondary_reads
    tags:
      - change_streams
      - secondary_reads
  - name: change_streams_whole_cluster_sharded_collections_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=change_streams_whole_cluster_sharded_collections_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: change_streams_sharded_collections_passthrough
    tags:
      - change_streams
  - name: change_streams_multi_stmt_txn_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=change_streams_multi_stmt_txn_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: change_streams
    tags:
      - change_streams
  - name: change_streams_multi_stmt_txn_mongos_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=change_streams_multi_stmt_txn_mongos_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: change_streams
    tags:
      - change_streams
  - name: change_streams_multi_stmt_txn_sharded_collections_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=change_streams_multi_stmt_txn_sharded_collections_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: change_streams
    tags:
      - change_streams
  - name: disk_wiredtiger
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=disk_wiredtiger --storageEngine=wiredTiger"
          resmoke_jobs_max: 1
    depends_on:
      - name: archive_dist_test_debug
  - name: ese
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=ese --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - encrypt
  - name: failpoints
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=failpoints --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - misc_js
  - name: failpoints_auth
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=failpoints_auth --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - auth
  - name: gle_auth
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=gle_auth --shellWriteMode=legacy --shellReadMode=legacy --excludeWithAnyTags=requires_find_command --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - auth
      - gle
  - name: gle_auth_write_cmd
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=gle_auth --shellWriteMode=commands --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - auth
      - gle
  - name: gle_auth_basics_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=gle_auth_basics_passthrough --shellWriteMode=legacy --shellReadMode=legacy --storageEngine=wiredTiger --excludeWithAnyTags=requires_find_command"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - auth
      - gle
  - name: gle_auth_basics_passthrough_write_cmd
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=gle_auth_basics_passthrough --shellWriteMode=commands --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - auth
      - gle
  - name: integration_tests_standalone
    commands:
      - func: do setup
      - func: set up win mount script
      - func: generate compile expansions
      - func: apply compile expansions
      - func: scons compile
        vars:
          targets: install-integration-tests
          compiling_for_test: true
      - func: attach scons logs
      - func: run tests
        vars:
          resmoke_args: "--suites=integration_tests_standalone --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - integration
      - standalone
  - name: integration_tests_standalone_audit
    commands:
      - func: do setup
      - func: set up win mount script
      - func: generate compile expansions
      - func: apply compile expansions
      - func: scons compile
        vars:
          compiling_for_test: true
          targets: install-integration-tests
      - func: attach scons logs
      - func: run tests
        vars:
          resmoke_args: "--suites=integration_tests_standalone_audit --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - integration
      - audit
  - name: integration_tests_replset
    commands:
      - func: do setup
      - func: set up win mount script
      - func: generate compile expansions
      - func: apply compile expansions
      - func: scons compile
        vars:
          targets: install-integration-tests
          compiling_for_test: true
      - func: attach scons logs
      - func: run tests
        vars:
          resmoke_args: "--suites=integration_tests_replset --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - integration
  - name: integration_tests_replset_ssl_auth
    commands:
      - func: do setup
      - func: set up win mount script
      - func: generate compile expansions
      - func: apply compile expansions
      - func: scons compile
        vars:
          compiling_for_test: true
          targets: install-integration-tests
      - func: attach scons logs
      - func: run tests
        vars:
          resmoke_args: "--suites=integration_tests_replset_ssl_auth --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - integration
  - name: integration_tests_sharded
    commands:
      - func: do setup
      - func: set up win mount script
      - func: generate compile expansions
      - func: apply compile expansions
      - func: scons compile
        vars:
          compiling_for_test: true
          targets: install-integration-tests
      - func: attach scons logs
      - func: run tests
        vars:
          resmoke_args: "--suites=integration_tests_sharded --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - integration
      - sharded
  - name: external_auth
    commands:
      - func: do setup
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - src/evergreen/external_auth_pip.sh
          env:
            python: "${python}"
            workdir: "${workdir}"
      - func: run tests
        vars:
          resmoke_args: "--suites=external_auth --excludeWithAnyTags=requires_domain_controller --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
  - name: external_auth_aws
    commands:
      - func: do setup
      - command: expansions.write
        params:
          file: expansions.yml
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - src/evergreen/external_auth_aws_setup.sh
          env:
            workdir: "${workdir}"
            python: "${python}"
          silent: true
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - src/evergreen/external_auth_aws_pip.sh
          env:
            python: "${python}"
            workdir: "${workdir}"
      - func: run tests
        vars:
          resmoke_args: "--suites=external_auth_aws --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
  - name: external_auth_windows
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=external_auth --includeWithAnyTags=requires_domain_controller --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
  - name: sharding_gle_auth_basics_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=sharding_gle_auth_basics_passthrough --shellWriteMode=legacy --shellReadMode=legacy --storageEngine=wiredTiger --excludeWithAnyTags=requires_find_command"
    depends_on:
      - name: gle_auth_basics_passthrough
    tags:
      - auth
      - gle
  - name: sharding_gle_auth_basics_passthrough_write_cmd
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=sharding_gle_auth_basics_passthrough --shellWriteMode=commands --storageEngine=wiredTiger"
    depends_on:
      - name: gle_auth_basics_passthrough_write_cmd
    tags:
      - auth
      - gle
  - name: jsCore
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=core --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - jscore
      - common
  - name: config_fuzzer_jsCore
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=core --storageEngine=wiredTiger --fuzzMongodConfigs"
    depends_on:
      - name: archive_dist_test_debug
    tags: []
  - name: config_fuzzer_concurrency
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=concurrency --storageEngine=wiredTiger --fuzzMongodConfigs"
    depends_on:
      - name: archive_dist_test_debug
    tags: []
  - name: config_fuzzer_concurrency_replication
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=concurrency_replication --storageEngine=wiredTiger --fuzzMongodConfigs"
    depends_on:
      - name: archive_dist_test_debug
    tags: []
  - name: config_fuzzer_replica_sets_jscore_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=replica_sets_jscore_passthrough --storageEngine=wiredTiger --fuzzMongodConfigs"
    depends_on:
      - name: archive_dist_test_debug
    tags: []
  - name: jsCore_ese
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=core_ese --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - jscore
      - encrypt
  - name: jsCore_ese_gcm
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=core_ese_gcm --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - jscore
      - encrypt
      - gcm
  - name: jsCore_compatibility
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=core --shellReadMode=legacy --shellWriteMode=compatibility --storageEngine=wiredTiger --excludeWithAnyTags=requires_find_command,requires_timeseries"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - jscore
      - common
      - compat
  - name: jsCore_auth
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=core_auth"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - jscore
      - auth
      - common
  - name: jsCore_minimum_batch_size
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=core_minimum_batch_size --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - jscore
  - name: jsCore_op_query
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=core_op_query --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - jscore
  - name: jsCore_txns
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=core_txns --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - jscore
      - common
      - txns
  - name: jsCore_txns_large_txns_format
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=core_txns_large_txns_format --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - jscore
      - txns
      - multi_oplog
  - name: jsCore_slot_based_execution
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=core_sbe --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - jscore
      - common
      - sbe
  - name: sharded_jscore_txns
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=sharded_jscore_txns --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - sharding
      - jscore
      - txns
  - name: sharded_jscore_op_query_txns
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=sharded_jscore_op_query_txns --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - sharding
      - jscore
      - txns
  - name: sharded_jscore_txns_without_snapshot
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=sharded_jscore_txns --storageEngine=wiredTiger --excludeWithAnyTags=uses_snapshot_read_concern"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - sharding
      - wo_snapshot
      - jscore
  - name: sharded_jscore_txns_sharded_collections
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=sharded_jscore_txns_sharded_collections --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - sharding
      - jscore
      - txns
  - name: cst_jscore_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=cst_jscore_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - jscore
  - name: libunwind_tests
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=libunwind --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags: []
  - name: causally_consistent_jscore_txns_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=causally_consistent_jscore_txns_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - causally_consistent
  - name: sharded_causally_consistent_jscore_txns_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          fallback_num_sub_suites: 1
          resmoke_args: "--storageEngine=wiredTiger"
          dependsOn: jsCore
    tags:
      - sharding
      - jscore
      - causally_consistent
      - txns
  - name: sharded_causally_consistent_jscore_txns_passthrough_without_snapshot_gen
    commands:
      - func: generate resmoke tasks
        vars:
          dependsOn: jsCore
          fallback_num_sub_suites: 1
          suite: sharded_causally_consistent_jscore_txns_passthrough
          resmoke_args: "--storageEngine=wiredTiger --excludeWithAnyTags=uses_snapshot_read_concern"
    tags:
      - sharding
      - wo_snapshot
      - causally_consistent
      - jscore
  - name: causally_consistent_hedged_reads_jscore_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          dependsOn: jsCore
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 40
    tags:
      - causally_consistent
      - sharding
      - jscore
  - name: sharded_collections_causally_consistent_jscore_txns_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=sharded_collections_causally_consistent_jscore_txns_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - sharding
      - jscore
      - causally_consistent
      - txns
  - name: replica_sets_jscore_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=replica_sets_jscore_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - replica_sets
      - common
      - san
      - large
  - name: replica_sets_reconfig_jscore_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          fallback_num_sub_suites: 5
          depends_on: jsCore
          use_large_distro: "true"
          resmoke_args: "--storageEngine=wiredTiger"
  - name: replica_sets_reconfig_jscore_stepdown_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=replica_sets_reconfig_jscore_stepdown_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
  - name: replica_sets_reconfig_kill_primary_jscore_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=replica_sets_reconfig_kill_primary_jscore_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
  - name: replica_sets_jscore_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          depends_on: jsCore
          resmoke_args: "--storageEngine=wiredTiger"
          use_large_distro: "true"
          fallback_num_sub_suites: 1
  - name: replica_sets_large_txns_format_jscore_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=replica_sets_large_txns_format_jscore_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - replica_sets
      - multi_oplog
      - large
      - non_maj_read
      - san
  - name: replica_sets_multi_stmt_txn_jscore_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=replica_sets_multi_stmt_txn_jscore_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - replica_sets
      - large
  - name: replica_sets_multi_stmt_txn_stepdown_jscore_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          fallback_num_sub_suites: 15
          resmoke_args: "--storageEngine=wiredTiger"
          use_large_distro: "true"
          depends_on: jsCore
    tags:
      - replica_sets
      - non_maj_read
  - name: replica_sets_multi_stmt_txn_kill_primary_jscore_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=replica_sets_multi_stmt_txn_kill_primary_jscore_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - replica_sets
      - non_maj_read
      - non_live_record
  - name: replica_sets_multi_stmt_txn_terminate_primary_jscore_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=replica_sets_multi_stmt_txn_terminate_primary_jscore_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - replica_sets
      - non_maj_read
  - name: replica_sets_update_v1_oplog_jscore_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=replica_sets_update_v1_oplog_jscore_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - replica_sets
      - non_maj_read
  - name: replica_sets_initsync_jscore_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=replica_sets_initsync_jscore_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - replica_sets
      - san
      - large
  - name: replica_sets_initsync_static_jscore_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=replica_sets_initsync_static_jscore_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - replica_sets
      - san
      - large
  - name: replica_sets_kill_primary_jscore_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=replica_sets_kill_primary_jscore_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - replica_sets
      - large
      - non_maj_read
      - non_live_record
  - name: replica_sets_terminate_primary_jscore_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=replica_sets_terminate_primary_jscore_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - replica_sets
      - large
      - non_maj_read
  - name: replica_sets_kill_secondaries_jscore_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=replica_sets_kill_secondaries_jscore_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - replica_sets
      - san
      - large
      - non_live_record
  - name: mongosTest
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=mongos_test"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - misc_js
      - non_read_maj
      - non_live_record
  - name: multiversion_auth_gen
    commands:
      - func: generate resmoke tasks
        vars:
          use_multiversion: /data/multiversion
          fallback_num_sub_suites: 1
          resmoke_args: "--storageEngine=wiredTiger"
    tags:
      - auth
      - multiversion
  - name: multiversion_gen
    commands:
      - func: generate resmoke tasks
        vars:
          use_multiversion: /data/multiversion
          fallback_num_sub_suites: 1
          resmoke_args: "--storageEngine=wiredTiger"
  - name: feature_flag_multiversion_gen
    commands:
      - func: generate resmoke tasks
        vars:
          use_multiversion: /data/multiversion
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 1
  - name: unittest_shell_hang_analyzer_gen
    commands:
      - func: generate resmoke tasks
        vars:
          fallback_num_sub_suites: 1
          resmoke_args: "--storageEngine=wiredTiger"
          suite: unittest_shell_hang_analyzer
  - name: noPassthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          use_large_distro: "true"
          fallback_num_sub_suites: 12
          suite: no_passthrough
          resmoke_args: "--storageEngine=wiredTiger"
    tags:
      - misc_js
  - name: noPassthroughHotBackups_gen
    commands:
      - func: generate resmoke tasks
        vars:
          fallback_num_sub_suites: 12
          suite: no_passthrough
          resmoke_args: "--storageEngine=wiredTiger src/mongo/db/modules/*/jstests/hot_backups/*.js"
          use_large_distro: "true"
  - name: noPassthroughWithMongod_gen
    commands:
      - func: generate resmoke tasks
        vars:
          suite: no_passthrough_with_mongod
          fallback_num_sub_suites: 5
          use_large_distro: "true"
          resmoke_args: "--storageEngine=wiredTiger"
    tags:
      - misc_js
  - name: bulk_gle_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=bulk_gle_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - auth
      - gle
  - name: slow1_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_jobs_max: 1
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 4
    tags:
      - misc_js
      - non_win_dbg
  - name: serial_run
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_jobs_max: 1
          resmoke_args: "--suites=serial_run --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - misc_js
      - non_win_dbg
  - name: sharded_collections_jscore_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=sharded_collections_jscore_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - sharding
      - jscore
  - name: sharded_collections_jscore_multiversion_passthrough_gen
    commands:
      - func: generate implicit multiversion tasks
        vars:
          fallback_num_sub_suites: 4
          task_path_suffix: /data/multiversion
          resmoke_args: "--storageEngine=wiredTiger"
          suite: sharded_collections_jscore_passthrough
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - multiversion_passthrough
  - name: sharding_jscore_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=sharding_jscore_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - sharding
      - jscore
      - common
  - name: sharding_jscore_multiversion_passthrough_gen
    commands:
      - func: generate implicit multiversion tasks
        vars:
          fallback_num_sub_suites: 4
          suite: sharding_jscore_passthrough
          task_path_suffix: /data/multiversion
          resmoke_args: "--storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - multiversion_passthrough
  - name: sharding_jscore_op_query_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=sharding_jscore_op_query_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - sharding
      - jscore
  - name: sharding_update_v1_oplog_jscore_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=sharding_jscore_op_query_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - sharding
      - jscore
  - name: sharding_jscore_passthrough_wire_ops_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger --shellReadMode=legacy --shellWriteMode=compatibility --excludeWithAnyTags=requires_find_command"
          fallback_num_sub_suites: 11
          depends_on: jsCore
          suite: sharding_jscore_passthrough
    tags:
      - sharding
      - jscore
  - name: sharded_multi_stmt_txn_jscore_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=sharded_multi_stmt_txn_jscore_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - sharding
      - jscore
      - multi_stmt
  - name: multi_shard_multi_stmt_txn_jscore_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          use_large_distro: "true"
          resmoke_jobs_max: 0
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 28
          depends_on: jsCore
    tags:
      - multi_shard
      - multi_stmt
      - common
  - name: multi_shard_local_read_write_multi_stmt_txn_jscore_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          depends_on: jsCore
          fallback_num_sub_suites: 21
    tags:
      - multi_shard
      - common
  - name: multi_stmt_txn_jscore_passthrough_with_migration_gen
    commands:
      - func: generate resmoke tasks
        vars:
          fallback_num_sub_suites: 19
          resmoke_args: "--storageEngine=wiredTiger"
          depends_on: jsCore
          use_large_distro: "true"
    tags:
      - multi_stmt
  - name: multi_shard_multi_stmt_txn_kill_primary_jscore_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          use_large_distro: "true"
          depends_on: jsCore
          resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{featureFlagDisableIncompleteShardingDDLSupport: true}'"
          fallback_num_sub_suites: 48
    tags:
      - multi_shard
  - name: multi_shard_multi_stmt_txn_stepdown_primary_jscore_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          fallback_num_sub_suites: 37
          resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{featureFlagDisableIncompleteShardingDDLSupport: true}'"
          depends_on: jsCore
          use_large_distro: "true"
    tags:
      - multi_shard
  - name: tenant_migration_jscore_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          fallback_num_sub_suites: 10
          use_large_distro: "true"
          depends_on: jsCore
          resmoke_args: "--storageEngine=wiredTiger"
    tags:
      - tenant_migration
  - name: tenant_migration_causally_consistent_jscore_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          use_large_distro: "true"
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 10
          depends_on: jsCore
    tags:
      - tenant_migration
  - name: tenant_migration_multi_stmt_txn_jscore_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          depends_on: jsCore
          use_large_distro: "true"
          fallback_num_sub_suites: 10
    tags:
      - tenant_migration
      - txn
  - name: parallel_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_jobs_max: 1
          fallback_num_sub_suites: 2
          depends_on: jsCore
          resmoke_args: "--storageEngine=wiredTiger"
    tags:
      - misc_js
  - name: parallel_compatibility
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=parallel --shellReadMode=legacy --shellWriteMode=compatibility --storageEngine=wiredTiger --excludeWithAnyTags=requires_find_command"
          resmoke_jobs_max: 1
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - misc_js
  - name: concurrency
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=concurrency --storageEngine=wiredTiger"
          resmoke_jobs_max: 1
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - concurrency
      - common
  - name: concurrency_metrics
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_jobs_max: 1
          resmoke_args: "--suites=concurrency_metrics --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - concurrency
  - name: concurrency_replication_metrics
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_jobs_max: 1
          resmoke_args: "--suites=concurrency_replication_metrics --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - concurrency
      - repl
  - name: concurrency_replication_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          resmoke_jobs_max: 1
          fallback_num_sub_suites: 3
    tags:
      - concurrency
      - common
      - repl
  - name: concurrency_replication_multiversion_gen
    commands:
      - func: generate implicit multiversion tasks
        vars:
          task_path_suffix: /data/multiversion
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 4
          suite: concurrency_replication
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - multiversion_passthrough
  - name: concurrency_replication_causal_consistency_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_jobs_max: 1
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 3
    tags:
      - concurrency
      - repl
      - large
      - non_live_record
  - name: concurrency_replication_multi_stmt_txn
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_jobs_max: 1
          resmoke_args: "--suites=concurrency_replication_multi_stmt_txn --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - concurrency
      - common
      - repl
      - txn
  - name: concurrency_replication_ubsan
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=concurrency_replication_ubsan --storageEngine=wiredTiger"
          resmoke_jobs_max: 1
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - concurrency
      - ubsan
      - repl
  - name: concurrency_replication_causal_consistency_ubsan
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_jobs_max: 1
          resmoke_args: "--suites=concurrency_replication_causal_consistency_ubsan --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - concurrency
      - ubsan
      - repl
  - name: concurrency_replication_multi_stmt_txn_ubsan
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=concurrency_replication_multi_stmt_txn_ubsan --storageEngine=wiredTiger"
          resmoke_jobs_max: 1
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - concurrency
      - ubsan
      - repl
  - name: concurrency_replication_wiredtiger_cursor_sweeps_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_jobs_max: 1
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 3
    tags:
      - concurrency
      - repl
  - name: concurrency_replication_wiredtiger_eviction_debug_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 3
          resmoke_jobs_max: 1
    tags:
      - concurrency
      - repl
      - debug_only
  - name: concurrency_sharded_replication_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_jobs_max: 1
          fallback_num_sub_suites: 3
          resmoke_args: "--storageEngine=wiredTiger"
          use_large_distro: "true"
    tags:
      - concurrency
      - common
      - read_concern_maj
      - large
      - sharded
  - name: concurrency_sharded_replication_multiversion_gen
    commands:
      - func: generate implicit multiversion tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          task_path_suffix: /data/multiversion
          fallback_num_sub_suites: 4
          suite: concurrency_sharded_replication
    tags:
      - multiversion_passthrough
      - sharded
  - name: concurrency_sharded_replication_with_balancer_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_jobs_max: 1
          use_large_distro: "true"
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 3
    tags:
      - concurrency
      - common
      - read_concern_maj
      - large
      - sharded
  - name: concurrency_sharded_replication_no_txns_gen
    commands:
      - func: generate resmoke tasks
        vars:
          fallback_num_sub_suites: 3
          suite: concurrency_sharded_replication
          resmoke_args: "--excludeWithAnyTags=uses_transactions --storageEngine=wiredTiger"
          use_large_distro: "true"
          resmoke_jobs_max: 1
    tags:
      - concurrency
      - no_txns
      - large
      - sharded
  - name: concurrency_sharded_replication_no_txns_with_balancer_gen
    commands:
      - func: generate resmoke tasks
        vars:
          fallback_num_sub_suites: 3
          resmoke_jobs_max: 1
          use_large_distro: "true"
          resmoke_args: "--excludeWithAnyTags=uses_transactions --storageEngine=wiredTiger"
          suite: concurrency_sharded_replication_with_balancer
    tags:
      - concurrency
      - no_txns
      - large
      - sharded
  - name: concurrency_sharded_clusterwide_ops_add_remove_shards_gen
    commands:
      - func: generate resmoke tasks
        vars:
          use_large_distro: "true"
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 3
          resmoke_jobs_max: 1
    tags:
      - concurrency
      - common
      - read_concern_maj
      - large
      - sharded
  - name: concurrency_sharded_causal_consistency_gen
    commands:
      - func: generate resmoke tasks
        vars:
          fallback_num_sub_suites: 3
          use_large_distro: "true"
          resmoke_jobs_max: 1
          resmoke_args: "--storageEngine=wiredTiger"
    tags:
      - concurrency
      - non_live_record
      - sharded
  - name: concurrency_sharded_causal_consistency_and_balancer_gen
    commands:
      - func: generate resmoke tasks
        vars:
          use_large_distro: "true"
          resmoke_args: "--storageEngine=wiredTiger"
          resmoke_jobs_max: 1
          fallback_num_sub_suites: 3
    tags:
      - concurrency
      - large
      - non_live_record
      - sharded
  - name: concurrency_sharded_with_stepdowns_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 3
          use_large_distro: "true"
          resmoke_jobs_max: 1
    tags:
      - concurrency
      - stepdowns
      - large
      - sharded
  - name: concurrency_sharded_with_stepdowns_and_balancer_gen
    commands:
      - func: generate resmoke tasks
        vars:
          fallback_num_sub_suites: 3
          resmoke_args: "--storageEngine=wiredTiger"
          resmoke_jobs_max: 1
          use_large_distro: "true"
    tags:
      - concurrency
      - stepdowns
      - large
      - sharded
  - name: concurrency_sharded_terminate_primary_with_balancer_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          resmoke_jobs_max: 1
          use_large_distro: "true"
          fallback_num_sub_suites: 3
    tags:
      - concurrency
      - stepdowns
      - kill_terminate
      - sharded
  - name: concurrency_sharded_kill_primary_with_balancer_gen
    commands:
      - func: generate resmoke tasks
        vars:
          use_large_distro: "true"
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 3
          resmoke_jobs_max: 1
    tags:
      - concurrency
      - stepdowns
      - kill_terminate
      - sharded
  - name: concurrency_sharded_multi_stmt_txn_gen
    commands:
      - func: generate resmoke tasks
        vars:
          fallback_num_sub_suites: 3
          resmoke_args: "--storageEngine=wiredTiger"
          resmoke_jobs_max: 1
          use_large_distro: "true"
    tags:
      - concurrency
      - large
      - sharded
  - name: concurrency_sharded_multi_stmt_txn_with_balancer_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_jobs_max: 1
          use_large_distro: "true"
          fallback_num_sub_suites: 3
          resmoke_args: "--storageEngine=wiredTiger"
    tags:
      - concurrency
      - large
      - sharded
  - name: concurrency_sharded_local_read_write_multi_stmt_txn_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          use_large_distro: "true"
          resmoke_jobs_max: 1
          fallback_num_sub_suites: 3
    tags:
      - concurrency
      - large
      - sharded
  - name: concurrency_sharded_local_read_write_multi_stmt_txn_with_balancer_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          resmoke_jobs_max: 1
          fallback_num_sub_suites: 3
          use_large_distro: "true"
    tags:
      - concurrency
      - large
      - sharded
  - name: concurrency_sharded_multi_stmt_txn_with_stepdowns_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_jobs_max: 1
          fallback_num_sub_suites: 3
          use_large_distro: "true"
          resmoke_args: "--storageEngine=wiredTiger"
    tags:
      - concurrency
      - stepdowns
      - large
      - sharded
  - name: concurrency_sharded_multi_stmt_txn_terminate_primary_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          resmoke_jobs_max: 1
          fallback_num_sub_suites: 3
          use_large_distro: "true"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - concurrency
      - stepdowns
      - kill_terminate
      - sharded
  - name: concurrency_sharded_multi_stmt_txn_kill_primary_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          resmoke_jobs_max: 1
          fallback_num_sub_suites: 3
          use_large_distro: "true"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - concurrency
      - stepdowns
      - kill_terminate
      - sharded
  - name: concurrency_sharded_ddl_operations
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=concurrency_sharded_ddl_operations --storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2, sharding: 2}}'"
          resmoke_jobs_max: 1
    depends_on:
      - name: archive_dist_test_debug
  - name: concurrency_simultaneous_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          resmoke_jobs_max: 1
          fallback_num_sub_suites: 3
    tags:
      - concurrency
      - common
  - name: concurrency_simultaneous_replication
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=concurrency_simultaneous_replication --storageEngine=wiredTiger"
          resmoke_jobs_max: 1
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - concurrency
      - common
      - large
      - repl
  - name: concurrency_simultaneous_replication_wiredtiger_cursor_sweeps
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=concurrency_simultaneous_replication_wiredtiger_cursor_sweeps --storageEngine=wiredTiger"
          resmoke_jobs_max: 1
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - concurrency
      - repl
  - name: concurrency_simultaneous_replication_wiredtiger_eviction_debug
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_jobs_max: 1
          resmoke_args: "--suites=concurrency_simultaneous_replication_wiredtiger_eviction_debug --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - concurrency
      - repl
      - debug_only
  - name: read_concern_linearizable_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=read_concern_linearizable_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - read_write_concern
      - linearize
      - large
  - name: read_concern_majority_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          use_large_distro: "true"
          fallback_num_sub_suites: 10
          depends_on: jsCore
          resmoke_args: "--storageEngine=wiredTiger"
    tags:
      - read_write_concern
  - name: write_concern_majority_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=write_concern_majority_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - read_write_concern
      - large
      - write
  - name: cwrwc_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=cwrwc_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - read_write_concern
      - large
      - write
  - name: cwrwc_rc_majority_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          use_large_distro: "true"
          fallback_num_sub_suites: 10
          depends_on: jsCore
          resmoke_args: "--storageEngine=wiredTiger"
    tags:
      - read_write_concern
  - name: cwrwc_wc_majority_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=cwrwc_wc_majority_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - read_write_concern
      - large
      - write
  - name: secondary_reads_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          depends_on: jsCore
          resmoke_args: "--storageEngine=wiredTiger"
          use_large_distro: "true"
          fallback_num_sub_suites: 12
  - name: replica_sets
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=replica_sets --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - replica_sets
      - san
      - large
  - name: replica_sets_ese_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          use_large_distro: "true"
          fallback_num_sub_suites: 15
    tags:
      - replica_sets
      - encrypt
      - san
  - name: replica_sets_ese_gcm_gen
    commands:
      - func: generate resmoke tasks
        vars:
          fallback_num_sub_suites: 15
          use_large_distro: "true"
          resmoke_args: "--storageEngine=wiredTiger"
    tags:
      - replica_sets
      - encrypt
      - san
      - gcm
  - name: replica_sets_auth_gen
    commands:
      - func: generate resmoke tasks
        vars:
          use_large_distro: "true"
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 14
    tags:
      - replica_sets
      - common
      - san
      - auth
  - name: replica_sets_large_txns_format_gen
    commands:
      - func: generate resmoke tasks
        vars:
          fallback_num_sub_suites: 15
          resmoke_args: "--storageEngine=wiredTiger"
    tags:
      - replica_sets
      - multi_oplog
      - san
  - name: replica_sets_max_mirroring_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 15
    tags:
      - replica_sets
      - san
  - name: replica_sets_update_v1_oplog_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 15
    tags:
      - replica_sets
      - san
  - name: replica_sets_multiversion_gen
    commands:
      - func: generate randomized multiversion tasks
        vars:
          fallback_num_sub_suites: 8
          use_multiversion: /data/multiversion
          resmoke_args: "--storageEngine=wiredTiger --tagFile=generated_resmoke_config/multiversion_exclude_tags.yml"
          suite: replica_sets_multiversion
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - random_multiversion_ds
  - name: sasl
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=sasl --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
  - name: sharding_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 32
          use_large_distro: "true"
    tags:
      - sharding
      - common
  - name: sharding_multiversion_gen
    commands:
      - func: generate randomized multiversion tasks
        vars:
          fallback_num_sub_suites: 32
          suite: sharding_multiversion
          resmoke_args: "--storageEngine=wiredTiger --tagFile=generated_resmoke_config/multiversion_exclude_tags.yml"
          use_large_distro: "true"
          use_multiversion: /data/multiversion
    tags:
      - random_multiversion_ds
  - name: sharding_max_mirroring_gen
    commands:
      - func: generate resmoke tasks
        vars:
          use_large_distro: "true"
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 32
    tags:
      - sharding
      - common
  - name: sharding_csrs_continuous_config_stepdown_gen
    commands:
      - func: generate resmoke tasks
        vars:
          fallback_num_sub_suites: 25
          use_large_distro: "true"
          suite: sharding_continuous_config_stepdown
          resmoke_args: "--storageEngine=wiredTiger"
    tags:
      - sharding
      - common
      - csrs
      - non_live_record
  - name: sharding_ese_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          use_large_distro: "true"
          fallback_num_sub_suites: 32
    tags:
      - sharding
      - encrypt
  - name: sharding_ese_gcm_gen
    commands:
      - func: generate resmoke tasks
        vars:
          fallback_num_sub_suites: 32
          use_large_distro: "true"
          resmoke_args: "--storageEngine=wiredTiger"
    tags:
      - sharding
      - encrypt
      - gcm
  - name: sharding_op_query_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--shellReadMode=legacy --storageEngine=wiredTiger --excludeWithAnyTags=requires_find_command"
          use_large_distro: "true"
          suite: sharding
          fallback_num_sub_suites: 31
    tags:
      - sharding
      - common
      - op_query
  - name: sharding_auth_gen
    commands:
      - func: generate resmoke tasks
        vars:
          use_large_distro: "true"
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 31
    tags:
      - sharding
      - auth
  - name: sharding_auth_audit_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          use_large_distro: "true"
          fallback_num_sub_suites: 31
    tags:
      - auth
      - audit
      - non_live_record
  - name: sharding_last_lts_mongos_and_mixed_shards_gen
    commands:
      - func: generate explicit multiversion tasks
        vars:
          use_multiversion: /data/multiversion
          fallback_num_sub_suites: 24
          use_large_distro: "true"
          resmoke_args: "--tagFile=generated_resmoke_config/multiversion_exclude_tags.yml"
    tags:
      - sharding
      - common
      - multiversion
  - name: sharding_update_v1_oplog_gen
    commands:
      - func: generate resmoke tasks
        vars:
          fallback_num_sub_suites: 31
          use_large_distro: "true"
          resmoke_args: "--storageEngine=wiredTiger"
    tags:
      - sharding
      - common
  - name: snmp
    commands:
      - func: do setup
      - func: do snmp setup
      - func: run tests
        vars:
          snmp_config_path: SNMPCONFPATH=snmpconf
          resmoke_args: "--suites=snmp --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
  - name: ssl_gen
    commands:
      - func: generate resmoke tasks
        vars:
          fallback_num_sub_suites: 5
          resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {network: 2, replication: {heartbeats: 2}}}'"
    tags:
      - encrypt
      - ssl
  - name: sslSpecial_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          suite: ssl_special
          fallback_num_sub_suites: 3
    tags:
      - encrypt
      - ssl
  - name: jsCore_decimal
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=decimal --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - jscore
      - common
      - decimal
  - name: read_only
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=read_only --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - read_only
  - name: read_only_sharded
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=read_only_sharded --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - read_only
  - name: session_jscore_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=session_jscore_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
  - name: causally_consistent_jscore_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 14
    tags:
      - causally_consistent
  - name: causally_consistent_jscore_passthrough_auth_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 15
    tags:
      - causally_consistent
  - name: causally_consistent_read_concern_snapshot_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 15
    tags:
      - causally_consistent
      - read_write_concern
      - durable_history
  - name: sharded_causally_consistent_read_concern_snapshot_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          fallback_num_sub_suites: 15
          resmoke_args: "--storageEngine=wiredTiger"
    tags:
      - causally_consistent
      - read_write_concern
      - durable_history
  - name: sharded_causally_consistent_jscore_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          fallback_num_sub_suites: 15
          resmoke_args: "--storageEngine=wiredTiger"
    tags:
      - causally_consistent
  - name: retryable_writes_jscore_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          use_large_distro: "true"
          fallback_num_sub_suites: 9
    tags:
      - retry
  - name: logical_session_cache_replication_default_refresh_jscore_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          fallback_num_sub_suites: 17
          resmoke_args: "--storageEngine=wiredTiger"
    tags:
      - logical_session_cache
      - repl
  - name: logical_session_cache_replication_100ms_refresh_jscore_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 17
    tags:
      - logical_session_cache
      - repl
  - name: logical_session_cache_replication_1sec_refresh_jscore_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 16
    tags:
      - logical_session_cache
      - one_sec
      - repl
  - name: logical_session_cache_replication_10sec_refresh_jscore_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 16
    tags:
      - logical_session_cache
      - repl
  - name: logical_session_cache_sharding_default_refresh_jscore_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          fallback_num_sub_suites: 12
          resmoke_args: "--storageEngine=wiredTiger"
    tags:
      - logical_session_cache
  - name: logical_session_cache_sharding_100ms_refresh_jscore_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 48
    tags:
      - logical_session_cache
  - name: logical_session_cache_sharding_100ms_refresh_jscore_txns_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 10
    tags:
      - logical_session_cache
  - name: logical_session_cache_sharding_1sec_refresh_jscore_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 20
    tags:
      - logical_session_cache
      - one_sec
  - name: logical_session_cache_sharding_10sec_refresh_jscore_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          fallback_num_sub_suites: 14
          resmoke_args: "--storageEngine=wiredTiger"
    tags:
      - logical_session_cache
  - name: logical_session_cache_standalone_default_refresh_jscore_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 5
    tags:
      - logical_session_cache
  - name: logical_session_cache_standalone_100ms_refresh_jscore_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          fallback_num_sub_suites: 5
          resmoke_args: "--storageEngine=wiredTiger"
    tags:
      - logical_session_cache
  - name: logical_session_cache_standalone_1sec_refresh_jscore_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          resmoke_args: "--storageEngine=wiredTiger"
          fallback_num_sub_suites: 5
    tags:
      - logical_session_cache
      - one_sec
  - name: logical_session_cache_standalone_10sec_refresh_jscore_passthrough_gen
    commands:
      - func: generate resmoke tasks
        vars:
          fallback_num_sub_suites: 5
          resmoke_args: "--storageEngine=wiredTiger"
    tags:
      - logical_session_cache
  - name: retryable_writes_jscore_stepdown_passthrough
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=retryable_writes_jscore_stepdown_passthrough --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - retry
  - name: watchdog_wiredtiger
    commands:
      - func: do setup
      - func: do watchdog setup
      - func: run tests
        vars:
          resmoke_jobs_max: 1
          resmoke_args: "--suites=watchdog --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - watchdog
  - name: watchdog_inmemory
    commands:
      - func: do setup
      - func: do watchdog setup
      - func: run tests
        vars:
          resmoke_args: "--suites=watchdog --storageEngine=inMemory"
          resmoke_jobs_max: 1
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - watchdog
  - name: free_monitoring
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_jobs_max: 1
          resmoke_args: "--suites=free_monitoring --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
  - name: client_encrypt
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=client_encrypt --storageEngine=wiredTiger"
          resmoke_jobs_max: 1
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - ssl
      - encrypt
  - name: fle
    commands:
      - func: do setup
      - func: load aws test credentials
      - func: run tests
        vars:
          resmoke_args: "--suites=fle --storageEngine=wiredTiger"
          resmoke_jobs_max: 1
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - encrypt
  - name: ocsp
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_jobs_max: 1
          resmoke_args: "--suites=ocsp"
    depends_on:
      - name: archive_dist_test_debug
    tags:
      - ssl
      - encrypt
      - ocsp
  - name: jsonSchema
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=json_schema --storageEngine=wiredTiger"
          resmoke_jobs_max: 1
    depends_on:
      - name: archive_dist_test_debug
  - name: powercycle_smoke_skip_compile
    commands:
      - func: set task expansion macros
      - func: set up venv
      - func: upload pip requirements
      - func: configure evergreen api credentials
      - func: multiversion_setup
        vars:
          install_master_bin: true
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - "./src/evergreen/move_multiversion_binaries.sh"
      - func: set up remote credentials
        vars:
          private_key_file: "$(${posix_workdir})/src/powercycle.pem"
          private_key_remote: "${__project_aws_ssh_key_value}"
          aws_secret_remote: "${powercycle_aws_secret}"
          aws_key_remote: "${powercycle_aws_key}"
      - func: set up EC2 instance
      - func: run powercycle test
        timeout_secs: 1800
    exec_timeout_secs: 7200
  - name: powercycle_smoke
    commands:
      - func: do setup
      - func: set up remote credentials
        vars:
          aws_key_remote: "${powercycle_aws_key}"
          aws_secret_remote: "${powercycle_aws_secret}"
          private_key_file: "$(${posix_workdir})/src/powercycle.pem"
          private_key_remote: "${__project_aws_ssh_key_value}"
      - func: set up EC2 instance
      - func: run powercycle test
        timeout_secs: 1800
    depends_on:
      - name: archive_dist_test_debug
    exec_timeout_secs: 7200
  - name: powercycle_kill_mongod_smoke
    commands:
      - func: do setup
      - func: set up remote credentials
        vars:
          private_key_file: "$(${posix_workdir})/src/powercycle.pem"
          private_key_remote: "${__project_aws_ssh_key_value}"
          aws_key_remote: "${powercycle_aws_key}"
          aws_secret_remote: "${powercycle_aws_secret}"
      - func: set up EC2 instance
      - func: run powercycle test
        timeout_secs: 1800
    depends_on:
      - name: archive_dist_test_debug
    exec_timeout_secs: 7200
  - name: powercycle
    commands:
      - func: do setup
      - func: set up remote credentials
        vars:
          aws_key_remote: "${powercycle_aws_key}"
          aws_secret_remote: "${powercycle_aws_secret}"
          private_key_file: "$(${posix_workdir})/src/powercycle.pem"
          private_key_remote: "${__project_aws_ssh_key_value}"
      - func: set up EC2 instance
      - func: run powercycle test
        timeout_secs: 1800
    depends_on:
      - name: archive_dist_test_debug
    exec_timeout_secs: 7200
    tags:
      - powercycle
  - name: powercycle_kill_mongod
    commands:
      - func: do setup
      - func: set up remote credentials
        vars:
          aws_secret_remote: "${powercycle_aws_secret}"
          private_key_file: "$(${posix_workdir})/src/powercycle.pem"
          aws_key_remote: "${powercycle_aws_key}"
          private_key_remote: "${__project_aws_ssh_key_value}"
      - func: set up EC2 instance
      - func: run powercycle test
        timeout_secs: 1800
    depends_on:
      - name: archive_dist_test_debug
    exec_timeout_secs: 7200
    tags:
      - powercycle
  - name: powercycle_fcv4.4
    commands:
      - func: do setup
      - func: set up remote credentials
        vars:
          private_key_remote: "${__project_aws_ssh_key_value}"
          aws_key_remote: "${powercycle_aws_key}"
          private_key_file: "$(${posix_workdir})/src/powercycle.pem"
          aws_secret_remote: "${powercycle_aws_secret}"
      - func: set up EC2 instance
      - func: run powercycle test
        timeout_secs: 1800
    depends_on:
      - name: archive_dist_test_debug
    exec_timeout_secs: 7200
    tags:
      - powercycle
  - name: powercycle_replication
    commands:
      - func: do setup
      - func: set up remote credentials
        vars:
          private_key_remote: "${__project_aws_ssh_key_value}"
          aws_secret_remote: "${powercycle_aws_secret}"
          private_key_file: "$(${posix_workdir})/src/powercycle.pem"
          aws_key_remote: "${powercycle_aws_key}"
      - func: set up EC2 instance
      - func: run powercycle test
        timeout_secs: 1800
    depends_on:
      - name: archive_dist_test_debug
    exec_timeout_secs: 7200
    tags:
      - powercycle
  - name: powercycle_replication_smalloplog
    commands:
      - func: do setup
      - func: set up remote credentials
        vars:
          private_key_remote: "${__project_aws_ssh_key_value}"
          aws_key_remote: "${powercycle_aws_key}"
          aws_secret_remote: "${powercycle_aws_secret}"
          private_key_file: "$(${posix_workdir})/src/powercycle.pem"
      - func: set up EC2 instance
      - func: run powercycle test
        timeout_secs: 1800
    depends_on:
      - name: archive_dist_test_debug
    exec_timeout_secs: 7200
    tags:
      - powercycle
  - name: powercycle_syncdelay
    commands:
      - func: do setup
      - func: set up remote credentials
        vars:
          private_key_remote: "${__project_aws_ssh_key_value}"
          aws_key_remote: "${powercycle_aws_key}"
          aws_secret_remote: "${powercycle_aws_secret}"
          private_key_file: "$(${posix_workdir})/src/powercycle.pem"
      - func: set up EC2 instance
      - func: run powercycle test
        timeout_secs: 1800
    depends_on:
      - name: archive_dist_test_debug
    exec_timeout_secs: 7200
    tags:
      - powercycle
  - name: powercycle_write_concern_majority
    commands:
      - func: do setup
      - func: set up remote credentials
        vars:
          private_key_remote: "${__project_aws_ssh_key_value}"
          aws_key_remote: "${powercycle_aws_key}"
          private_key_file: "$(${posix_workdir})/src/powercycle.pem"
          aws_secret_remote: "${powercycle_aws_secret}"
      - func: set up EC2 instance
      - func: run powercycle test
    depends_on:
      - name: archive_dist_test_debug
    exec_timeout_secs: 7200
    tags:
      - powercycle
  - name: idl_tests
    commands:
      - func: set task expansion macros
      - func: set up venv
      - func: upload pip requirements
      - func: run idl tests
    depends_on:
      - name: archive_dist_test_debug
  - name: blackduck_scanner
    commands:
      - func: do non-compile setup
      - command: expansions.write
        params:
          file: expansions.yml
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - src/evergreen/blackduck_setup.sh
          env:
            python: "${python}"
            workdir: "${workdir}"
          silent: true
        type: setup
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - src/evergreen/blackduck_hub.sh
          env:
            python: "${python}"
            workdir: "${workdir}"
        type: test
    patchable: false
  - name: tla_plus
    commands:
      - func: do non-compile setup
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - "./src/evergreen/download_tlc.sh"
        type: setup
      - func: run tests
        vars:
          resmoke_jobs_max: 1
          resmoke_args: "--suites=tla_plus"
  - name: buildscripts_test
    commands:
      - func: do non-compile setup
      - func: set up remote credentials
      - func: configure evergreen api credentials
      - func: multiversion_setup
      - func: run tests
        vars:
          resmoke_args: "--suites=buildscripts_test"
          resmoke_jobs_max: 1
    depends_on: []
  - name: resmoke_end2end_tests
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=resmoke_end2end_tests"
    depends_on:
      - name: archive_dist_test_debug
  - name: test_packages
    commands:
      - func: fetch packages
      - func: set up remote credentials
        vars:
          private_key_file: ~/.ssh/kitchen.pem
          aws_key_remote: "${kitchen_aws_key}"
          private_key_remote: "${kitchen_private_key}"
          aws_secret_remote: "${kitchen_aws_secret}"
      - func: run kitchen
    depends_on:
      - name: package
  - name: package
    commands:
      - func: scons compile
        vars:
          task_compile_flags: "--separate-debug --legacy-tarball"
          targets: "distsrc-${ext|tgz} archive-dist archive-dist-debug archive-shell archive-shell-debug ${additional_package_targets|}"
      - command: expansions.write
        params:
          file: expansions.yml
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - src/evergreen/package.sh
          env:
            workdir: "${workdir}"
            python: "${python}"
      - command: s3.put
        params:
          local_file: "src/distsrc.${ext|tgz}"
          remote_file: "${project}/${build_variant}/${revision}/sources/mongo-src-${build_id}.${ext|tgz}"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: mciuploads
          permissions: public-read
          content_type: "${content_type|application/gzip}"
          display_name: Source tarball
      - command: s3.put
        params:
          local_file: "src/mongodb-dist.${ext|tgz}"
          remote_file: "${project}/${build_variant}/${revision}/dist/mongo-${build_id}.${ext|tgz}"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: mciuploads
          permissions: public-read
          content_type: application/tar
          display_name: Dist Tarball
          optional: true
      - command: s3.put
        params:
          local_file: "src/mongodb-dist-debugsymbols.${ext|tgz}"
          remote_file: "${project}/${build_variant}/${revision}/dist/mongo-${build_id}-debugsymbols.${ext|tgz}"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: mciuploads
          permissions: public-read
          content_type: application/tar
          display_name: Dist Debugsymbols
          optional: true
      - command: s3.put
        params:
          local_file: "src/mongodb-shell.${ext|tgz}"
          remote_file: "${mongo_shell}"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: mciuploads
          permissions: public-read
          content_type: "${content_type|application/gzip}"
          display_name: Shell
          optional: true
      - command: s3.put
        params:
          local_file: "src/mongodb-shell-debugsymbols.${ext|tgz}"
          remote_file: "${mongo_shell_debugsymbols}"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: mciuploads
          permissions: public-read
          content_type: "${content_type|application/gzip}"
          display_name: Shell Debugsymbols
          optional: true
      - command: s3.put
        params:
          local_file: "src/mongodb-cryptd.${ext|tgz}"
          remote_file: "${mongo_cryptd}"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: mciuploads
          permissions: public-read
          content_type: "${content_type|application/gzip}"
          display_name: CryptD Binaries
          optional: true
      - command: s3.put
        params:
          local_file: "src/mongodb-cryptd-debugsymbols.${ext|tgz}"
          remote_file: "${mongo_cryptd_debugsymbols}"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: mciuploads
          permissions: public-read
          content_type: "${content_type|application/gzip}"
          display_name: CryptD Debugsymbols
          optional: true
      - command: s3.put
        params:
          local_file: "src/mh-binaries.${ext|tgz}"
          remote_file: "${mh_archive}"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: mciuploads
          permissions: public-read
          content_type: "${content_type|application/gzip}"
          display_name: MH Binaries
          optional: true
      - command: s3.put
        params:
          local_file: "src/mh-debugsymbols.${ext|tgz}"
          remote_file: "${mh_debugsymbols}"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: mciuploads
          permissions: public-read
          content_type: "${content_type|application/gzip}"
          display_name: MH Debugsymbols
          optional: true
      - func: run packager.py
      - command: archive.targz_pack
        params:
          target: packages.tgz
          source_dir: src
          include:
            - repo/**
            - "./**.msi"
      - command: s3.put
        params:
          local_file: packages.tgz
          remote_file: "${project}/${build_variant}/${revision}/artifacts/${build_id}-packages.tgz"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: mciuploads
          permissions: public-read
          content_type: application/tar
          display_name: Packages
          optional: true
    depends_on:
      - name: compile_dist_test
  - name: publish_packages
    commands:
      - func: fetch artifacts
      - func: fetch packages
      - func: apply compile expansions
      - func: set up remote credentials
        vars:
          aws_secret_remote: "${repo_aws_secret}"
          aws_key_remote: "${repo_aws_key}"
      - func: set up notary client credentials
      - command: shell.exec
        params:
          script: ". ./notary_env.sh\n\nset -o errexit\nset -o verbose\n\nCURATOR_RELEASE=${curator_release|\"latest\"}\ncurl -L -O http://boxes.10gen.com/build/curator/curator-dist-rhel70-$CURATOR_RELEASE.tar.gz\ntar -zxvf curator-dist-rhel70-$CURATOR_RELEASE.tar.gz\n./curator repo submit --service ${barque_url} --config ./etc/repo_config.yaml --distro ${packager_distro} --edition ${repo_edition} --version ${version} --arch ${packager_arch} --packages https://s3.amazonaws.com/mciuploads/${project}/${build_variant}/${revision}/artifacts/${build_id}-packages.tgz\n"
          working_dir: src
          shell: bash
    depends_on:
      - name: package
      - name: jsCore
      - name: run_dbtest
      - name: replica_sets_jscore_passthrough
    tags:
      - publish
    patchable: false
    stepback: false
  - name: push
    commands:
      - func: fetch artifacts
      - func: fetch packages
      - func: fetch dist tarball
      - command: s3.get
        params:
          local_file: src/mongo-shell.tgz
          extract_to: ~
          remote_file: "${mongo_shell}"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: mciuploads
      - command: s3.get
        params:
          local_file: src/mongo-cryptd.tgz
          extract_to: ~
          remote_file: "${mongo_cryptd}"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: mciuploads
          build_variants:
            - enterprise-amazon2
            - enterprise-amazon2-arm64
            - enterprise-debian92-64
            - enterprise-debian10-64
            - enterprise-linux-64-amazon-ami
            - enterprise-macos
            - enterprise-rhel-67-s390x
            - enterprise-rhel-70-64-bit
            - enterprise-rhel-70-64-bit-kitchen-sink
            - enterprise-rhel-70-64-bit-no-libunwind
            - enterprise-rhel-71-ppc64le
            - enterprise-rhel-81-ppc64le
            - enterprise-rhel-71-ppc64le-inmem
            - enterprise-rhel-72-s390x
            - enterprise-rhel-72-s390x-inmem
            - enterprise-rhel-80-64-bit
            - enterprise-rhel-80-64-bit-coverage
            - enterprise-rhel-80-64-bit-inmem
            - enterprise-rhel-80-64-bit-logv2
            - enterprise-rhel-80-64-bit-flow-control-off
            - enterprise-rhel-80-64-bit-multiversion
            - enterprise-rhel-80-64-bit-multi-txn-oplog-entries
            - enterprise-rhel-80-64-bit-required-inmem
            - enterprise-rhel-80-64-bit-required-majority-read-concern-off
            - enterprise-rhel-80-64-bit-suggested
            - enterprise-rhel-82-arm64
            - enterprise-suse12-64
            - enterprise-suse15-64
            - enterprise-suse12-s390x
            - enterprise-ubuntu1804-64
            - enterprise-ubuntu1804-arm64
            - enterprise-ubuntu2004-arm64
            - enterprise-ubuntu1804-ppc64le
            - enterprise-ubuntu1804-s390x
            - enterprise-ubuntu2004-64
            - enterprise-windows
            - enterprise-windows-suggested
            - enterprise-windows-compile-all
            - enterprise-windows-debug-unoptimized
            - enterprise-windows-inmem
            - enterprise-windows-nopush-template
            - enterprise-windows-required
            - enterprise-windows-wtdevelop
            - ubuntu1804-debug-asan
            - ubuntu1804-debug-ubsan
            - ubuntu1804-debug-aubsan-lite-required
            - ubuntu1804-debug-aubsan-lite_fuzzer
      - command: s3.get
        params:
          local_file: src/mh.tgz
          extract_to: ~
          remote_file: "${mh_archive}"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: mciuploads
          build_variants:
            - enterprise-debian92-64
            - enterprise-macos
            - enterprise-rhel-80-64-bit
            - enterprise-rhel-80-64-bit-dynamic-required
            - enterprise-rhel-70-64-bit
            - enterprise-rhel-82-arm64
            - enterprise-amazon2-arm64
            - enterprise-ubuntu1804-64
            - enterprise-windows
            - enterprise-windows-suggested
            - enterprise-windows-required
      - command: s3.get
        params:
          local_file: "src/distsrc.${ext|tgz}"
          extract_to: ~
          remote_file: "${project}/${build_variant}/${revision}/sources/mongo-src-${build_id}.${ext|tgz}"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: mciuploads
          build_variants:
            - rhel70
            - windows
      - func: apply compile expansions
      - func: fetch dist debugsymbols
      - func: set up remote credentials
        vars:
          aws_key_remote: "${repo_aws_key}"
          aws_secret_remote: "${repo_aws_secret}"
      - func: set up notary client credentials
      - command: shell.exec
        params:
          script: ". ./notary_env.sh\n\nset -o errexit\nset -o verbose\n\nmv mongo-binaries.tgz mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}\nmv mongo-shell.tgz mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}\nmv mongo-cryptd.tgz mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz} || true\nmv mh.tgz mh-${push_name}-${push_arch}-${suffix}.${ext|tgz} || true\nmv mongo-debugsymbols.tgz mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz} || true\nmv distsrc.${ext|tgz} mongodb-src-${src_suffix}.${ext|tar.gz} || true\n/usr/bin/find build/ -type f | grep msi$ | xargs -I original_filename cp original_filename mongodb-${push_name}-${push_arch}-${suffix}.msi || true\n\n/usr/local/bin/notary-client.py --key-name \"server-5.0\" --auth-token-file ${workdir}/src/signing_auth_token --comment \"Evergreen Automatic Signing ${revision} - ${build_variant} - ${branch_name}\" --notary-url http://notary-service.build.10gen.cc:5000 --skip-missing mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz} mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz} mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz} mongodb-${push_name}-${push_arch}-${suffix}.msi mongodb-src-${src_suffix}.${ext|tar.gz} mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}\n"
          working_dir: src
          shell: bash
        type: test
      - command: s3.put
        params:
          local_file: "src/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}"
          remote_file: "${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: "${content_type|application/gzip}"
      - command: s3.put
        params:
          local_file: "src/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}"
          remote_file: "${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: "${content_type|application/gzip}"
      - command: s3.put
        params:
          local_file: "src/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}"
          remote_file: "${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: "${content_type|application/gzip}"
      - command: s3.put
        params:
          local_file: "src/mh-${push_name}-${push_arch}-${suffix}.${ext|tgz}"
          remote_file: "${push_path}-STAGE/${push_name}/mh-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: "${content_type|application/gzip}"
      - command: s3.put
        params:
          local_file: "src/mongodb-src-${src_suffix}.${ext|tar.gz}"
          remote_file: "${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: "${content_type|application/gzip}"
      - command: s3.put
        params:
          local_file: "src/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}"
          remote_file: "${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: "${content_type|application/gzip}"
          optional: true
      - command: s3.put
        params:
          local_file: "src/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig"
          remote_file: "${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sig"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: "${content_type|application/gzip}"
      - command: s3.put
        params:
          local_file: "src/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig"
          remote_file: "${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sig"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: "${content_type|application/gzip}"
      - command: s3.put
        params:
          local_file: "src/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig"
          remote_file: "${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sig"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: "${content_type|application/gzip}"
      - command: s3.put
        params:
          local_file: "src/mongodb-src-${src_suffix}.${ext|tar.gz}.sig"
          remote_file: "${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.sig"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: "${content_type|application/gzip}"
      - command: s3.put
        params:
          local_file: "src/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sig"
          remote_file: "${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sig"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: "${content_type|application/gzip}"
          optional: true
      - command: s3.put
        params:
          local_file: "src/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi"
          remote_file: "${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: application/x-msi
      - command: s3.put
        params:
          local_file: "src/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1"
          remote_file: "${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha1"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: text/plain
      - command: s3.put
        params:
          local_file: "src/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1"
          remote_file: "${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha1"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: text/plain
      - command: s3.put
        params:
          local_file: "src/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1"
          remote_file: "${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha1"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: text/plain
      - command: s3.put
        params:
          local_file: "src/mongodb-src-${src_suffix}.${ext|tar.gz}.sha1"
          remote_file: "${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.sha1"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: text/plain
      - command: s3.put
        params:
          local_file: "src/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sha1"
          remote_file: "${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sha1"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: text/plain
          optional: true
      - command: s3.put
        params:
          local_file: "src/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi.sha1"
          remote_file: "${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi.sha1"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: text/plain
      - command: s3.put
        params:
          local_file: "src/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256"
          remote_file: "${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha256"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: text/plain
      - command: s3.put
        params:
          local_file: "src/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256"
          remote_file: "${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha256"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: text/plain
      - command: s3.put
        params:
          local_file: "src/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256"
          remote_file: "${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha256"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: text/plain
      - command: s3.put
        params:
          local_file: "src/mongodb-src-${src_suffix}.${ext|tar.gz}.sha256"
          remote_file: "${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.sha256"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: text/plain
      - command: s3.put
        params:
          local_file: "src/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sha256"
          remote_file: "${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sha256"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: text/plain
          optional: true
      - command: s3.put
        params:
          local_file: "src/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi.sha256"
          remote_file: "${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi.sha256"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: text/plain
      - command: s3.put
        params:
          local_file: "src/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5"
          remote_file: "${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.md5"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: text/plain
      - command: s3.put
        params:
          local_file: "src/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5"
          remote_file: "${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.md5"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: text/plain
      - command: s3.put
        params:
          local_file: "src/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5"
          remote_file: "${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.md5"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: text/plain
      - command: s3.put
        params:
          local_file: "src/mongodb-src-${src_suffix}.${ext|tar.gz}.md5"
          remote_file: "${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.md5"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: text/plain
      - command: s3.put
        params:
          local_file: "src/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.md5"
          remote_file: "${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.md5"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: text/plain
          optional: true
      - command: s3.put
        params:
          local_file: "src/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi.md5"
          remote_file: "${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi.md5"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: build-push-testing
          permissions: public-read
          content_type: text/plain
      - command: s3Copy.copy
        params:
          s3_copy_files:
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}"
              destination:
                bucket: "${push_bucket}"
                path: "${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}"
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}"
              destination:
                bucket: "${push_bucket}"
                path: "${push_path}/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}"
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}"
              destination:
                bucket: "${push_bucket}"
                path: "${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}"
              build_variants:
                - enterprise-amazon2
                - enterprise-amazon2-arm64
                - enterprise-debian92-64
                - enterprise-debian10-64
                - enterprise-linux-64-amazon-ami
                - enterprise-macos
                - enterprise-rhel-67-s390x
                - enterprise-rhel-70-64-bit
                - enterprise-rhel-70-64-bit-kitchen-sink
                - enterprise-rhel-70-64-bit-no-libunwind
                - enterprise-rhel-71-ppc64le
                - enterprise-rhel-81-ppc64le
                - enterprise-rhel-71-ppc64le-inmem
                - enterprise-rhel-72-s390x
                - enterprise-rhel-72-s390x-inmem
                - enterprise-rhel-80-64-bit
                - enterprise-rhel-80-64-bit-coverage
                - enterprise-rhel-80-64-bit-inmem
                - enterprise-rhel-80-64-bit-logv2
                - enterprise-rhel-80-64-bit-flow-control-off
                - enterprise-rhel-80-64-bit-multiversion
                - enterprise-rhel-80-64-bit-multi-txn-oplog-entries
                - enterprise-rhel-80-64-bit-required-inmem
                - enterprise-rhel-80-64-bit-required-majority-read-concern-off
                - enterprise-rhel-80-64-bit-suggested
                - enterprise-rhel-82-arm64
                - enterprise-suse12-64
                - enterprise-suse15-64
                - enterprise-suse12-s390x
                - enterprise-ubuntu1804-64
                - enterprise-ubuntu1804-arm64
                - enterprise-ubuntu2004-arm64
                - enterprise-ubuntu1804-ppc64le
                - enterprise-ubuntu1804-s390x
                - enterprise-ubuntu2004-64
                - enterprise-windows
                - enterprise-windows-suggested
                - enterprise-windows-compile-all
                - enterprise-windows-debug-unoptimized
                - enterprise-windows-inmem
                - enterprise-windows-nopush-template
                - enterprise-windows-required
                - enterprise-windows-wtdevelop
                - ubuntu1804-debug-asan
                - ubuntu1804-debug-ubsan
                - ubuntu1804-debug-aubsan-lite-required
                - ubuntu1804-debug-aubsan-lite_fuzzer
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mh-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}"
              destination:
                bucket: "${push_bucket}"
                path: "${push_path}/mh-${push_name}-${push_arch}-${suffix}.${ext|tgz}"
              build_variants:
                - enterprise-debian92-64
                - enterprise-macos
                - enterprise-rhel-80-64-bit
                - enterprise-rhel-80-64-bit-dynamic-required
                - enterprise-rhel-70-64-bit
                - enterprise-rhel-82-arm64
                - enterprise-amazon2-arm64
                - enterprise-ubuntu1804-64
                - enterprise-windows
                - enterprise-windows-suggested
                - enterprise-windows-required
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}"
              destination:
                bucket: "${push_bucket}"
                path: "src/mongodb-src-${src_suffix}.${ext|tar.gz}"
              build_variants:
                - rhel70
                - windows
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi"
              destination:
                bucket: "${push_bucket}"
                path: "${push_path}/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi"
              build_variants:
                - enterprise-windows
                - windows
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sig"
              destination:
                bucket: "${push_bucket}"
                path: "${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig"
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sig"
              destination:
                bucket: "${push_bucket}"
                path: "${push_path}/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig"
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sig"
              destination:
                bucket: "${push_bucket}"
                path: "${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig"
              build_variants:
                - enterprise-amazon2
                - enterprise-amazon2-arm64
                - enterprise-debian92-64
                - enterprise-debian10-64
                - enterprise-linux-64-amazon-ami
                - enterprise-macos
                - enterprise-rhel-67-s390x
                - enterprise-rhel-70-64-bit
                - enterprise-rhel-70-64-bit-kitchen-sink
                - enterprise-rhel-70-64-bit-no-libunwind
                - enterprise-rhel-71-ppc64le
                - enterprise-rhel-81-ppc64le
                - enterprise-rhel-71-ppc64le-inmem
                - enterprise-rhel-72-s390x
                - enterprise-rhel-72-s390x-inmem
                - enterprise-rhel-80-64-bit
                - enterprise-rhel-80-64-bit-coverage
                - enterprise-rhel-80-64-bit-inmem
                - enterprise-rhel-80-64-bit-logv2
                - enterprise-rhel-80-64-bit-flow-control-off
                - enterprise-rhel-80-64-bit-multiversion
                - enterprise-rhel-80-64-bit-multi-txn-oplog-entries
                - enterprise-rhel-80-64-bit-required-inmem
                - enterprise-rhel-80-64-bit-required-majority-read-concern-off
                - enterprise-rhel-80-64-bit-suggested
                - enterprise-rhel-82-arm64
                - enterprise-suse12-64
                - enterprise-suse15-64
                - enterprise-suse12-s390x
                - enterprise-ubuntu1804-64
                - enterprise-ubuntu1804-arm64
                - enterprise-ubuntu2004-arm64
                - enterprise-ubuntu1804-ppc64le
                - enterprise-ubuntu1804-s390x
                - enterprise-ubuntu2004-64
                - enterprise-windows
                - enterprise-windows-suggested
                - enterprise-windows-compile-all
                - enterprise-windows-debug-unoptimized
                - enterprise-windows-inmem
                - enterprise-windows-nopush-template
                - enterprise-windows-required
                - enterprise-windows-wtdevelop
                - ubuntu1804-debug-asan
                - ubuntu1804-debug-ubsan
                - ubuntu1804-debug-aubsan-lite-required
                - ubuntu1804-debug-aubsan-lite_fuzzer
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.sig"
              destination:
                bucket: "${push_bucket}"
                path: "src/mongodb-src-${src_suffix}.${ext|tar.gz}.sig"
              build_variants:
                - rhel70
                - windows
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha1"
              destination:
                bucket: "${push_bucket}"
                path: "${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1"
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha1"
              destination:
                bucket: "${push_bucket}"
                path: "${push_path}/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1"
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha1"
              destination:
                bucket: "${push_bucket}"
                path: "${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1"
              build_variants:
                - enterprise-amazon2
                - enterprise-amazon2-arm64
                - enterprise-debian92-64
                - enterprise-debian10-64
                - enterprise-linux-64-amazon-ami
                - enterprise-macos
                - enterprise-rhel-67-s390x
                - enterprise-rhel-70-64-bit
                - enterprise-rhel-70-64-bit-kitchen-sink
                - enterprise-rhel-70-64-bit-no-libunwind
                - enterprise-rhel-71-ppc64le
                - enterprise-rhel-81-ppc64le
                - enterprise-rhel-71-ppc64le-inmem
                - enterprise-rhel-72-s390x
                - enterprise-rhel-72-s390x-inmem
                - enterprise-rhel-80-64-bit
                - enterprise-rhel-80-64-bit-coverage
                - enterprise-rhel-80-64-bit-inmem
                - enterprise-rhel-80-64-bit-logv2
                - enterprise-rhel-80-64-bit-flow-control-off
                - enterprise-rhel-80-64-bit-multiversion
                - enterprise-rhel-80-64-bit-multi-txn-oplog-entries
                - enterprise-rhel-80-64-bit-required-inmem
                - enterprise-rhel-80-64-bit-required-majority-read-concern-off
                - enterprise-rhel-80-64-bit-suggested
                - enterprise-rhel-82-arm64
                - enterprise-suse12-64
                - enterprise-suse15-64
                - enterprise-suse12-s390x
                - enterprise-ubuntu1804-64
                - enterprise-ubuntu1804-arm64
                - enterprise-ubuntu2004-arm64
                - enterprise-ubuntu1804-ppc64le
                - enterprise-ubuntu1804-s390x
                - enterprise-ubuntu2004-64
                - enterprise-windows
                - enterprise-windows-suggested
                - enterprise-windows-compile-all
                - enterprise-windows-debug-unoptimized
                - enterprise-windows-inmem
                - enterprise-windows-nopush-template
                - enterprise-windows-required
                - enterprise-windows-wtdevelop
                - ubuntu1804-debug-asan
                - ubuntu1804-debug-ubsan
                - ubuntu1804-debug-aubsan-lite-required
                - ubuntu1804-debug-aubsan-lite_fuzzer
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.sha1"
              destination:
                bucket: "${push_bucket}"
                path: "src/mongodb-src-${src_suffix}.${ext|tar.gz}.sha1"
              build_variants:
                - rhel70
                - windows
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi.sha1"
              destination:
                bucket: "${push_bucket}"
                path: "${push_path}/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi.sha1"
              build_variants:
                - enterprise-windows
                - windows
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha256"
              destination:
                bucket: "${push_bucket}"
                path: "${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256"
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha256"
              destination:
                bucket: "${push_bucket}"
                path: "${push_path}/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256"
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha256"
              destination:
                bucket: "${push_bucket}"
                path: "${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256"
              build_variants:
                - enterprise-amazon2
                - enterprise-amazon2-arm64
                - enterprise-debian92-64
                - enterprise-debian10-64
                - enterprise-linux-64-amazon-ami
                - enterprise-macos
                - enterprise-rhel-67-s390x
                - enterprise-rhel-70-64-bit
                - enterprise-rhel-70-64-bit-kitchen-sink
                - enterprise-rhel-70-64-bit-no-libunwind
                - enterprise-rhel-71-ppc64le
                - enterprise-rhel-81-ppc64le
                - enterprise-rhel-71-ppc64le-inmem
                - enterprise-rhel-72-s390x
                - enterprise-rhel-72-s390x-inmem
                - enterprise-rhel-80-64-bit
                - enterprise-rhel-80-64-bit-coverage
                - enterprise-rhel-80-64-bit-inmem
                - enterprise-rhel-80-64-bit-logv2
                - enterprise-rhel-80-64-bit-flow-control-off
                - enterprise-rhel-80-64-bit-multiversion
                - enterprise-rhel-80-64-bit-multi-txn-oplog-entries
                - enterprise-rhel-80-64-bit-required-inmem
                - enterprise-rhel-80-64-bit-required-majority-read-concern-off
                - enterprise-rhel-80-64-bit-suggested
                - enterprise-rhel-82-arm64
                - enterprise-suse12-64
                - enterprise-suse15-64
                - enterprise-suse12-s390x
                - enterprise-ubuntu1804-64
                - enterprise-ubuntu1804-arm64
                - enterprise-ubuntu2004-arm64
                - enterprise-ubuntu1804-ppc64le
                - enterprise-ubuntu1804-s390x
                - enterprise-ubuntu2004-64
                - enterprise-windows
                - enterprise-windows-suggested
                - enterprise-windows-compile-all
                - enterprise-windows-debug-unoptimized
                - enterprise-windows-inmem
                - enterprise-windows-nopush-template
                - enterprise-windows-required
                - enterprise-windows-wtdevelop
                - ubuntu1804-debug-asan
                - ubuntu1804-debug-ubsan
                - ubuntu1804-debug-aubsan-lite-required
                - ubuntu1804-debug-aubsan-lite_fuzzer
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.sha256"
              destination:
                bucket: "${push_bucket}"
                path: "src/mongodb-src-${src_suffix}.${ext|tar.gz}.sha256"
              build_variants:
                - rhel70
                - windows
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi.sha256"
              destination:
                bucket: "${push_bucket}"
                path: "${push_path}/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi.sha256"
              build_variants:
                - enterprise-windows
                - windows
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.md5"
              destination:
                bucket: "${push_bucket}"
                path: "${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5"
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.md5"
              destination:
                bucket: "${push_bucket}"
                path: "${push_path}/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5"
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.md5"
              destination:
                bucket: "${push_bucket}"
                path: "${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5"
              build_variants:
                - enterprise-amazon2
                - enterprise-amazon2-arm64
                - enterprise-debian92-64
                - enterprise-debian10-64
                - enterprise-linux-64-amazon-ami
                - enterprise-macos
                - enterprise-rhel-67-s390x
                - enterprise-rhel-70-64-bit
                - enterprise-rhel-70-64-bit-kitchen-sink
                - enterprise-rhel-70-64-bit-no-libunwind
                - enterprise-rhel-71-ppc64le
                - enterprise-rhel-81-ppc64le
                - enterprise-rhel-71-ppc64le-inmem
                - enterprise-rhel-72-s390x
                - enterprise-rhel-72-s390x-inmem
                - enterprise-rhel-80-64-bit
                - enterprise-rhel-80-64-bit-coverage
                - enterprise-rhel-80-64-bit-inmem
                - enterprise-rhel-80-64-bit-logv2
                - enterprise-rhel-80-64-bit-flow-control-off
                - enterprise-rhel-80-64-bit-multiversion
                - enterprise-rhel-80-64-bit-multi-txn-oplog-entries
                - enterprise-rhel-80-64-bit-required-inmem
                - enterprise-rhel-80-64-bit-required-majority-read-concern-off
                - enterprise-rhel-80-64-bit-suggested
                - enterprise-rhel-82-arm64
                - enterprise-suse12-64
                - enterprise-suse15-64
                - enterprise-suse12-s390x
                - enterprise-ubuntu1804-64
                - enterprise-ubuntu1804-arm64
                - enterprise-ubuntu2004-arm64
                - enterprise-ubuntu1804-ppc64le
                - enterprise-ubuntu1804-s390x
                - enterprise-ubuntu2004-64
                - enterprise-windows
                - enterprise-windows-suggested
                - enterprise-windows-compile-all
                - enterprise-windows-debug-unoptimized
                - enterprise-windows-inmem
                - enterprise-windows-nopush-template
                - enterprise-windows-required
                - enterprise-windows-wtdevelop
                - ubuntu1804-debug-asan
                - ubuntu1804-debug-ubsan
                - ubuntu1804-debug-aubsan-lite-required
                - ubuntu1804-debug-aubsan-lite_fuzzer
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.md5"
              destination:
                bucket: "${push_bucket}"
                path: "src/mongodb-src-${src_suffix}.${ext|tar.gz}.md5"
              build_variants:
                - rhel70
                - windows
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi.md5"
              destination:
                bucket: "${push_bucket}"
                path: "${push_path}/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi.md5"
              build_variants:
                - enterprise-windows
                - windows
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
      - command: s3Copy.copy
        params:
          s3_copy_files:
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}"
              destination:
                bucket: "${push_bucket}"
                path: "${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}"
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sig"
              destination:
                bucket: "${push_bucket}"
                path: "${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sig"
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sha1"
              destination:
                bucket: "${push_bucket}"
                path: "${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sha1"
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sha256"
              destination:
                bucket: "${push_bucket}"
                path: "${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sha256"
            - source:
                bucket: build-push-testing
                path: "${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.md5"
              destination:
                bucket: "${push_bucket}"
                path: "${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.md5"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
    depends_on:
      - name: package
      - name: jsCore
      - name: run_dbtest
      - name: replica_sets_jscore_passthrough
    tags:
      - publish
    patchable: false
    stepback: false
  - name: search
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=search --storageEngine=wiredTiger"
          resmoke_jobs_max: 1
    depends_on:
      - name: archive_dist_test_debug
  - name: search_auth
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_jobs_max: 1
          resmoke_args: "--suites=search_auth --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
  - name: search_ssl
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_jobs_max: 1
          resmoke_args: "--suites=search_ssl --storageEngine=wiredTiger"
    depends_on:
      - name: archive_dist_test_debug
  - name: shared_scons_cache_pruning
    commands:
      - func: shared scons cache pruning
    depends_on: []
    exec_timeout_secs: 7200
  - name: win_shared_scons_cache_pruning
    commands:
      - func: set up win mount script
      - func: shared scons cache pruning
    depends_on: []
    exec_timeout_secs: 7200
  - name: validate_commit_message
    commands:
      - func: set task expansion macros
      - func: set up venv
      - command: shell.exec
        params:
          script: "set -o verbose\nset -o errexit\nif [ \"${is_commit_queue}\" = \"true\" ]; then\n  # Since `commit_message` is an evergreen expansion, we need a way to ensure we\n  # properly deal with any special characters that could cause issues (like \"). To\n  # do this, we will write it out to a file, then read that file into a variable.\n  cat > commit_message.txt <<END_OF_COMMIT_MSG\n${commit_message}\nEND_OF_COMMIT_MSG\n\n  commit_message_content=$(cat commit_message.txt)\n\n  ${activate_virtualenv}\n  $python buildscripts/validate_commit_message.py \"$commit_message_content\"\nfi\n"
          working_dir: src
          shell: bash
        type: test
    exec_timeout_secs: 600
  - name: mqlrun
    commands:
      - func: do setup
      - func: run tests
        vars:
          resmoke_args: "--suites=mqlrun"
    depends_on:
      - name: archive_dist_test_debug
task_groups:
  - name: compile_and_archive_dist_test_TG
    tasks:
      - compile_dist_test
      - archive_dist_test
      - archive_dist_test_debug
    max_hosts: 1
    setup_group_can_fail_task: true
    setup_group:
      - command: manifest.load
      - func: git get project
      - func: kill processes
      - func: cleanup environment
      - func: get all modified patch files
      - func: set task expansion macros
      - func: set up venv
      - func: upload pip requirements
      - func: configure evergreen api credentials
      - func: get buildnumber
      - func: set up credentials
      - func: use WiredTiger develop
      - func: set up win mount script
      - func: generate compile expansions
    teardown_group:
      - func: umount shared scons directory
      - func: cleanup environment
    setup_task:
      - func: apply compile expansions
      - func: set task expansion macros
    teardown_task:
      - func: attach scons logs
      - func: attach report
      - func: attach artifacts
      - func: kill processes
      - func: save code coverage data
      - func: save mongo coredumps
      - func: save failed unittests
      - func: save unstripped dbtest
      - func: save hang analyzer debugger files
      - func: save disk statistics
      - func: save system resource information
      - func: save libfuzzertest corpora
      - func: remove files
        vars:
          files: "src/resmoke_error_code src/build/scons/config.log src/*.gcda.gcov src/gcov-intermediate-files.tgz src/*.core src/*.mdmp mongo-coredumps.tgz src/dist-unittests/bin/* src/dist-unittests/lib/* mongo-unittests.tgz src/debugger*.* src/mongo-hanganalyzer.tgz diskstats.tgz system-resource-info.tgz ${report_file|src/report.json} ${archive_file|src/archive.json}"
    timeout:
      - func: run hang analyzer
  - name: compile_and_archive_dist_test_then_package_TG
    tasks:
      - compile_dist_test
      - archive_dist_test
      - archive_dist_test_debug
      - package
    max_hosts: 1
    setup_group_can_fail_task: true
    setup_group:
      - command: manifest.load
      - func: git get project
      - func: kill processes
      - func: cleanup environment
      - func: get all modified patch files
      - func: set task expansion macros
      - func: set up venv
      - func: upload pip requirements
      - func: configure evergreen api credentials
      - func: get buildnumber
      - func: set up credentials
      - func: use WiredTiger develop
      - func: set up win mount script
      - func: generate compile expansions
    teardown_group:
      - func: umount shared scons directory
      - func: cleanup environment
    setup_task:
      - func: apply compile expansions
      - func: set task expansion macros
    teardown_task:
      - func: attach scons logs
      - func: attach report
      - func: attach artifacts
      - func: kill processes
      - func: save code coverage data
      - func: save mongo coredumps
      - func: save failed unittests
      - func: save unstripped dbtest
      - func: save hang analyzer debugger files
      - func: save disk statistics
      - func: save system resource information
      - func: save libfuzzertest corpora
      - func: remove files
        vars:
          files: "src/resmoke_error_code src/build/scons/config.log src/*.gcda.gcov src/gcov-intermediate-files.tgz src/*.core src/*.mdmp mongo-coredumps.tgz src/dist-unittests/bin/* src/dist-unittests/lib/* mongo-unittests.tgz src/debugger*.* src/mongo-hanganalyzer.tgz diskstats.tgz system-resource-info.tgz ${report_file|src/report.json} ${archive_file|src/archive.json}"
    timeout:
      - func: run hang analyzer
  - name: compile_ninja_next_TG
    tasks:
      - compile_build_tools_next
      - compile_ninja_next
    max_hosts: 1
    setup_group_can_fail_task: true
    setup_group:
      - command: manifest.load
      - func: git get project
      - func: kill processes
      - func: cleanup environment
      - func: get all modified patch files
      - func: set task expansion macros
      - func: set up venv
      - func: upload pip requirements
      - func: configure evergreen api credentials
      - func: get buildnumber
      - func: set up credentials
      - func: use WiredTiger develop
      - func: set up win mount script
      - func: generate compile expansions
    teardown_group:
      - func: umount shared scons directory
      - func: cleanup environment
    setup_task:
      - func: apply compile expansions
      - func: set task expansion macros
    teardown_task:
      - func: attach scons logs
      - func: attach report
      - func: attach artifacts
      - func: kill processes
      - func: save code coverage data
      - func: save mongo coredumps
      - func: save failed unittests
      - func: save unstripped dbtest
      - func: save hang analyzer debugger files
      - func: save disk statistics
      - func: save system resource information
      - func: save libfuzzertest corpora
      - func: remove files
        vars:
          files: "src/resmoke_error_code src/build/scons/config.log src/*.gcda.gcov src/gcov-intermediate-files.tgz src/*.core src/*.mdmp mongo-coredumps.tgz src/dist-unittests/bin/* src/dist-unittests/lib/* mongo-unittests.tgz src/debugger*.* src/mongo-hanganalyzer.tgz diskstats.tgz system-resource-info.tgz ${report_file|src/report.json} ${archive_file|src/archive.json}"
    timeout:
      - func: run hang analyzer
  - name: compile_build_tools_next_TG
    tasks:
      - compile_build_tools_next
    max_hosts: 1
    setup_group_can_fail_task: true
    setup_group:
      - command: manifest.load
      - func: git get project
      - func: kill processes
      - func: cleanup environment
      - func: get all modified patch files
      - func: set task expansion macros
      - func: set up venv
      - func: upload pip requirements
      - func: configure evergreen api credentials
      - func: get buildnumber
      - func: set up credentials
      - func: use WiredTiger develop
      - func: set up win mount script
      - func: generate compile expansions
    teardown_group:
      - func: umount shared scons directory
      - func: cleanup environment
    setup_task:
      - func: apply compile expansions
      - func: set task expansion macros
    teardown_task:
      - func: attach scons logs
      - func: attach report
      - func: attach artifacts
      - func: kill processes
      - func: save code coverage data
      - func: save mongo coredumps
      - func: save failed unittests
      - func: save unstripped dbtest
      - func: save hang analyzer debugger files
      - func: save disk statistics
      - func: save system resource information
      - func: save libfuzzertest corpora
      - func: remove files
        vars:
          files: "src/resmoke_error_code src/build/scons/config.log src/*.gcda.gcov src/gcov-intermediate-files.tgz src/*.core src/*.mdmp mongo-coredumps.tgz src/dist-unittests/bin/* src/dist-unittests/lib/* mongo-unittests.tgz src/debugger*.* src/mongo-hanganalyzer.tgz diskstats.tgz system-resource-info.tgz ${report_file|src/report.json} ${archive_file|src/archive.json}"
    timeout:
      - func: run hang analyzer
  - name: libdeps_graph_linting_TG
    tasks:
      - libdeps_graph_linting
    max_hosts: 1
    setup_group_can_fail_task: true
    setup_group:
      - command: manifest.load
      - func: git get project
      - func: kill processes
      - func: cleanup environment
      - func: get all modified patch files
      - func: set task expansion macros
      - func: set up venv
      - func: upload pip requirements
      - func: configure evergreen api credentials
      - func: get buildnumber
      - func: set up credentials
      - func: use WiredTiger develop
      - func: set up win mount script
      - func: generate compile expansions
    teardown_group:
      - func: umount shared scons directory
      - func: cleanup environment
    setup_task:
      - func: apply compile expansions
      - func: set task expansion macros
    teardown_task:
      - func: attach scons logs
      - func: attach report
      - func: attach artifacts
      - func: kill processes
      - func: save code coverage data
      - func: save mongo coredumps
      - func: save failed unittests
      - func: save unstripped dbtest
      - func: save hang analyzer debugger files
      - func: save disk statistics
      - func: save system resource information
      - func: save libfuzzertest corpora
      - func: remove files
        vars:
          files: "src/resmoke_error_code src/build/scons/config.log src/*.gcda.gcov src/gcov-intermediate-files.tgz src/*.core src/*.mdmp mongo-coredumps.tgz src/dist-unittests/bin/* src/dist-unittests/lib/* mongo-unittests.tgz src/debugger*.* src/mongo-hanganalyzer.tgz diskstats.tgz system-resource-info.tgz ${report_file|src/report.json} ${archive_file|src/archive.json}"
    timeout:
      - func: run hang analyzer
  - name: compile_ninja_TG
    tasks:
      - compile_ninja
    max_hosts: 1
    setup_group_can_fail_task: true
    setup_group:
      - command: manifest.load
      - func: git get project
      - func: kill processes
      - func: cleanup environment
      - func: get all modified patch files
      - func: set task expansion macros
      - func: set up venv
      - func: upload pip requirements
      - func: configure evergreen api credentials
      - func: get buildnumber
      - func: set up credentials
      - func: use WiredTiger develop
      - func: set up win mount script
      - func: generate compile expansions
    teardown_group:
      - func: umount shared scons directory
      - func: cleanup environment
    setup_task:
      - func: apply compile expansions
      - func: set task expansion macros
    teardown_task:
      - command: s3.put
        params:
          local_file: src/all.build.ninja
          remote_file: "${project}/${build_variant}/${revision}/artifacts/all.${build_id}.build.ninja"
          aws_key: "${aws_key}"
          aws_secret: "${aws_secret}"
          bucket: mciuploads
          permissions: public-read
          content_type: text/plain
          display_name: build.ninja
          optional: true
    timeout:
      - func: run hang analyzer
  - name: server_discovery_and_monitoring_json_test_TG
    tasks:
      - server_discovery_and_monitoring_json_test
    max_hosts: 1
    setup_group_can_fail_task: true
    setup_group:
      - command: manifest.load
      - func: git get project
      - func: kill processes
      - func: cleanup environment
      - func: get all modified patch files
      - func: set task expansion macros
      - func: set up venv
      - func: upload pip requirements
      - func: configure evergreen api credentials
      - func: get buildnumber
      - func: set up credentials
      - func: use WiredTiger develop
      - func: set up win mount script
      - func: generate compile expansions
    teardown_group:
      - func: umount shared scons directory
      - func: cleanup environment
    setup_task:
      - func: apply compile expansions
      - func: set task expansion macros
    teardown_task:
      - func: attach scons logs
      - func: attach report
      - func: attach artifacts
      - func: kill processes
      - func: save code coverage data
      - func: save mongo coredumps
      - func: save failed unittests
      - func: save unstripped dbtest
      - func: save hang analyzer debugger files
      - func: save disk statistics
      - func: save system resource information
      - func: save libfuzzertest corpora
      - func: remove files
        vars:
          files: "src/resmoke_error_code src/build/scons/config.log src/*.gcda.gcov src/gcov-intermediate-files.tgz src/*.core src/*.mdmp mongo-coredumps.tgz src/dist-unittests/bin/* src/dist-unittests/lib/* mongo-unittests.tgz src/debugger*.* src/mongo-hanganalyzer.tgz diskstats.tgz system-resource-info.tgz ${report_file|src/report.json} ${archive_file|src/archive.json}"
    timeout:
      - func: run hang analyzer
  - name: server_selection_json_test_TG
    tasks:
      - server_selection_json_test
    max_hosts: 1
    setup_group_can_fail_task: true
    setup_group:
      - command: manifest.load
      - func: git get project
      - func: kill processes
      - func: cleanup environment
      - func: get all modified patch files
      - func: set task expansion macros
      - func: set up venv
      - func: upload pip requirements
      - func: configure evergreen api credentials
      - func: get buildnumber
      - func: set up credentials
      - func: use WiredTiger develop
      - func: set up win mount script
      - func: generate compile expansions
    teardown_group:
      - func: umount shared scons directory
      - func: cleanup environment
    setup_task:
      - func: apply compile expansions
      - func: set task expansion macros
    teardown_task:
      - func: attach scons logs
      - func: attach report
      - func: attach artifacts
      - func: kill processes
      - func: save code coverage data
      - func: save mongo coredumps
      - func: save failed unittests
      - func: save unstripped dbtest
      - func: save hang analyzer debugger files
      - func: save disk statistics
      - func: save system resource information
      - func: save libfuzzertest corpora
      - func: remove files
        vars:
          files: "src/resmoke_error_code src/build/scons/config.log src/*.gcda.gcov src/gcov-intermediate-files.tgz src/*.core src/*.mdmp mongo-coredumps.tgz src/dist-unittests/bin/* src/dist-unittests/lib/* mongo-unittests.tgz src/debugger*.* src/mongo-hanganalyzer.tgz diskstats.tgz system-resource-info.tgz ${report_file|src/report.json} ${archive_file|src/archive.json}"
    timeout:
      - func: run hang analyzer
  - name: compile_run_and_archive_dbtest_TG
    tasks:
      - compile_dbtest
      - run_dbtest
      - archive_dbtest
    max_hosts: 1
    setup_group_can_fail_task: true
    setup_group:
      - command: manifest.load
      - func: git get project
      - func: kill processes
      - func: cleanup environment
      - func: get all modified patch files
      - func: set task expansion macros
      - func: set up venv
      - func: upload pip requirements
      - func: configure evergreen api credentials
      - func: get buildnumber
      - func: set up credentials
      - func: use WiredTiger develop
      - func: set up win mount script
      - func: generate compile expansions
    teardown_group:
      - func: umount shared scons directory
      - func: cleanup environment
    setup_task:
      - func: apply compile expansions
      - func: set task expansion macros
    teardown_task:
      - func: attach scons logs
      - func: attach report
      - func: attach artifacts
      - func: kill processes
      - func: save code coverage data
      - func: save mongo coredumps
      - func: save failed unittests
      - func: save unstripped dbtest
      - func: save hang analyzer debugger files
      - func: save disk statistics
      - func: save system resource information
      - func: save libfuzzertest corpora
      - func: remove files
        vars:
          files: "src/resmoke_error_code src/build/scons/config.log src/*.gcda.gcov src/gcov-intermediate-files.tgz src/*.core src/*.mdmp mongo-coredumps.tgz src/dist-unittests/bin/* src/dist-unittests/lib/* mongo-unittests.tgz src/debugger*.* src/mongo-hanganalyzer.tgz diskstats.tgz system-resource-info.tgz ${report_file|src/report.json} ${archive_file|src/archive.json}"
    timeout:
      - func: run hang analyzer
  - name: compile_archive_and_run_libfuzzertests_TG
    tasks:
      - compile_and_archive_libfuzzertests
      - fetch_and_run_libfuzzertests
    max_hosts: 1
    setup_group_can_fail_task: true
    setup_group:
      - command: manifest.load
      - func: git get project
      - func: kill processes
      - func: cleanup environment
      - func: get all modified patch files
      - func: set task expansion macros
      - func: set up venv
      - func: upload pip requirements
      - func: configure evergreen api credentials
      - func: get buildnumber
      - func: set up credentials
      - func: use WiredTiger develop
      - func: set up win mount script
      - func: generate compile expansions
    teardown_group:
      - func: umount shared scons directory
      - func: cleanup environment
    setup_task:
      - func: apply compile expansions
      - func: set task expansion macros
    teardown_task:
      - func: attach scons logs
      - func: attach report
      - func: attach artifacts
      - func: kill processes
      - func: save code coverage data
      - func: save mongo coredumps
      - func: save failed unittests
      - func: save unstripped dbtest
      - func: save hang analyzer debugger files
      - func: save disk statistics
      - func: save system resource information
      - func: save libfuzzertest corpora
      - func: remove files
        vars:
          files: "src/resmoke_error_code src/build/scons/config.log src/*.gcda.gcov src/gcov-intermediate-files.tgz src/*.core src/*.mdmp mongo-coredumps.tgz src/dist-unittests/bin/* src/dist-unittests/lib/* mongo-unittests.tgz src/debugger*.* src/mongo-hanganalyzer.tgz diskstats.tgz system-resource-info.tgz ${report_file|src/report.json} ${archive_file|src/archive.json}"
    timeout:
      - func: run hang analyzer
  - name: compile_test_and_package_serial_TG
    tasks:
      - compile_dist_test
      - archive_dist_test
      - archive_dist_test_debug
      - compile_unittests
      - run_unittests
      - compile_dbtest
      - run_dbtest
      - archive_dbtest
      - compile_all
      - package
    max_hosts: 1
    setup_group_can_fail_task: true
    setup_group:
      - command: manifest.load
      - func: git get project
      - func: kill processes
      - func: cleanup environment
      - func: get all modified patch files
      - func: set task expansion macros
      - func: set up venv
      - func: upload pip requirements
      - func: configure evergreen api credentials
      - func: get buildnumber
      - func: set up credentials
      - func: use WiredTiger develop
      - func: set up win mount script
      - func: generate compile expansions
    teardown_group:
      - func: umount shared scons directory
      - func: cleanup environment
    setup_task:
      - func: apply compile expansions
      - func: set task expansion macros
    teardown_task:
      - func: attach scons logs
      - func: attach report
      - func: attach artifacts
      - func: kill processes
      - func: save code coverage data
      - func: save mongo coredumps
      - func: save failed unittests
      - func: save unstripped dbtest
      - func: save hang analyzer debugger files
      - func: save disk statistics
      - func: save system resource information
      - func: save libfuzzertest corpora
      - func: remove files
        vars:
          files: "src/resmoke_error_code src/build/scons/config.log src/*.gcda.gcov src/gcov-intermediate-files.tgz src/*.core src/*.mdmp mongo-coredumps.tgz src/dist-unittests/bin/* src/dist-unittests/lib/* mongo-unittests.tgz src/debugger*.* src/mongo-hanganalyzer.tgz diskstats.tgz system-resource-info.tgz ${report_file|src/report.json} ${archive_file|src/archive.json}"
    timeout:
      - func: run hang analyzer
  - name: compile_test_and_package_parallel_core_stream_TG
    tasks:
      - compile_dist_test
      - archive_dist_test
      - archive_dist_test_debug
      - compile_all
      - package
    max_hosts: 1
    setup_group_can_fail_task: true
    setup_group:
      - command: manifest.load
      - func: git get project
      - func: kill processes
      - func: cleanup environment
      - func: get all modified patch files
      - func: set task expansion macros
      - func: set up venv
      - func: upload pip requirements
      - func: configure evergreen api credentials
      - func: get buildnumber
      - func: set up credentials
      - func: use WiredTiger develop
      - func: set up win mount script
      - func: generate compile expansions
    teardown_group:
      - func: umount shared scons directory
      - func: cleanup environment
    setup_task:
      - func: apply compile expansions
      - func: set task expansion macros
    teardown_task:
      - func: attach scons logs
      - func: attach report
      - func: attach artifacts
      - func: kill processes
      - func: save code coverage data
      - func: save mongo coredumps
      - func: save failed unittests
      - func: save unstripped dbtest
      - func: save hang analyzer debugger files
      - func: save disk statistics
      - func: save system resource information
      - func: save libfuzzertest corpora
      - func: remove files
        vars:
          files: "src/resmoke_error_code src/build/scons/config.log src/*.gcda.gcov src/gcov-intermediate-files.tgz src/*.core src/*.mdmp mongo-coredumps.tgz src/dist-unittests/bin/* src/dist-unittests/lib/* mongo-unittests.tgz src/debugger*.* src/mongo-hanganalyzer.tgz diskstats.tgz system-resource-info.tgz ${report_file|src/report.json} ${archive_file|src/archive.json}"
    timeout:
      - func: run hang analyzer
  - name: compile_test_and_package_parallel_unittest_stream_TG
    tasks:
      - compile_unittests
      - run_unittests
    max_hosts: 1
    setup_group_can_fail_task: true
    setup_group:
      - command: manifest.load
      - func: git get project
      - func: kill processes
      - func: cleanup environment
      - func: get all modified patch files
      - func: set task expansion macros
      - func: set up venv
      - func: upload pip requirements
      - func: configure evergreen api credentials
      - func: get buildnumber
      - func: set up credentials
      - func: use WiredTiger develop
      - func: set up win mount script
      - func: generate compile expansions
    teardown_group:
      - func: umount shared scons directory
      - func: cleanup environment
    setup_task:
      - func: apply compile expansions
      - func: set task expansion macros
    teardown_task:
      - func: attach scons logs
      - func: attach report
      - func: attach artifacts
      - func: kill processes
      - func: save code coverage data
      - func: save mongo coredumps
      - func: save failed unittests
      - func: save unstripped dbtest
      - func: save hang analyzer debugger files
      - func: save disk statistics
      - func: save system resource information
      - func: save libfuzzertest corpora
      - func: remove files
        vars:
          files: "src/resmoke_error_code src/build/scons/config.log src/*.gcda.gcov src/gcov-intermediate-files.tgz src/*.core src/*.mdmp mongo-coredumps.tgz src/dist-unittests/bin/* src/dist-unittests/lib/* mongo-unittests.tgz src/debugger*.* src/mongo-hanganalyzer.tgz diskstats.tgz system-resource-info.tgz ${report_file|src/report.json} ${archive_file|src/archive.json}"
    timeout:
      - func: run hang analyzer
  - name: compile_test_and_package_parallel_dbtest_stream_TG
    tasks:
      - compile_dbtest
      - run_dbtest
      - archive_dbtest
    max_hosts: 1
    setup_group_can_fail_task: true
    setup_group:
      - command: manifest.load
      - func: git get project
      - func: kill processes
      - func: cleanup environment
      - func: get all modified patch files
      - func: set task expansion macros
      - func: set up venv
      - func: upload pip requirements
      - func: configure evergreen api credentials
      - func: get buildnumber
      - func: set up credentials
      - func: use WiredTiger develop
      - func: set up win mount script
      - func: generate compile expansions
    teardown_group:
      - func: umount shared scons directory
      - func: cleanup environment
    setup_task:
      - func: apply compile expansions
      - func: set task expansion macros
    teardown_task:
      - func: attach scons logs
      - func: attach report
      - func: attach artifacts
      - func: kill processes
      - func: save code coverage data
      - func: save mongo coredumps
      - func: save failed unittests
      - func: save unstripped dbtest
      - func: save hang analyzer debugger files
      - func: save disk statistics
      - func: save system resource information
      - func: save libfuzzertest corpora
      - func: remove files
        vars:
          files: "src/resmoke_error_code src/build/scons/config.log src/*.gcda.gcov src/gcov-intermediate-files.tgz src/*.core src/*.mdmp mongo-coredumps.tgz src/dist-unittests/bin/* src/dist-unittests/lib/* mongo-unittests.tgz src/debugger*.* src/mongo-hanganalyzer.tgz diskstats.tgz system-resource-info.tgz ${report_file|src/report.json} ${archive_file|src/archive.json}"
    timeout:
      - func: run hang analyzer
  - name: clang_tidy_TG
    tasks:
      - clang_tidy
    setup_group_can_fail_task: true
    setup_group:
      - command: manifest.load
      - func: git get project
      - func: kill processes
      - func: cleanup environment
      - func: set task expansion macros
      - func: set up venv
      - func: configure evergreen api credentials
      - func: get buildnumber
      - func: set up credentials
      - func: set up win mount script
      - func: generate compile expansions
    teardown_group:
      - func: umount shared scons directory
      - func: cleanup environment
    setup_task:
      - func: apply compile expansions
      - func: set task expansion macros
  - name: visibility_test_TG
    tasks:
      - compile_visibility_test
    max_hosts: 1
    setup_group_can_fail_task: true
    setup_group:
      - command: manifest.load
      - func: git get project
      - func: get buildnumber
      - func: set up credentials
      - func: set task expansion macros
      - func: set up venv
      - func: upload pip requirements
      - func: set up win mount script
      - func: generate compile expansions
    teardown_group:
      - func: umount shared scons directory
    setup_task:
      - func: set task expansion macros
      - func: apply compile expansions
    teardown_task:
      - func: attach scons logs
  - name: embedded_sdk_build_and_test
    tasks:
      - embedded_sdk_build_cdriver
      - embedded_sdk_install_dev
      - embedded_sdk_s3_put
      - embedded_sdk_install_tests
      - embedded_sdk_tests_s3_put
      - embedded_sdk_run_tests
      - embedded_sdk_s3_put_latest
      - embedded_sdk_tests_s3_put_latest
    max_hosts: 1
    setup_group_can_fail_task: true
    setup_group:
      - command: manifest.load
      - func: git get project
      - func: get buildnumber
      - func: set up credentials
      - func: set task expansion macros
      - func: set up venv
      - func: upload pip requirements
      - func: set up win mount script
      - func: generate compile expansions
    teardown_group:
      - func: umount shared scons directory
    setup_task:
      - func: set task expansion macros
      - func: apply compile expansions
    teardown_task:
      - func: attach scons logs
  - name: stitch_support_lib_build_and_archive
    tasks:
      - stitch_support_create_lib
    setup_group_can_fail_task: true
    setup_group:
      - command: manifest.load
      - func: git get project
      - func: kill processes
      - func: cleanup environment
      - func: set task expansion macros
      - func: set up venv
      - func: upload pip requirements
      - func: get buildnumber
      - func: set up win mount script
      - func: generate compile expansions
    teardown_group:
      - func: umount shared scons directory
    setup_task:
      - func: apply compile expansions
      - func: set task expansion macros
    teardown_task:
      - func: attach scons logs
    tags:
      - stitch
  - name: stitch_support_lib_build_and_test
    tasks:
      - stitch_support_install_tests
      - stitch_support_run_tests
    max_hosts: 1
    setup_group_can_fail_task: true
    setup_group:
      - command: manifest.load
      - func: git get project
      - func: kill processes
      - func: cleanup environment
      - func: set task expansion macros
      - func: set up venv
      - func: upload pip requirements
      - func: get buildnumber
      - func: set up win mount script
      - func: generate compile expansions
    teardown_group:
      - func: umount shared scons directory
    setup_task:
      - func: apply compile expansions
      - func: set task expansion macros
    teardown_task:
      - func: attach scons logs
    tags:
      - stitch
functions:
  run kitchen:
    command: shell.exec
    params:
      script: "set -o errexit\n\nexport KITCHEN_ARTIFACTS_URL=\"https://s3.amazonaws.com/mciuploads/${project}/${build_variant}/${revision}/artifacts/${build_id}-packages.tgz\"\nexport KITCHEN_SECURITY_GROUP=\"${kitchen_security_group}\"\nexport KITCHEN_SSH_KEY_ID=\"${kitchen_ssh_key_id}\"\nexport KITCHEN_SUBNET=\"${kitchen_subnet}\"\nexport KITCHEN_VPC=\"${kitchen_vpc}\"\n\nif [[ \"${packager_arch}\" == \"aarch64\" || \"${packager_arch}\" == \"arm64\" ]]; then\n  kitchen_packager_distro=\"${packager_distro}-arm64\"\nelse\n  kitchen_packager_distro=\"${packager_distro}-x86-64\"\nfi\n\n${activate_virtualenv}\n# set expiration tag 2 hours in the future, since no test should take this long\nexport KITCHEN_EXPIRE=\"$($python -c 'import datetime; print((datetime.datetime.utcnow() + datetime.timedelta(hours=2)).strftime(\"%Y-%m-%d %H:%M:%S\"))')\"\n\nfor i in {1..3}\ndo\n  if ! kitchen verify $kitchen_packager_distro; then\n    verified=\"false\"\n    kitchen destroy $kitchen_packager_distro || true\n    sleep 30\n  else\n    verified=\"true\"\n    break\n  fi\ndone\n\nkitchen destroy $kitchen_packager_distro || true\ntest \"$verified\" = \"true\"\n"
      working_dir: src/buildscripts/package_test
      shell: bash
    type: test
  archive jepsen results:
    command: s3.put
    params:
      local_file: src/jepsen-results.tgz
      remote_file: "${project}/${build_variant}/${revision}/jepsen/jepsen-results-${task_id}-${execution}.tgz"
      aws_key: "${aws_key}"
      aws_secret: "${aws_secret}"
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: "Jepsen Test Results - ${execution}"
      optional: true
  do watchdog setup:
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/do_watchdog_setup.sh"
  save unstripped dbtest:
    - command: s3.put
      params:
        local_file: dbtest-binary.tgz
        remote_file: "${project}/${build_variant}/${revision}/dbtest/dbtest-${build_id}-${task_name}-${execution}.tgz"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/tar
        display_name: "dbtest binary - Execution ${execution}"
        optional: true
    - command: s3.put
      params:
        local_file: dbtest-debugsymbols.tgz
        remote_file: "${project}/${build_variant}/${revision}/dbtest/dbtest-${build_id}-${task_name}-${execution}.tgz"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/tar
        display_name: dbtest debugsymbols
        optional: true
  fetch packages:
    command: s3.get
    params:
      local_file: ~
      extract_to: src
      remote_file: "${project}/${build_variant}/${revision}/artifacts/${build_id}-packages.tgz"
      aws_key: "${aws_key}"
      aws_secret: "${aws_secret}"
      bucket: mciuploads
      build_variants:
        - amazon
        - enterprise-linux-64-amazon-ami
        - amazon2
        - enterprise-amazon2
        - enterprise-amazon2-arm64
        - debian10
        - enterprise-debian10-64
        - debian92
        - enterprise-debian92-64
        - rhel-67-s390x
        - enterprise-rhel-67-s390x
        - rhel70
        - rhel76_compile_rhel70
        - enterprise-rhel-70-64-bit
        - rhel-72-s390x
        - enterprise-rhel-71-ppc64le
        - enterprise-rhel-81-ppc64le
        - enterprise-rhel-72-s390x
        - ubi8
        - rhel80
        - rhel-82-arm64
        - enterprise-rhel-80-64-bit
        - enterprise-rhel-80-64-bit-coverage
        - enterprise-rhel-80-64-bit-suggested
        - enterprise-rhel-82-arm64
        - suse12
        - suse12-s390x
        - enterprise-suse12-64
        - enterprise-suse12-s390x
        - suse15
        - enterprise-suse15-64
        - ubuntu1804-debug-suggested
        - enterprise-ubuntu-dynamic-1804-clang-tidy-required
        - ubuntu1804
        - ubuntu1804-arm64
        - ubuntu2004-arm64
        - ubuntu1804-s390x
        - ubuntu2004
        - enterprise-ubuntu1804-64
        - enterprise-ubuntu1804-arm64
        - enterprise-ubuntu2004-arm64
        - enterprise-ubuntu1804-ppc64le
        - enterprise-ubuntu1804-s390x
        - enterprise-ubuntu2004-64
        - enterprise-windows
        - enterprise-windows-suggested
        - windows
  attach report:
    command: attach.results
    params:
      file_location: "${report_file|src/report.json}"
  check binary version:
    command: shell.exec
    params:
      script: "set -o errexit\nmongo_binary=dist-test/bin/mongo${exe}\n${activate_virtualenv}\nbin_ver=$($python -c \"import yaml; print(yaml.safe_load(open('compile_expansions.yml'))['version']);\" | tr -d '[ \\r\\n]')\n# Due to SERVER-23810, we cannot use $mongo_binary --quiet --nodb --eval \"version();\"\nmongo_ver=$($mongo_binary --version | perl -pe '/version v([^\\\"]*)/; $_ = $1;' | tr -d '[ \\r\\n]')\n# The versions must match\nif [ \"$bin_ver\" != \"$mongo_ver\" ]; then\n  echo \"The mongo version is $mongo_ver, expected version is $bin_ver\"\n  exit 1\nfi\n"
      working_dir: src
      shell: bash
  tar UndoDB recordings:
    command: archive.targz_pack
    params:
      target: undodb-recordings.tgz
      source_dir: src
      include:
        - "./*.undo"
  tar mongo coredumps:
    command: archive.targz_pack
    params:
      target: mongo-coredumps.tgz
      source_dir: src
      include:
        - "./**.core"
        - "./**.mdmp"
  archive mongo coredumps:
    command: s3.put
    params:
      local_file: mongo-coredumps.tgz
      remote_file: "${project}/${build_variant}/${revision}/coredumps/mongo-coredumps-${build_id}-${task_name}-${execution}.tgz"
      aws_key: "${aws_key}"
      aws_secret: "${aws_secret}"
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: "Core Dumps - Execution ${execution}"
      optional: true
  set up credentials:
    command: shell.exec
    params:
      script: "cat > mci.buildlogger <<END_OF_CREDS\nslavename='${slave}'\npasswd='${passwd}'\nbuilder='MCI_${build_variant}'\nbuild_num=${builder_num}\nbuild_phase='${task_name}_${execution}'\nEND_OF_CREDS\n"
      working_dir: src
      silent: true
      shell: bash
  archive jepsen logs:
    command: s3.put
    params:
      local_file: src/jepsen-mongod-logs.tgz
      remote_file: "${project}/${build_variant}/${revision}/jepsen/jepsen-mongod-logs-${task_id}-${execution}.tgz"
      aws_key: "${aws_key}"
      aws_secret: "${aws_secret}"
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: "Jepsen mongod Logs - ${execution}"
      optional: true
  burn_in_burn_in_multiversion_tests:
    - command: shell.exec
      params:
        script: "# exit immediately if virtualenv is not found\nset -o errexit\n\npython_loc=$(which ${python|/opt/mongodbtoolchain/v3/bin/python3})\nvenv_dir=\"${workdir}/venv\"\n\"$python_loc\" -m venv --system-site-packages \"$venv_dir\"\n\n# venv creates its Scripts/activate file with CLRF endings, which\n# cygwin bash does not like. dos2unix it\n# (See https://bugs.python.org/issue32451)\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  dos2unix \"${workdir}/venv/Scripts/activate\"\nfi\n\nexport VIRTUAL_ENV_DISABLE_PROMPT=yes\n\n# Not all git get project calls clone into ${workdir}/src so we allow\n# callers to tell us where the pip requirements files are.\npip_dir=\"${pip_dir}\"\nif [[ -z $pip_dir ]]; then\n  # Default to most common location\n  pip_dir=\"${workdir}/src/etc/pip\"\nfi\n\n# Same as above we have to use quotes to preserve the\n# Windows path separator\ntoolchain_txt=\"$pip_dir/toolchain-requirements.txt\"\n${activate_virtualenv}\necho \"Upgrading pip to 21.0.1\"\npython -m pip install \"pip==21.0.1\"\npython -m pip install -r \"$toolchain_txt\" -q\npython -m pip freeze > pip-requirements.txt\n"
        shell: bash
    - command: s3.put
      params:
        local_file: pip-requirements.txt
        remote_file: "${project}/${build_variant}/${revision}/pip-requirements-${task_id}-${execution}.txt"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: atext-plain
        display_name: Pip Requirements
    - command: shell.exec
      params:
        script: "# Create the Evergreen API credentials\ncat > .evergreen.yml <<END_OF_CREDS\napi_server_host: https://evergreen.mongodb.com/api\napi_key: \"${evergreen_api_key}\"\nuser: \"${evergreen_api_user}\"\nEND_OF_CREDS\n"
        working_dir: src
        silent: true
        shell: bash
      type: test
    - command: shell.exec
      params:
        script: "set -o errexit\nset -o verbose\n\n${activate_virtualenv}\n\nrm -rf /data/install /data/multiversion\n\nedition=\"${multiversion_edition|base}\"\nplatform=\"${multiversion_platform|linux_x86_64}\"\narchitecture=\"${multiversion_architecture|x86_64}\"\n\n$python buildscripts/resmoke.py setup-multiversion   \\\n  --installDir /data/install                         \\\n  --linkDir /data/multiversion                       \\\n  --edition $edition                                 \\\n  --platform $platform                               \\\n  --architecture $architecture                       \\\n  --githubOauthToken \"${github_token}\"               \\\n  --useLatest 3.6 4.0\n\n# The platform and architecture for how some of the binaries are reported in\n# https://downloads.mongodb.org/full.json changed between MongoDB 4.0 and MongoDB 4.2.\n# Certain build variants define additional multiversion_*_42_or_later expansions in order to\n# be able to fetch a complete set of versions.\n\nif [ ! -z \"${multiversion_edition_42_or_later}\" ]; then\n  edition=\"${multiversion_edition_42_or_later}\"\nfi\n\nif [ ! -z \"${multiversion_platform_42_or_later}\" ]; then\n  platform=\"${multiversion_platform_42_or_later}\"\nfi\n\nif [ ! -z \"${multiversion_architecture_42_or_later}\" ]; then\n  architecture=\"${multiversion_architecture_42_or_later}\"\nfi\n\n$python buildscripts/resmoke.py setup-multiversion   \\\n  --installDir /data/install                         \\\n  --linkDir /data/multiversion                       \\\n  --edition $edition                                 \\\n  --platform $platform                               \\\n  --architecture $architecture                       \\\n  --githubOauthToken \"${github_token}\"               \\\n  --useLatest 4.2 4.2.1\n\n# The platform and architecture for how some of the binaries are reported in\n# https://downloads.mongodb.org/full.json changed between MongoDB 4.2 and MongoDB 4.4.\n# Certain build variants define additional multiversion_*_44_or_later expansions in order to\n# be able to fetch a complete set of versions.\n\nif [ ! -z \"${multiversion_edition_44_or_later}\" ]; then\n  edition=\"${multiversion_edition_44_or_later}\"\nfi\n\nif [ ! -z \"${multiversion_platform_44_or_later}\" ]; then\n  platform=\"${multiversion_platform_44_or_later}\"\nfi\n\nif [ ! -z \"${multiversion_architecture_44_or_later}\" ]; then\n  architecture=\"${multiversion_architecture_44_or_later}\"\nfi\n\n$python buildscripts/resmoke.py setup-multiversion   \\\n  --installDir /data/install                         \\\n  --linkDir /data/multiversion                       \\\n  --edition $edition                                 \\\n  --platform $platform                               \\\n  --architecture $architecture                       \\\n  --githubOauthToken \"${github_token}\"               \\\n  --useLatest 4.4 4.7 4.8 4.9\n\n# This is primarily for tests for infrastructure which don't always need the latest\n# binaries.\nif [ ! -z \"${install_master_bin}\" ]; then\n  $python buildscripts/resmoke.py setup-multiversion   \\\n    --installDir /data/install                         \\\n    --linkDir /data/multiversion                       \\\n    --edition $edition                                 \\\n    --platform $platform                               \\\n    --architecture $architecture                       \\\n    --githubOauthToken \"${github_token}\"               \\\n    --useLatest master\nfi\n"
        working_dir: src
        shell: bash
    - command: expansions.write
      params:
        file: expansions.yml
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - src/evergreen/burn_in_tests_multiversion.sh
        env:
          workdir: "${workdir}"
          python: "${python}"
      type: test
    - command: archive.targz_pack
      params:
        target: src/burn_in_tests_multiversion_gen.tgz
        source_dir: src
        include:
          - burn_in_tests_multiversion_gen.json
    - command: archive.targz_pack
      params:
        target: generate_tasks_config.tgz
        source_dir: src/generated_resmoke_config
        include:
          - "*"
    - command: s3.put
      params:
        local_file: generate_tasks_config.tgz
        remote_file: "${project}/${build_variant}/${revision}/generate_tasks/burn_in_tests_multiversion_gen-${build_id}.tgz"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/gzip
        display_name: "Generated Multiversion Resmoke.py Suite Config - Execution ${execution}"
        optional: true
    - command: s3.put
      params:
        local_file: src/burn_in_tests_multiversion_gen.tgz
        remote_file: "${project}/${build_variant}/${revision}/generate_tasks/burn_in_tests_multiversion_gen_config-${build_id}.tgz"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/gzip
        display_name: "Burn_in_tests Task Config - Execution ${execution}"
    - command: generate.tasks
      params:
        files:
          - src/burn_in_tests_multiversion_gen.json
  archive code coverage data:
    command: s3.put
    params:
      local_file: src/gcov-intermediate-files.tgz
      remote_file: "${project}/${build_variant}/${revision}/gcov/gcov-intermediate-files-${task_id}-${execution}.tgz"
      aws_key: "${aws_key}"
      aws_secret: "${aws_secret}"
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: "gcov intermediate files - Execution ${execution}"
      optional: true
  save UndoDB recordings:
    - command: archive.targz_pack
      params:
        target: undodb-recordings.tgz
        source_dir: src
        include:
          - "./*.undo"
    - command: s3.put
      params:
        local_file: undodb-recordings.tgz
        remote_file: "${project}/${build_variant}/${revision}/undo/undodb-recordings-${task_id}-execution-${execution}.tgz"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/gzip
        display_name: "UndoDB Recordings - Execution ${execution}"
        optional: true
  determine resmoke jobs:
    command: shell.exec
    params:
      script: "set -o verbose\nset -o errexit\n\n${activate_virtualenv}\n$python buildscripts/evergreen_resmoke_job_count.py \\\n  --taskName ${task_name}                           \\\n  --buildVariant ${build_variant}                   \\\n  --distro ${distro_id}                             \\\n  --jobFactor ${resmoke_jobs_factor|1}              \\\n  --jobsMax ${resmoke_jobs_max|0}                   \\\n  --outFile resmoke_jobs_expansion.yml\n"
      working_dir: src
      shell: bash
  save local client logs:
    - command: shell.exec
      params:
        script: "client_logs=$(ls crud*.log fsm*.log 2> /dev/null)\nif [ ! -z \"$client_logs\" ]; then\n  ${tar|tar} czf client-logs.tgz $client_logs\nfi\n"
        working_dir: src
        shell: bash
    - command: s3.put
      params:
        local_file: src/client-logs.tgz
        remote_file: "${project}/${build_variant}/${revision}/client_logs/mongo-client-logs-${task_id}-${execution}.tgz"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: "${content_type|application/gzip}"
        display_name: "Client logs - Execution ${execution}"
        optional: true
  use WiredTiger develop:
    command: shell.exec
    params:
      script: "set -o errexit\nset -o verbose\nif [ \"${use_wt_develop|}\" = \"true\" ]; then\ncd src/third_party\nfor wtdir in dist examples ext lang src test tools ; do\n  rm -rf wiredtiger/$wtdir\n  mv wtdevelop/$wtdir wiredtiger/\ndone\nfi\n"
      working_dir: src
      shell: bash
  set up EC2 instance:
    - command: expansions.write
      params:
        file: src/expansions.yml
    - command: host.create
      params:
        distro: "${distro_id}"
        provider: ec2
        security_group_ids:
          - sg-097bff6dd0d1d31d0
    - command: host.list
      params:
        num_hosts: 1
        path: src/hosts.yml
        timeout_seconds: 3000
        wait: true
    - command: shell.exec
      params:
        script: "if [ \"Windows_NT\" = \"$OS\" ]; then\n  user=Administrator\nelse\n  user=$USER\nfi\nhostname=$(tr -d '\"[]{}' < src/hosts.yml | cut -d , -f 1 | awk -F : '{print $2}')\n\n# To add the hostname to expansions.\necho \"private_ip_address: $hostname\" >> src/powercycle_ip_address.yml\n\necho $hostname\necho $user\n\nattempts=0\nconnection_attempts=${connection_attempts|60}\n\n# Check for remote connectivity\nwhile ! ssh \\\n  -i ${private_key_file} \\\n  -o ConnectTimeout=10 \\\n  -o ForwardAgent=yes \\\n  -o IdentitiesOnly=yes \\\n  -o StrictHostKeyChecking=no \\\n  \"$(printf \"%s@%s\" \"$user\" \"$hostname\")\" \\\n  exit 2> /dev/null\ndo\n  [ \"$attempts\" -ge \"$connection_attempts\" ] && exit 1\n  ((attempts++))\n  printf \"SSH connection attempt %d/%d failed. Retrying...\\n\" \"$attempts\" \"$connection_attempts\"\n  # sleep for Permission denied (publickey) errors\n  sleep 10\ndone\n"
        shell: bash
    - command: expansions.update
      params:
        file: src/powercycle_ip_address.yml
    - command: expansions.write
      params:
        file: src/expansions.yml
    - command: shell.exec
      params:
        script: "set -o verbose\nset -o errexit\n\n${activate_virtualenv}\n$python buildscripts/resmoke.py powercycle setup-host\n"
        working_dir: src
        shell: bash
  call BF Suggestion service:
    command: shell.exec
    params:
      script: "report_file=\"report.json\"\n# Check if the report file exists and has failures.\nif [ -f $report_file ] && grep -Eq \"\\\"failures\\\": [1-9]\" $report_file; then\n  # Calling the BF Suggestion server endpoint to start feature extraction.\n  payload=\"{\\\"task_id\\\": \\\"${task_id}\\\", \\\"execution\\\": ${execution}}\"\n  echo \"Sending task info to the BF suggestion service\"\n  # The --user option is passed through stdin to avoid showing in process list.\n  user_option=\"--user ${bfsuggestion_user}:${bfsuggestion_password}\"\n  curl --header \"Content-Type: application/json\" \\\n       --data \"$payload\" \\\n       --max-time 10 \\\n       --silent \\\n       --show-error \\\n       --config - \\\n       https://bfsuggestion.corp.mongodb.com/tasks <<< $user_option\n  echo \"Request to BF Suggestion service status: $?\"\nfi\n"
      working_dir: src
      silent: true
      shell: bash
  scons compile:
    - command: expansions.write
      params:
        file: expansions.yml
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - src/evergreen/scons_compile.sh
        env:
          workdir: "${workdir}"
          python: "${python}"
          patch_compile_flags: "${patch_compile_flags}"
      type: test
  cleanup environment:
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/cleanup_environment.sh"
  move multiversion binaries:
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/move_multiversion_binaries.sh"
  fetch dist tarball:
    command: s3.get
    params:
      local_file: src/mongo-binaries.tgz
      extract_to: ~
      remote_file: "${project}/${build_variant}/${revision}/dist/mongo-${build_id}.${ext|tgz}"
      aws_key: "${aws_key}"
      aws_secret: "${aws_secret}"
      bucket: mciuploads
  extract generated test configuration:
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/extract_generated_test_configuration.sh"
    type: test
  lint fuzzer sanity patch:
    - command: shell.exec
      params:
        script: "set -eo pipefail\nset -o verbose\n\n${add_nodejs_to_path}\n\n# Run parse-jsfiles on 50 files at a time with 32 processes in parallel.\n# Grep returns 1 if it fails to find a match.\n(grep \"\\.js$\" modified_and_created_patch_files.txt || true) | xargs -P 32 -L 50 npm run --prefix jstestfuzz parse-jsfiles --\n"
        working_dir: src
        shell: bash
      type: test
  save ec2 task artifacts:
    - command: shell.exec
      params:
        script: "set -o verbose\n\nif [ ! -f powercycle_ip_address.yml ]; then\n  exit 0\nfi\n\n${activate_virtualenv}\n$python buildscripts/resmoke.py powercycle save-diagnostics\n"
        working_dir: src
        shell: bash
    - command: s3.put
      params:
        local_file: src/ec2_artifacts.tgz
        remote_file: "${project}/${build_variant}/${revision}/remote_ec2/remote_ec2_artifacts-${task_id}-${execution}.tgz"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: "${content_type|application/gzip}"
        display_name: "Remote EC2 Artifacts - Execution ${execution}"
        optional: true
    - command: s3.put
      params:
        local_file: src/ec2_monitor_files.tgz
        remote_file: "${project}/${build_variant}/${revision}/remote_ec2/remote_ec2_monitor-${task_id}-${execution}.tgz"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: "${content_type|application/gzip}"
        display_name: "Remote EC2 Monitor - Execution ${execution}"
        optional: true
  archive dbtest debugsymbols:
    command: s3.put
    params:
      local_file: dbtest-debugsymbols.tgz
      remote_file: "${project}/${build_variant}/${revision}/dbtest/dbtest-${build_id}-${task_name}-${execution}.tgz"
      aws_key: "${aws_key}"
      aws_secret: "${aws_secret}"
      bucket: mciuploads
      permissions: public-read
      content_type: application/tar
      display_name: dbtest debugsymbols
      optional: true
  set up venv:
    command: shell.exec
    params:
      script: "# exit immediately if virtualenv is not found\nset -o errexit\n\npython_loc=$(which ${python|/opt/mongodbtoolchain/v3/bin/python3})\nvenv_dir=\"${workdir}/venv\"\n\"$python_loc\" -m venv --system-site-packages \"$venv_dir\"\n\n# venv creates its Scripts/activate file with CLRF endings, which\n# cygwin bash does not like. dos2unix it\n# (See https://bugs.python.org/issue32451)\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  dos2unix \"${workdir}/venv/Scripts/activate\"\nfi\n\nexport VIRTUAL_ENV_DISABLE_PROMPT=yes\n\n# Not all git get project calls clone into ${workdir}/src so we allow\n# callers to tell us where the pip requirements files are.\npip_dir=\"${pip_dir}\"\nif [[ -z $pip_dir ]]; then\n  # Default to most common location\n  pip_dir=\"${workdir}/src/etc/pip\"\nfi\n\n# Same as above we have to use quotes to preserve the\n# Windows path separator\ntoolchain_txt=\"$pip_dir/toolchain-requirements.txt\"\n${activate_virtualenv}\necho \"Upgrading pip to 21.0.1\"\npython -m pip install \"pip==21.0.1\"\npython -m pip install -r \"$toolchain_txt\" -q\npython -m pip freeze > pip-requirements.txt\n"
      shell: bash
  set up remote credentials:
    command: shell.exec
    params:
      script: "set -o errexit\n\n# Since the macros 'private_key_remote' and 'private_key_file' are not always defined\n# we default to /dev/null to avoid syntax errors of an empty expansion.\nif [ ! -z \"${private_key_remote}\" ] && [ ! -z \"${private_key_file}\" ] ; then\n  mkdir -p ~/.ssh\n  echo -n \"${private_key_remote}\" > ${private_key_file|/dev/null}\n  chmod 0600 ${private_key_file|/dev/null}\nfi\n\n# Ensure a clean aws configuration state\nrm -rf ~/.aws\nmkdir -p ~/.aws\n\n# If ${aws_profile_remote} is not specified then the config & credentials are\n# stored in the 'default' profile.\naws_profile=\"${aws_profile_remote|default}\"\n\n# The profile in the config file is specified as [profile <profile>], except\n# for [default], see http://boto3.readthedocs.io/en/latest/guide/configuration.html\nif [ $aws_profile = \"default\" ] ; then\n  aws_profile_config=\"[default]\"\nelse\n  aws_profile_config=\"[profile $aws_profile]\"\nfi\ncat <<EOF >> ~/.aws/config\n$aws_profile_config\nregion = us-east-1\nEOF\n\n# The profile in the credentials file is specified as [<profile>].\ncat <<EOF >> ~/.aws/credentials\n[$aws_profile]\naws_access_key_id = ${aws_key_remote}\naws_secret_access_key = ${aws_secret_remote}\nEOF\n\ncat <<EOF > ~/.boto\n[Boto]\nhttps_validate_certificates = False\nEOF\n"
      silent: true
      shell: bash
  fetch debugsymbols archive:
    command: s3.get
    params:
      local_file: src/mongo-debugsymbols.tgz
      extract_to: ~
      remote_file: "${mongo_debugsymbols}"
      aws_key: "${aws_key}"
      aws_secret: "${aws_secret}"
      bucket: mciuploads
  archive hang analyzer debugger files:
    command: s3.put
    params:
      local_file: src/mongo-hanganalyzer.tgz
      remote_file: "${project}/${build_variant}/${revision}/hanganalyzer/mongo-hanganalyzer-${build_id}-${task_name}-${execution}.tgz"
      aws_key: "${aws_key}"
      aws_secret: "${aws_secret}"
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: "Hang Analyzer Output - Execution ${execution}"
      optional: true
  save failed unittests:
    - command: shell.exec
      params:
        script: "set -eou pipefail\n\n# Only run on unit test tasks so we don't target mongod binaries from cores.\nif [ \"${task_name}\" != \"run_unittests\" ] && [ \"${task_name}\" != \"run_dbtest\" ]; then\n    exit 0\nfi\n\nunittest_bin_dir=dist-unittests/bin\nmkdir -p $unittest_bin_dir || true\n\n# Find all core files\ncore_files=$(/usr/bin/find -H . \\( -name \"dump_*.core\" -o -name \"*.mdmp\" \\) 2> /dev/null)\nfor core_file in $core_files\ndo\n  # A core file name does not always have the executable name that generated it.\n  # See http://stackoverflow.com/questions/34801353/core-dump-filename-gets-thread-name-instead-of-executable-name-with-core-pattern\n  # On platforms with GDB, we get the binary name from core file\n  gdb=/opt/mongodbtoolchain/gdb/bin/gdb\n  if [ -f $gdb ]; then\n    binary_file=$($gdb -batch --quiet -ex \"core $core_file\" 2> /dev/null | grep \"Core was generated\" | cut -f2 -d \"\\`\" | cut -f1 -d \"'\" | cut -f1 -d \" \")\n    binary_file_locations=$binary_file\n  else\n    # Find the base file name from the core file name, note it may be truncated.\n    # Remove leading 'dump_' and trailing '.<pid>.core' or '.<pid or time>.mdmp'\n    binary_file=$(echo \"$core_file\" | sed \"s/.*\\///;s/dump_//;s/\\..*\\.core//;s/\\..*\\.mdmp//\")\n    # Locate the binary file. Since the base file name might be truncated, the find\n    # may return more than 1 file.\n    binary_file_locations=$(/usr/bin/find -H . -executable -name \"$binary_file*${exe}\" 2> /dev/null)\n  fi\n  if [ -z \"$binary_file_locations\" ]; then\n    echo \"Cannot locate the unittest binary file ($binary_file) that generated the core file $core_file\"\n  fi\n  for binary_file_location in $binary_file_locations\n  do\n    new_binary_file=$unittest_bin_dir/$(echo \"$binary_file_location\" | sed \"s/.*\\///\")\n    if [ -f \"$binary_file_location\" ] && [ ! -f \"$new_binary_file\" ]; then\n      cp \"$binary_file_location\" \"$new_binary_file\"\n    fi\n\n    # On Windows if a .pdb symbol file exists, include it in the archive.\n    pdb_file=$(echo \"$binary_file_location\" | sed \"s/\\.exe/.pdb/\")\n    if [ -f \"$pdb_file\" ]; then\n      new_pdb_file=$unittest_bin_dir/$(echo \"$pdb_file\" | sed \"s/.*\\///\")\n      cp \"$pdb_file\" \"$new_pdb_file\"\n    fi\n\n    # On binutils platforms, if a .debug symbol file exists, include it\n    # in the archive\n    debug_file=$binary_file_location.debug\n    if [ -f \"$debug_file\" ]; then\n      cp \"$debug_file\" \"$unittest_bin_dir\"\n    fi\n\n    # On macOS, these are called .dSYM and they are directories\n    dsym_dir=$binary_file_location.dSYM\n    if [ -d \"$dsym_dir\" ]; then\n      cp -r \"$dsym_dir\" \"$unittest_bin_dir\"\n    fi\n\n  done\ndone\n\n# Copy debug symbols for dynamic builds\nlib_dir=build/install/lib\nif [ -d \"$lib_dir\" ] && [[ -n \"$core_files\" ]]; then\n  cp -r \"$lib_dir\" dist-unittests\nfi\n"
        working_dir: src
        shell: bash
    - command: archive.targz_pack
      params:
        target: mongo-unittests.tgz
        source_dir: src/dist-unittests
        include:
          - "**"
    - command: s3.put
      params:
        local_file: mongo-unittests.tgz
        remote_file: "${project}/${build_variant}/${revision}/unittests/mongo-unittests-${build_id}-${task_name}-${execution}.tgz"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/gzip
        display_name: "Unit tests - Execution ${execution}"
        optional: true
  archive UndoDB recordings:
    command: s3.put
    params:
      local_file: undodb-recordings.tgz
      remote_file: "${project}/${build_variant}/${revision}/undo/undodb-recordings-${task_id}-execution-${execution}.tgz"
      aws_key: "${aws_key}"
      aws_secret: "${aws_secret}"
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: "UndoDB Recordings - Execution ${execution}"
      optional: true
  generate compile expansions:
    command: shell.exec
    params:
      script: "set -o errexit\nset -o verbose\n\n# We get the raw version string (r1.2.3-45-gabcdef) from git\nMONGO_VERSION=$(git describe --abbrev=7)\n# If this is a patch build, we add the patch version id to the version string so we know\n# this build was a patch, and which evergreen task it came from\nif [ \"${is_patch}\" = \"true\" ]; then\n  MONGO_VERSION=\"$MONGO_VERSION-patch-${version_id}\"\nfi\n\necho \"MONGO_VERSION = ${MONGO_VERSION}\"\n\n${activate_virtualenv}\n\n# shared scons cache testing\n# if 'scons_cache_scope' enabled and project level 'disable_shared_scons_cache' is not true\n# 'scons_cache_scope' is set on a per variant basis\n# 'disable_shared_scons_cache' is set on a project level and applies to all variants\n\n# Shared - if scons_cache_scope is set, then use new shared scons cache settings\nif [ ! -z ${scons_cache_scope} ]; then\n\n  if [ \"${disable_shared_scons_cache}\" = \"true\" ]; then\n\n    echo \"SCons Cache disabled. All shared scons settings will be ignored\"\n    scons_cache_scope=none\n\n  else\n    scons_cache_scope=${scons_cache_scope}\n  fi\n\n  if [ \"$scons_cache_scope\" = \"shared\" ]; then\n    set +o errexit\n    if [ \"Windows_NT\" = \"$OS\" ]; then\n      ./win_mount.sh\n    else\n      mount | grep \"\\/efs\" > /dev/null\n      if [ $? -eq 0 ]; then\n        echo \"Shared cache is already mounted\"\n      else\n        echo \"Shared cache - mounting file system\"\n        ${set_sudo}\n        $sudo mount /efs\n      fi\n    fi\n    set -o errexit\n  fi\n\n  echo \"Shared Cache with setting: ${scons_cache_scope}\"\n  MONGO_VERSION=$MONGO_VERSION SCONS_CACHE_MODE=${scons_cache_mode|nolinked} SCONS_CACHE_SCOPE=$scons_cache_scope IS_PATCH=${is_patch} IS_COMMIT_QUEUE=${is_commit_queue|false} $python buildscripts/generate_compile_expansions_shared_cache.py --out compile_expansions.yml\n\n# Legacy Expansion generation\nelse\n  echo \"Using legacy expansion generation\"\n  # Proceed with regular expansions generated\n  # This script converts the generated version string into a sanitized version string for\n  # use by scons and uploading artifacts as well as information about for the scons cache.\n  MONGO_VERSION=$MONGO_VERSION SCONS_CACHE_MODE=${scons_cache_mode|nolinked} USE_SCONS_CACHE=${use_scons_cache|false} $python buildscripts/generate_compile_expansions.py --out compile_expansions.yml\nfi\n"
      working_dir: src
      shell: bash
  run generated tests:
    - command: s3.get
      params:
        local_file: generate_tasks_config.tgz
        extract_to: ~
        remote_file: "${project}/${build_variant}/${revision}/generate_tasks/${task}_gen-${build_id}.tgz"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/extract_generated_test_configuration.sh"
      type: test
    - command: expansions.update
      params:
        updates:
          - key: aws_key_remote
            value: "${mongodatafiles_aws_key}"
          - key: aws_profile_remote
            value: mongodata_aws
          - key: aws_secret_remote
            value: "${mongodatafiles_aws_secret}"
    - command: shell.exec
      params:
        script: "set -o errexit\n\n# Since the macros 'private_key_remote' and 'private_key_file' are not always defined\n# we default to /dev/null to avoid syntax errors of an empty expansion.\nif [ ! -z \"${private_key_remote}\" ] && [ ! -z \"${private_key_file}\" ] ; then\n  mkdir -p ~/.ssh\n  echo -n \"${private_key_remote}\" > ${private_key_file|/dev/null}\n  chmod 0600 ${private_key_file|/dev/null}\nfi\n\n# Ensure a clean aws configuration state\nrm -rf ~/.aws\nmkdir -p ~/.aws\n\n# If ${aws_profile_remote} is not specified then the config & credentials are\n# stored in the 'default' profile.\naws_profile=\"${aws_profile_remote|default}\"\n\n# The profile in the config file is specified as [profile <profile>], except\n# for [default], see http://boto3.readthedocs.io/en/latest/guide/configuration.html\nif [ $aws_profile = \"default\" ] ; then\n  aws_profile_config=\"[default]\"\nelse\n  aws_profile_config=\"[profile $aws_profile]\"\nfi\ncat <<EOF >> ~/.aws/config\n$aws_profile_config\nregion = us-east-1\nEOF\n\n# The profile in the credentials file is specified as [<profile>].\ncat <<EOF >> ~/.aws/credentials\n[$aws_profile]\naws_access_key_id = ${aws_key_remote}\naws_secret_access_key = ${aws_secret_remote}\nEOF\n\ncat <<EOF > ~/.boto\n[Boto]\nhttps_validate_certificates = False\nEOF\n"
        silent: true
        shell: bash
    - command: shell.exec
      params:
        script: "set -o verbose\nset -o errexit\n\n${activate_virtualenv}\n$python buildscripts/evergreen_resmoke_job_count.py \\\n  --taskName ${task_name}                           \\\n  --buildVariant ${build_variant}                   \\\n  --distro ${distro_id}                             \\\n  --jobFactor ${resmoke_jobs_factor|1}              \\\n  --jobsMax ${resmoke_jobs_max|0}                   \\\n  --outFile resmoke_jobs_expansion.yml\n"
        working_dir: src
        shell: bash
    - command: expansions.update
      params:
        file: src/resmoke_jobs_expansion.yml
        ignore_missing_file: true
    - command: shell.exec
      params:
        script: "# Export these before verbose is set to avoid sharing sensitive info.\nexport CEDAR_USERNAME=${cedar_user}\nexport CEDAR_API_KEY=${cedar_api_key}\n\nset -o errexit\nset -o verbose\n\nif [[ ${disable_unit_tests|false} = \"false\" && ! -f ${skip_tests|/dev/null} ]]; then\n\n# activate the virtualenv if it has been set up\n${activate_virtualenv}\n\n# on *SAN builds, extract the debug symbols so they're available\n# to the symbolizer\nif [[ -n \"${san_options}\" ]]; then\n  # the debug symbols archive isn't always available (not every *SAN\n  # task requires compile)\n  if [[ -f \"mongo-debugsymbols.tgz\" ]]; then\n    tar xf mongo-debugsymbols.tgz\n  else\n    echo \"mongo-debugsymbols.tgz is not available. If you're seeing this message in a task that uses mongod or mongos binaries, please ensure debug symbols have been generated, otherwise the llvm-symbolizer may not correctly symbolize the sanitizer output.\"\n  fi\nfi\n\n\n# Set the TMPDIR environment variable to be a directory in the task's working\n# directory so that temporary files created by processes spawned by resmoke.py get\n# cleaned up after the task completes. This also ensures the spawned processes\n# aren't impacted by limited space in the mount point for the /tmp directory.\nexport TMPDIR=\"${workdir}/tmp\"\nmkdir -p $TMPDIR\n\nif [ -f /proc/self/coredump_filter ]; then\n  # Set the shell process (and its children processes) to dump ELF headers (bit 4),\n  # anonymous shared mappings (bit 1), and anonymous private mappings (bit 0).\n  echo 0x13 > /proc/self/coredump_filter\n\n  if [ -f /sbin/sysctl ]; then\n    # Check that the core pattern is set explicitly on our distro image instead\n    # of being the OS's default value. This ensures that coredump names are consistent\n    # across distros and can be picked up by Evergreen.\n    core_pattern=$(/sbin/sysctl -n \"kernel.core_pattern\")\n    if [ \"$core_pattern\" = \"dump_%e.%p.core\" ]; then\n      echo \"Enabling coredumps\"\n      ulimit -c unlimited\n    fi\n  fi\nfi\n\nif [ $(uname -s) == \"Darwin\" ]; then\n    core_pattern_mac=$(/usr/sbin/sysctl -n \"kern.corefile\")\n    if [ \"$core_pattern_mac\" = \"dump_%N.%P.core\" ]; then\n      echo \"Enabling coredumps\"\n      ulimit -c unlimited\n    fi\nfi\n\nextra_args=\"$extra_args --jobs=${resmoke_jobs|1}\"\n\nif [ ${should_shuffle|true} = true ]; then\n  extra_args=\"$extra_args --shuffle\"\nfi\n\nif [ ${continue_on_failure|true} = true ]; then\n  extra_args=\"$extra_args --continueOnFailure\"\nfi\n\n# We reduce the storage engine's cache size to reduce the likelihood of a mongod process\n# being killed by the OOM killer. The --storageEngineCacheSizeGB command line option is only\n# filled in with a default value here if one hasn't already been specified in the task's\n# definition or build variant's definition.\nset +o errexit\necho \"${resmoke_args} ${test_flags}\" | grep -q storageEngineCacheSizeGB\nif [ $? -eq 1 ]; then\n  echo \"${resmoke_args} ${test_flags}\" | grep -q \"\\-\\-storageEngine=inMemory\"\n  if [ $? -eq 0 ]; then\n    # We use a default of 4GB for the InMemory storage engine.\n    extra_args=\"$extra_args --storageEngineCacheSizeGB=4\"\n  else\n    # We use a default of 1GB for all other storage engines.\n    extra_args=\"$extra_args --storageEngineCacheSizeGB=1\"\n  fi\nfi\nset -o errexit\n\n\n# Reduce the JSHeapLimit for the serial_run task task on Code Coverage builder variant.\nif [[ \"${build_variant}\" = \"enterprise-rhel-80-64-bit-coverage\" && \"${task_name}\" = \"serial_run\" ]]; then\n  extra_args=\"$extra_args --mongodSetParameter {'jsHeapLimitMB':10}\"\nfi\n\npath_value=\"$PATH\"\nif [ ${variant_path_suffix} ]; then\n  path_value=\"$path_value:${variant_path_suffix}\"\nfi\nif [ ${task_path_suffix} ]; then\n  path_value=\"$path_value:${task_path_suffix}\"\nfi\n\n# The \"resmoke_wrapper\" expansion is used by the 'burn_in_tests' task to wrap the resmoke.py\n# invocation. It doesn't set any environment variables and should therefore come last in\n# this list of expansions.\nset +o errexit\nPATH=\"$path_value\"                                \\\n    AWS_PROFILE=${aws_profile_remote}             \\\n    ${gcov_environment}                           \\\n    ${lang_environment}                           \\\n    ${san_options}                                \\\n    ${snmp_config_path}                           \\\n    ${resmoke_wrapper}                            \\\n    $python buildscripts/resmoke.py run           \\\n        ${record_with}                            \\\n        ${resmoke_args}                           \\\n        $extra_args                               \\\n        ${test_flags}                             \\\n        --log=buildlogger                         \\\n        --staggerJobs=on                          \\\n        --installDir=${install_dir|dist-test/bin} \\\n        --buildId=${build_id}                     \\\n        --distroId=${distro_id}                   \\\n        --executionNumber=${execution}            \\\n        --projectName=${project}                  \\\n        --gitRevision=${revision}                 \\\n        --revisionOrderId=${revision_order_id}    \\\n        --taskId=${task_id}                       \\\n        --taskName=${task_name}                   \\\n        --variantName=${build_variant}            \\\n        --versionId=${version_id}                 \\\n        --reportFile=report.json                  \\\n        --perfReportFile=perf.json\nresmoke_exit_code=$?\nset -o errexit\n\nif [[ -n \"${record_with}\" ]]; then\n  recording_size=$(du -ch *.undo | grep total)\n  echo \"UndoDB produced recordings that were $recording_size (uncompressed) on disk\"\n  if [[ $resmoke_exit_code = 0 ]]; then\n    echo \"Resmoke exited successfully. UndoDB recordings will not be saved.\"\n    rm *.undo || true\n  fi\nfi\n\n# 74 is exit code for IOError on POSIX systems, which is raised when the machine is\n# shutting down.\n#\n# 75 is exit code resmoke.py uses when the log output would be incomplete due to failing\n# to communicate with logkeeper.\nif [[ $resmoke_exit_code = 74 || $resmoke_exit_code = 75 ]]; then\n  echo $resmoke_exit_code > run_tests_infrastructure_failure\n  exit 0\nelif [ $resmoke_exit_code != 0 ]; then\n  # On failure save the resmoke exit code.\n  echo $resmoke_exit_code > resmoke_error_code\nelif [ $resmoke_exit_code = 0 ]; then\n  # On success delete core files.\n  core_files=$(/usr/bin/find -H .. \\( -name \"*.core\" -o -name \"*.mdmp\" \\) 2> /dev/null)\n  rm -rf $core_files\nfi\nexit $resmoke_exit_code\nfi # end if [[ ${disable_unit_tests} && ! -f ${skip_tests|/dev/null} ]]\n"
        working_dir: src
        shell: bash
      type: test
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/check_run_tests_infrastructure_failure.sh"
      type: setup
  upload new corpus:
    command: s3.put
    params:
      local_file: "corpora.${ext|tgz}"
      remote_file: "${mongo_fuzzer_corpus}"
      aws_key: "${s3_access_key_id}"
      aws_secret: "${s3_secret_access_key}"
      bucket: fuzzer-artifacts
      permissions: private
      content_type: "${content_type|application/gzip}"
      display_name: Fuzzer Tests Corpus Tar Archive
      optional: true
      visibility: signed
  gather failed unittests:
    command: shell.exec
    params:
      script: "set -eou pipefail\n\n# Only run on unit test tasks so we don't target mongod binaries from cores.\nif [ \"${task_name}\" != \"run_unittests\" ] && [ \"${task_name}\" != \"run_dbtest\" ]; then\n    exit 0\nfi\n\nunittest_bin_dir=dist-unittests/bin\nmkdir -p $unittest_bin_dir || true\n\n# Find all core files\ncore_files=$(/usr/bin/find -H . \\( -name \"dump_*.core\" -o -name \"*.mdmp\" \\) 2> /dev/null)\nfor core_file in $core_files\ndo\n  # A core file name does not always have the executable name that generated it.\n  # See http://stackoverflow.com/questions/34801353/core-dump-filename-gets-thread-name-instead-of-executable-name-with-core-pattern\n  # On platforms with GDB, we get the binary name from core file\n  gdb=/opt/mongodbtoolchain/gdb/bin/gdb\n  if [ -f $gdb ]; then\n    binary_file=$($gdb -batch --quiet -ex \"core $core_file\" 2> /dev/null | grep \"Core was generated\" | cut -f2 -d \"\\`\" | cut -f1 -d \"'\" | cut -f1 -d \" \")\n    binary_file_locations=$binary_file\n  else\n    # Find the base file name from the core file name, note it may be truncated.\n    # Remove leading 'dump_' and trailing '.<pid>.core' or '.<pid or time>.mdmp'\n    binary_file=$(echo \"$core_file\" | sed \"s/.*\\///;s/dump_//;s/\\..*\\.core//;s/\\..*\\.mdmp//\")\n    # Locate the binary file. Since the base file name might be truncated, the find\n    # may return more than 1 file.\n    binary_file_locations=$(/usr/bin/find -H . -executable -name \"$binary_file*${exe}\" 2> /dev/null)\n  fi\n  if [ -z \"$binary_file_locations\" ]; then\n    echo \"Cannot locate the unittest binary file ($binary_file) that generated the core file $core_file\"\n  fi\n  for binary_file_location in $binary_file_locations\n  do\n    new_binary_file=$unittest_bin_dir/$(echo \"$binary_file_location\" | sed \"s/.*\\///\")\n    if [ -f \"$binary_file_location\" ] && [ ! -f \"$new_binary_file\" ]; then\n      cp \"$binary_file_location\" \"$new_binary_file\"\n    fi\n\n    # On Windows if a .pdb symbol file exists, include it in the archive.\n    pdb_file=$(echo \"$binary_file_location\" | sed \"s/\\.exe/.pdb/\")\n    if [ -f \"$pdb_file\" ]; then\n      new_pdb_file=$unittest_bin_dir/$(echo \"$pdb_file\" | sed \"s/.*\\///\")\n      cp \"$pdb_file\" \"$new_pdb_file\"\n    fi\n\n    # On binutils platforms, if a .debug symbol file exists, include it\n    # in the archive\n    debug_file=$binary_file_location.debug\n    if [ -f \"$debug_file\" ]; then\n      cp \"$debug_file\" \"$unittest_bin_dir\"\n    fi\n\n    # On macOS, these are called .dSYM and they are directories\n    dsym_dir=$binary_file_location.dSYM\n    if [ -d \"$dsym_dir\" ]; then\n      cp -r \"$dsym_dir\" \"$unittest_bin_dir\"\n    fi\n\n  done\ndone\n\n# Copy debug symbols for dynamic builds\nlib_dir=build/install/lib\nif [ -d \"$lib_dir\" ] && [[ -n \"$core_files\" ]]; then\n  cp -r \"$lib_dir\" dist-unittests\nfi\n"
      working_dir: src
      shell: bash
  load aws test credentials:
    - command: shell.exec
      params:
        script: "set -o errexit\necho \"const AWS_KMS_SECRET_ID = '${aws_kms_access_key_id}';\" >> src/mongo/db/modules/enterprise/jstests/fle/lib/aws_secrets.js\necho \"const AWS_KMS_SECRET_KEY = '${aws_kms_secret_access_key}';\" >> src/mongo/db/modules/enterprise/jstests/fle/lib/aws_secrets.js\n\necho \"const KMS_GCP_EMAIL = '${kms_gcp_email}'; \" >> src/mongo/db/modules/enterprise/jstests/fle/lib/aws_secrets.js\necho \"const KMS_GCP_PRIVATEKEY = '${kms_gcp_privatekey}'; \" >> src/mongo/db/modules/enterprise/jstests/fle/lib/aws_secrets.js\n\necho \"const KMS_AZURE_TENANT_ID = '${kms_azure_tenant_id}';\" >> src/mongo/db/modules/enterprise/jstests/fle/lib/aws_secrets.js\necho \"const KMS_AZURE_CLIENT_ID = '${kms_azure_client_id}';\" >> src/mongo/db/modules/enterprise/jstests/fle/lib/aws_secrets.js\necho \"const KMS_AZURE_CLIENT_SECRET = '${kms_azure_client_secret}';\" >> src/mongo/db/modules/enterprise/jstests/fle/lib/aws_secrets.js\n"
        working_dir: src
        silent: true
        shell: bash
  archive remote EC2 monitor files:
    command: s3.put
    params:
      local_file: src/ec2_monitor_files.tgz
      remote_file: "${project}/${build_variant}/${revision}/remote_ec2/remote_ec2_monitor-${task_id}-${execution}.tgz"
      aws_key: "${aws_key}"
      aws_secret: "${aws_secret}"
      bucket: mciuploads
      permissions: public-read
      content_type: "${content_type|application/gzip}"
      display_name: "Remote EC2 Monitor - Execution ${execution}"
      optional: true
  run jstestfuzz:
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/run_jstestfuzz/clone_repos.sh"
    - command: shell.exec
      params:
        script: "set -o errexit\nset -o verbose\n\n${add_nodejs_to_path}\n\nnpm run ${npm_command|jstestfuzz} -- ${jstestfuzz_vars} --branch ${branch_name}\n"
        working_dir: src/jstestfuzz
        shell: bash
      type: test
    - command: archive.targz_pack
      params:
        target: jstests.tgz
        source_dir: src/jstestfuzz
        include:
          - out/*.js
    - command: s3.put
      params:
        local_file: jstests.tgz
        remote_file: "${project}/${build_variant}/${revision}/jstestfuzz/${task_id}-${execution}.tgz"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: private
        content_type: application/gzip
        display_name: "Generated Tests - Execution ${execution}"
        visibility: signed
  do snmp setup:
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/do_snmp_setup.sh"
  do setup:
    - command: expansions.update
      params:
        updates:
          - key: activate_virtualenv
            value: "# check if virtualenv is set up\nif [ -d \"${workdir}/venv\" ]; then\n  if [ \"Windows_NT\" = \"$OS\" ]; then\n    # Need to quote the path on Windows to preserve the separator.\n    . \"${workdir}/venv/Scripts/activate\" 2> /tmp/activate_error.log\n  else\n    . ${workdir}/venv/bin/activate 2> /tmp/activate_error.log\n  fi\n  if [ $? -ne 0 ]; then\n    echo \"Failed to activate virtualenv: $(cat /tmp/activate_error.log)\"\n  fi\n  python=python\nelse\n  python=${python|/opt/mongodbtoolchain/v3/bin/python3}\nfi\n\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  export PYTHONPATH=\"$PYTHONPATH;$(cygpath -w ${workdir}/src)\"\nelse\n  export PYTHONPATH=\"$PYTHONPATH:${workdir}/src\"\nfi\n\necho \"python set to $(which $python)\"\n"
          - key: add_nodejs_to_path
            value: "# Add node and npm binaries to PATH\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  # An \"npm\" directory might not have been created in %APPDATA% by the Windows installer.\n  # Work around the issue by specifying a different %APPDATA% path.\n  # See: https://github.com/nodejs/node-v0.x-archive/issues/8141\n  export APPDATA=${workdir}/npm-app-data\n  export PATH=\"$PATH:/cygdrive/c/Program Files (x86)/nodejs\" # Windows location\n  # TODO: this is to work around BUILD-8652\n  cd \"$(pwd -P | sed 's,cygdrive/c/,cygdrive/z/,')\"\nelse\n  export PATH=\"$PATH:/opt/node/bin\"\nfi\n"
          - key: posix_workdir
            value: "eval 'if [ \"Windows_NT\" = \"$OS\" ]; then echo $(cygpath -u \"${workdir}\"); else echo ${workdir}; fi'"
          - key: set_sudo
            value: "set -o > /tmp/settings.log\nset +o errexit\ngrep errexit /tmp/settings.log | grep on\nerrexit_on=$?\n# Set errexit \"off\".\nset +o errexit\nsudo=\n# Use sudo, if it is supported.\nsudo date > /dev/null 2>&1\nif [ $? -eq 0 ]; then\n  sudo=sudo\nfi\n# Set errexit \"on\", if previously enabled.\nif [ $errexit_on -eq 0 ]; then\n  set -o errexit\nfi\n"
          - key: mongo_binaries
            value: "${project}/${build_variant}/${revision}/binaries/mongo-${build_id}.${ext|tgz}"
          - key: mongo_cryptd
            value: "${project}/${build_variant}/${revision}/binaries/mongo-cryptd-${build_id}.${ext|tgz}"
          - key: mongo_cryptd_debugsymbols
            value: "${project}/${build_variant}/${revision}/binaries/mongo-cryptd-debugsymbols-${build_id}.${ext|tgz}"
          - key: mh_archive
            value: "${project}/${build_variant}/${revision}/binaries/mh-${build_id}.${ext|tgz}"
          - key: mh_debugsymbols
            value: "${project}/${build_variant}/${revision}/debugsymbols/mh-debugsymbols-${build_id}.${ext|tgz}"
          - key: mongo_debugsymbols
            value: "${project}/${build_variant}/${revision}/debugsymbols/debugsymbols-${build_id}.${ext|tgz}"
          - key: mongo_shell
            value: "${project}/${build_variant}/${revision}/binaries/mongo-shell-${build_id}.${ext|tgz}"
          - key: mongo_shell_debugsymbols
            value: "${project}/${build_variant}/${revision}/binaries/mongo-shell-debugsymbols-${build_id}.${ext|tgz}"
          - key: mongo_fuzzer_corpus_mciuploads
            value: "${project}/${build_variant}/${revision}/libfuzzer-corpora/corpora-${build_id}.${ext|tgz}"
          - key: mongo_fuzzer_corpus
            value: "corpora-${project}-${build_variant}.${ext|tgz}"
          - key: skip_tests
            value: "skip_test-${build_id}"
    - command: s3.get
      params:
        local_file: ~
        extract_to: src
        remote_file: "${project}/${build_variant}/${revision}/artifacts/${build_id}.tgz"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
    - command: s3.get
      params:
        local_file: src/mongo-binaries.tgz
        extract_to: ~
        remote_file: "${mongo_binaries}"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
    - command: s3.get
      params:
        local_file: src/mongo-debugsymbols.tgz
        extract_to: ~
        remote_file: "${mongo_debugsymbols}"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
    - command: shell.exec
      params:
        script: "set -o errexit\n${decompress|tar xzvf} mongo-binaries.tgz\n"
        working_dir: src
        shell: bash
    - command: shell.exec
      params:
        script: "# exit immediately if virtualenv is not found\nset -o errexit\n\npython_loc=$(which ${python|/opt/mongodbtoolchain/v3/bin/python3})\nvenv_dir=\"${workdir}/venv\"\n\"$python_loc\" -m venv --system-site-packages \"$venv_dir\"\n\n# venv creates its Scripts/activate file with CLRF endings, which\n# cygwin bash does not like. dos2unix it\n# (See https://bugs.python.org/issue32451)\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  dos2unix \"${workdir}/venv/Scripts/activate\"\nfi\n\nexport VIRTUAL_ENV_DISABLE_PROMPT=yes\n\n# Not all git get project calls clone into ${workdir}/src so we allow\n# callers to tell us where the pip requirements files are.\npip_dir=\"${pip_dir}\"\nif [[ -z $pip_dir ]]; then\n  # Default to most common location\n  pip_dir=\"${workdir}/src/etc/pip\"\nfi\n\n# Same as above we have to use quotes to preserve the\n# Windows path separator\ntoolchain_txt=\"$pip_dir/toolchain-requirements.txt\"\n${activate_virtualenv}\necho \"Upgrading pip to 21.0.1\"\npython -m pip install \"pip==21.0.1\"\npython -m pip install -r \"$toolchain_txt\" -q\npython -m pip freeze > pip-requirements.txt\n"
        shell: bash
    - command: s3.put
      params:
        local_file: pip-requirements.txt
        remote_file: "${project}/${build_variant}/${revision}/pip-requirements-${task_id}-${execution}.txt"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: atext-plain
        display_name: Pip Requirements
    - command: shell.exec
      params:
        script: "set -o errexit\nmongo_binary=dist-test/bin/mongo${exe}\n${activate_virtualenv}\nbin_ver=$($python -c \"import yaml; print(yaml.safe_load(open('compile_expansions.yml'))['version']);\" | tr -d '[ \\r\\n]')\n# Due to SERVER-23810, we cannot use $mongo_binary --quiet --nodb --eval \"version();\"\nmongo_ver=$($mongo_binary --version | perl -pe '/version v([^\\\"]*)/; $_ = $1;' | tr -d '[ \\r\\n]')\n# The versions must match\nif [ \"$bin_ver\" != \"$mongo_ver\" ]; then\n  echo \"The mongo version is $mongo_ver, expected version is $bin_ver\"\n  exit 1\nfi\n"
        working_dir: src
        shell: bash
    - command: keyval.inc
      params:
        destination: builder_num
        key: "${build_variant}_master"
    - command: shell.exec
      params:
        script: "cat > mci.buildlogger <<END_OF_CREDS\nslavename='${slave}'\npasswd='${passwd}'\nbuilder='MCI_${build_variant}'\nbuild_num=${builder_num}\nbuild_phase='${task_name}_${execution}'\nEND_OF_CREDS\n"
        working_dir: src
        silent: true
        shell: bash
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/run_diskstats.sh"
        background: true
        system_log: true
    - command: shell.exec
      params:
        script: "proc_list=\"(java|lein|mongo|python|_test$|_test\\.exe$)\"\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  get_pids() {\n    proc_pids=$(tasklist /fo:csv |\n                awk -F'\",\"' '{x=$1; gsub(\"\\\"\",\"\",x); print $2, x}' |\n                grep -iE $1 |\n                cut -f1 -d ' ');\n  }\n  get_process_info() {\n    proc_name=\"\";\n    proc_info=$(wmic process where \"ProcessId=\\\"$1\\\"\" get \"Name,ProcessId,ThreadCount\" /format:csv 2> /dev/null | grep $1);\n    if [ ! -z $proc_info ]; then\n      proc_name=$(echo $proc_info | cut -f2 -d ',');\n      proc_threads=$(echo $proc_info | cut -f4 -d ',');\n    fi;\n  }\nelse\n  get_pids() { proc_pids=$(pgrep $1); }\n  get_process_info() {\n    proc_name=$(ps -p $1 -o comm=);\n    # /proc is available on Linux platforms\n    if [ -f /proc/$1/status ]; then\n      ${set_sudo}\n      proc_threads=$($sudo grep Threads /proc/$1/status | sed \"s/\\s//g\" | cut -f2 -d \":\");\n    else\n      proc_threads=$(ps -AM $1 | grep -vc PID);\n    fi;\n  }\nfi\nwhile [ 1 ]\ndo\n  get_pids $proc_list\n  if [ ! -z \"$proc_pids\" ]; then\n    printf \"Running process/thread counter\\n\"\n    printf \"PROCESS\\tPID\\tTHREADS\\n\"\n  fi\n  for pid in $proc_pids\n  do\n    get_process_info $pid\n    if [ ! -z \"$proc_name\" ]; then\n      printf \"$proc_name\\t$pid\\t$proc_threads\\n\"\n    fi\n  done\n  sleep 60\ndone\n"
        background: true
        system_log: true
        shell: bash
    - command: shell.exec
      params:
        script: "${activate_virtualenv}\n$python buildscripts/collect_resource_info.py -o system_resource_info.json -i 5\n"
        working_dir: src
        background: true
        system_log: true
        shell: bash
  tar jepsen results:
    command: archive.targz_pack
    params:
      target: src/jepsen-results.tgz
      source_dir: src/jepsen-mongodb/store
      include:
        - "./**"
  determine task timeout:
    command: shell.exec
    params:
      script: "set -o verbose\nset -o errexit\n\n${activate_virtualenv}\n$python buildscripts/evergreen_task_timeout.py \\\n  --task-name ${task_name}                     \\\n  --build-variant ${build_variant}             \\\n  --evg-alias '${alias|}'                      \\\n  --timeout ${timeout_secs|0}                  \\\n  --exec-timeout ${exec_timeout_secs|0}        \\\n  --out-file task_timeout_expansions.yml\n"
      working_dir: src
      shell: bash
  generate resmoke tasks:
    - command: expansions.update
      params:
        updates:
          - key: activate_virtualenv
            value: "# check if virtualenv is set up\nif [ -d \"${workdir}/venv\" ]; then\n  if [ \"Windows_NT\" = \"$OS\" ]; then\n    # Need to quote the path on Windows to preserve the separator.\n    . \"${workdir}/venv/Scripts/activate\" 2> /tmp/activate_error.log\n  else\n    . ${workdir}/venv/bin/activate 2> /tmp/activate_error.log\n  fi\n  if [ $? -ne 0 ]; then\n    echo \"Failed to activate virtualenv: $(cat /tmp/activate_error.log)\"\n  fi\n  python=python\nelse\n  python=${python|/opt/mongodbtoolchain/v3/bin/python3}\nfi\n\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  export PYTHONPATH=\"$PYTHONPATH;$(cygpath -w ${workdir}/src)\"\nelse\n  export PYTHONPATH=\"$PYTHONPATH:${workdir}/src\"\nfi\n\necho \"python set to $(which $python)\"\n"
          - key: add_nodejs_to_path
            value: "# Add node and npm binaries to PATH\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  # An \"npm\" directory might not have been created in %APPDATA% by the Windows installer.\n  # Work around the issue by specifying a different %APPDATA% path.\n  # See: https://github.com/nodejs/node-v0.x-archive/issues/8141\n  export APPDATA=${workdir}/npm-app-data\n  export PATH=\"$PATH:/cygdrive/c/Program Files (x86)/nodejs\" # Windows location\n  # TODO: this is to work around BUILD-8652\n  cd \"$(pwd -P | sed 's,cygdrive/c/,cygdrive/z/,')\"\nelse\n  export PATH=\"$PATH:/opt/node/bin\"\nfi\n"
          - key: posix_workdir
            value: "eval 'if [ \"Windows_NT\" = \"$OS\" ]; then echo $(cygpath -u \"${workdir}\"); else echo ${workdir}; fi'"
          - key: set_sudo
            value: "set -o > /tmp/settings.log\nset +o errexit\ngrep errexit /tmp/settings.log | grep on\nerrexit_on=$?\n# Set errexit \"off\".\nset +o errexit\nsudo=\n# Use sudo, if it is supported.\nsudo date > /dev/null 2>&1\nif [ $? -eq 0 ]; then\n  sudo=sudo\nfi\n# Set errexit \"on\", if previously enabled.\nif [ $errexit_on -eq 0 ]; then\n  set -o errexit\nfi\n"
          - key: mongo_binaries
            value: "${project}/${build_variant}/${revision}/binaries/mongo-${build_id}.${ext|tgz}"
          - key: mongo_cryptd
            value: "${project}/${build_variant}/${revision}/binaries/mongo-cryptd-${build_id}.${ext|tgz}"
          - key: mongo_cryptd_debugsymbols
            value: "${project}/${build_variant}/${revision}/binaries/mongo-cryptd-debugsymbols-${build_id}.${ext|tgz}"
          - key: mh_archive
            value: "${project}/${build_variant}/${revision}/binaries/mh-${build_id}.${ext|tgz}"
          - key: mh_debugsymbols
            value: "${project}/${build_variant}/${revision}/debugsymbols/mh-debugsymbols-${build_id}.${ext|tgz}"
          - key: mongo_debugsymbols
            value: "${project}/${build_variant}/${revision}/debugsymbols/debugsymbols-${build_id}.${ext|tgz}"
          - key: mongo_shell
            value: "${project}/${build_variant}/${revision}/binaries/mongo-shell-${build_id}.${ext|tgz}"
          - key: mongo_shell_debugsymbols
            value: "${project}/${build_variant}/${revision}/binaries/mongo-shell-debugsymbols-${build_id}.${ext|tgz}"
          - key: mongo_fuzzer_corpus_mciuploads
            value: "${project}/${build_variant}/${revision}/libfuzzer-corpora/corpora-${build_id}.${ext|tgz}"
          - key: mongo_fuzzer_corpus
            value: "corpora-${project}-${build_variant}.${ext|tgz}"
          - key: skip_tests
            value: "skip_test-${build_id}"
    - command: shell.exec
      params:
        script: "# exit immediately if virtualenv is not found\nset -o errexit\n\npython_loc=$(which ${python|/opt/mongodbtoolchain/v3/bin/python3})\nvenv_dir=\"${workdir}/venv\"\n\"$python_loc\" -m venv --system-site-packages \"$venv_dir\"\n\n# venv creates its Scripts/activate file with CLRF endings, which\n# cygwin bash does not like. dos2unix it\n# (See https://bugs.python.org/issue32451)\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  dos2unix \"${workdir}/venv/Scripts/activate\"\nfi\n\nexport VIRTUAL_ENV_DISABLE_PROMPT=yes\n\n# Not all git get project calls clone into ${workdir}/src so we allow\n# callers to tell us where the pip requirements files are.\npip_dir=\"${pip_dir}\"\nif [[ -z $pip_dir ]]; then\n  # Default to most common location\n  pip_dir=\"${workdir}/src/etc/pip\"\nfi\n\n# Same as above we have to use quotes to preserve the\n# Windows path separator\ntoolchain_txt=\"$pip_dir/toolchain-requirements.txt\"\n${activate_virtualenv}\necho \"Upgrading pip to 21.0.1\"\npython -m pip install \"pip==21.0.1\"\npython -m pip install -r \"$toolchain_txt\" -q\npython -m pip freeze > pip-requirements.txt\n"
        shell: bash
    - command: s3.put
      params:
        local_file: pip-requirements.txt
        remote_file: "${project}/${build_variant}/${revision}/pip-requirements-${task_id}-${execution}.txt"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: atext-plain
        display_name: Pip Requirements
    - command: shell.exec
      params:
        script: "# Create the Evergreen API credentials\ncat > .evergreen.yml <<END_OF_CREDS\napi_server_host: https://evergreen.mongodb.com/api\napi_key: \"${evergreen_api_key}\"\nuser: \"${evergreen_api_user}\"\nEND_OF_CREDS\n"
        working_dir: src
        silent: true
        shell: bash
      type: test
    - command: expansions.write
      params:
        file: src/expansions.yml
    - command: shell.exec
      params:
        script: "set -o errexit\n\n${activate_virtualenv}\n$python buildscripts/evergreen_generate_resmoke_tasks.py --expansion-file expansions.yml --verbose\n"
        working_dir: src
        shell: bash
      type: test
    - command: archive.targz_pack
      params:
        target: generate_tasks_config.tgz
        source_dir: src/generated_resmoke_config
        include:
          - "*"
    - command: s3.put
      params:
        local_file: generate_tasks_config.tgz
        remote_file: "${project}/${build_variant}/${revision}/generate_tasks/${task_name}-${build_id}.tgz"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/gzip
        display_name: "Generated Task Config - Execution ${execution}"
        optional: true
    - command: timeout.update
      params:
        exec_timeout_secs: 10800
        timeout_secs: 10800
    - command: generate.tasks
      params:
        files:
          - src/generated_resmoke_config/*.json
  generate implicit multiversion tasks:
    - command: expansions.update
      params:
        updates:
          - key: activate_virtualenv
            value: "# check if virtualenv is set up\nif [ -d \"${workdir}/venv\" ]; then\n  if [ \"Windows_NT\" = \"$OS\" ]; then\n    # Need to quote the path on Windows to preserve the separator.\n    . \"${workdir}/venv/Scripts/activate\" 2> /tmp/activate_error.log\n  else\n    . ${workdir}/venv/bin/activate 2> /tmp/activate_error.log\n  fi\n  if [ $? -ne 0 ]; then\n    echo \"Failed to activate virtualenv: $(cat /tmp/activate_error.log)\"\n  fi\n  python=python\nelse\n  python=${python|/opt/mongodbtoolchain/v3/bin/python3}\nfi\n\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  export PYTHONPATH=\"$PYTHONPATH;$(cygpath -w ${workdir}/src)\"\nelse\n  export PYTHONPATH=\"$PYTHONPATH:${workdir}/src\"\nfi\n\necho \"python set to $(which $python)\"\n"
          - key: add_nodejs_to_path
            value: "# Add node and npm binaries to PATH\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  # An \"npm\" directory might not have been created in %APPDATA% by the Windows installer.\n  # Work around the issue by specifying a different %APPDATA% path.\n  # See: https://github.com/nodejs/node-v0.x-archive/issues/8141\n  export APPDATA=${workdir}/npm-app-data\n  export PATH=\"$PATH:/cygdrive/c/Program Files (x86)/nodejs\" # Windows location\n  # TODO: this is to work around BUILD-8652\n  cd \"$(pwd -P | sed 's,cygdrive/c/,cygdrive/z/,')\"\nelse\n  export PATH=\"$PATH:/opt/node/bin\"\nfi\n"
          - key: posix_workdir
            value: "eval 'if [ \"Windows_NT\" = \"$OS\" ]; then echo $(cygpath -u \"${workdir}\"); else echo ${workdir}; fi'"
          - key: set_sudo
            value: "set -o > /tmp/settings.log\nset +o errexit\ngrep errexit /tmp/settings.log | grep on\nerrexit_on=$?\n# Set errexit \"off\".\nset +o errexit\nsudo=\n# Use sudo, if it is supported.\nsudo date > /dev/null 2>&1\nif [ $? -eq 0 ]; then\n  sudo=sudo\nfi\n# Set errexit \"on\", if previously enabled.\nif [ $errexit_on -eq 0 ]; then\n  set -o errexit\nfi\n"
          - key: mongo_binaries
            value: "${project}/${build_variant}/${revision}/binaries/mongo-${build_id}.${ext|tgz}"
          - key: mongo_cryptd
            value: "${project}/${build_variant}/${revision}/binaries/mongo-cryptd-${build_id}.${ext|tgz}"
          - key: mongo_cryptd_debugsymbols
            value: "${project}/${build_variant}/${revision}/binaries/mongo-cryptd-debugsymbols-${build_id}.${ext|tgz}"
          - key: mh_archive
            value: "${project}/${build_variant}/${revision}/binaries/mh-${build_id}.${ext|tgz}"
          - key: mh_debugsymbols
            value: "${project}/${build_variant}/${revision}/debugsymbols/mh-debugsymbols-${build_id}.${ext|tgz}"
          - key: mongo_debugsymbols
            value: "${project}/${build_variant}/${revision}/debugsymbols/debugsymbols-${build_id}.${ext|tgz}"
          - key: mongo_shell
            value: "${project}/${build_variant}/${revision}/binaries/mongo-shell-${build_id}.${ext|tgz}"
          - key: mongo_shell_debugsymbols
            value: "${project}/${build_variant}/${revision}/binaries/mongo-shell-debugsymbols-${build_id}.${ext|tgz}"
          - key: mongo_fuzzer_corpus_mciuploads
            value: "${project}/${build_variant}/${revision}/libfuzzer-corpora/corpora-${build_id}.${ext|tgz}"
          - key: mongo_fuzzer_corpus
            value: "corpora-${project}-${build_variant}.${ext|tgz}"
          - key: skip_tests
            value: "skip_test-${build_id}"
    - command: shell.exec
      params:
        script: "# exit immediately if virtualenv is not found\nset -o errexit\n\npython_loc=$(which ${python|/opt/mongodbtoolchain/v3/bin/python3})\nvenv_dir=\"${workdir}/venv\"\n\"$python_loc\" -m venv --system-site-packages \"$venv_dir\"\n\n# venv creates its Scripts/activate file with CLRF endings, which\n# cygwin bash does not like. dos2unix it\n# (See https://bugs.python.org/issue32451)\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  dos2unix \"${workdir}/venv/Scripts/activate\"\nfi\n\nexport VIRTUAL_ENV_DISABLE_PROMPT=yes\n\n# Not all git get project calls clone into ${workdir}/src so we allow\n# callers to tell us where the pip requirements files are.\npip_dir=\"${pip_dir}\"\nif [[ -z $pip_dir ]]; then\n  # Default to most common location\n  pip_dir=\"${workdir}/src/etc/pip\"\nfi\n\n# Same as above we have to use quotes to preserve the\n# Windows path separator\ntoolchain_txt=\"$pip_dir/toolchain-requirements.txt\"\n${activate_virtualenv}\necho \"Upgrading pip to 21.0.1\"\npython -m pip install \"pip==21.0.1\"\npython -m pip install -r \"$toolchain_txt\" -q\npython -m pip freeze > pip-requirements.txt\n"
        shell: bash
    - command: shell.exec
      params:
        script: "# Create the Evergreen API credentials\ncat > .evergreen.yml <<END_OF_CREDS\napi_server_host: https://evergreen.mongodb.com/api\napi_key: \"${evergreen_api_key}\"\nuser: \"${evergreen_api_user}\"\nEND_OF_CREDS\n"
        working_dir: src
        silent: true
        shell: bash
      type: test
    - command: expansions.write
      params:
        file: src/expansions.yml
    - command: shell.exec
      params:
        script: "set -o errexit\nset -o verbose\n\n${activate_virtualenv}\n\nrm -rf /data/install /data/multiversion\n\nedition=\"${multiversion_edition|base}\"\nplatform=\"${multiversion_platform|linux_x86_64}\"\narchitecture=\"${multiversion_architecture|x86_64}\"\n\n$python buildscripts/resmoke.py setup-multiversion   \\\n  --installDir /data/install                         \\\n  --linkDir /data/multiversion                       \\\n  --edition $edition                                 \\\n  --platform $platform                               \\\n  --architecture $architecture                       \\\n  --githubOauthToken \"${github_token}\"               \\\n  --useLatest 3.6 4.0\n\n# The platform and architecture for how some of the binaries are reported in\n# https://downloads.mongodb.org/full.json changed between MongoDB 4.0 and MongoDB 4.2.\n# Certain build variants define additional multiversion_*_42_or_later expansions in order to\n# be able to fetch a complete set of versions.\n\nif [ ! -z \"${multiversion_edition_42_or_later}\" ]; then\n  edition=\"${multiversion_edition_42_or_later}\"\nfi\n\nif [ ! -z \"${multiversion_platform_42_or_later}\" ]; then\n  platform=\"${multiversion_platform_42_or_later}\"\nfi\n\nif [ ! -z \"${multiversion_architecture_42_or_later}\" ]; then\n  architecture=\"${multiversion_architecture_42_or_later}\"\nfi\n\n$python buildscripts/resmoke.py setup-multiversion   \\\n  --installDir /data/install                         \\\n  --linkDir /data/multiversion                       \\\n  --edition $edition                                 \\\n  --platform $platform                               \\\n  --architecture $architecture                       \\\n  --githubOauthToken \"${github_token}\"               \\\n  --useLatest 4.2 4.2.1\n\n# The platform and architecture for how some of the binaries are reported in\n# https://downloads.mongodb.org/full.json changed between MongoDB 4.2 and MongoDB 4.4.\n# Certain build variants define additional multiversion_*_44_or_later expansions in order to\n# be able to fetch a complete set of versions.\n\nif [ ! -z \"${multiversion_edition_44_or_later}\" ]; then\n  edition=\"${multiversion_edition_44_or_later}\"\nfi\n\nif [ ! -z \"${multiversion_platform_44_or_later}\" ]; then\n  platform=\"${multiversion_platform_44_or_later}\"\nfi\n\nif [ ! -z \"${multiversion_architecture_44_or_later}\" ]; then\n  architecture=\"${multiversion_architecture_44_or_later}\"\nfi\n\n$python buildscripts/resmoke.py setup-multiversion   \\\n  --installDir /data/install                         \\\n  --linkDir /data/multiversion                       \\\n  --edition $edition                                 \\\n  --platform $platform                               \\\n  --architecture $architecture                       \\\n  --githubOauthToken \"${github_token}\"               \\\n  --useLatest 4.4 4.7 4.8 4.9\n\n# This is primarily for tests for infrastructure which don't always need the latest\n# binaries.\nif [ ! -z \"${install_master_bin}\" ]; then\n  $python buildscripts/resmoke.py setup-multiversion   \\\n    --installDir /data/install                         \\\n    --linkDir /data/multiversion                       \\\n    --edition $edition                                 \\\n    --platform $platform                               \\\n    --architecture $architecture                       \\\n    --githubOauthToken \"${github_token}\"               \\\n    --useLatest master\nfi\n"
        working_dir: src
        shell: bash
    - command: shell.exec
      params:
        script: "set -o errexit\nset -o verbose\n\n${activate_virtualenv}\n$python buildscripts/evergreen_gen_multiversion_tests.py run --expansion-file expansions.yml\n$python buildscripts/evergreen_gen_multiversion_tests.py generate-exclude-tags --task-path-suffix=${task_path_suffix}\n"
        working_dir: src
        shell: bash
    - command: archive.targz_pack
      params:
        target: generate_tasks_config.tgz
        source_dir: src/generated_resmoke_config
        include:
          - "*"
    - command: s3.put
      params:
        local_file: generate_tasks_config.tgz
        remote_file: "${project}/${build_variant}/${revision}/generate_tasks/${task_name}-${build_id}.tgz"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/gzip
        display_name: "Generated Task Config - Execution ${execution}"
        optional: true
    - command: timeout.update
      params:
        exec_timeout_secs: 10800
        timeout_secs: 10800
    - command: generate.tasks
      params:
        files:
          - src/generated_resmoke_config/*.json
  gather mongo coredumps:
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/gather_mongo_coredumps.sh"
  do non-compile setup:
    - command: expansions.update
      params:
        updates:
          - key: activate_virtualenv
            value: "# check if virtualenv is set up\nif [ -d \"${workdir}/venv\" ]; then\n  if [ \"Windows_NT\" = \"$OS\" ]; then\n    # Need to quote the path on Windows to preserve the separator.\n    . \"${workdir}/venv/Scripts/activate\" 2> /tmp/activate_error.log\n  else\n    . ${workdir}/venv/bin/activate 2> /tmp/activate_error.log\n  fi\n  if [ $? -ne 0 ]; then\n    echo \"Failed to activate virtualenv: $(cat /tmp/activate_error.log)\"\n  fi\n  python=python\nelse\n  python=${python|/opt/mongodbtoolchain/v3/bin/python3}\nfi\n\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  export PYTHONPATH=\"$PYTHONPATH;$(cygpath -w ${workdir}/src)\"\nelse\n  export PYTHONPATH=\"$PYTHONPATH:${workdir}/src\"\nfi\n\necho \"python set to $(which $python)\"\n"
          - key: add_nodejs_to_path
            value: "# Add node and npm binaries to PATH\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  # An \"npm\" directory might not have been created in %APPDATA% by the Windows installer.\n  # Work around the issue by specifying a different %APPDATA% path.\n  # See: https://github.com/nodejs/node-v0.x-archive/issues/8141\n  export APPDATA=${workdir}/npm-app-data\n  export PATH=\"$PATH:/cygdrive/c/Program Files (x86)/nodejs\" # Windows location\n  # TODO: this is to work around BUILD-8652\n  cd \"$(pwd -P | sed 's,cygdrive/c/,cygdrive/z/,')\"\nelse\n  export PATH=\"$PATH:/opt/node/bin\"\nfi\n"
          - key: posix_workdir
            value: "eval 'if [ \"Windows_NT\" = \"$OS\" ]; then echo $(cygpath -u \"${workdir}\"); else echo ${workdir}; fi'"
          - key: set_sudo
            value: "set -o > /tmp/settings.log\nset +o errexit\ngrep errexit /tmp/settings.log | grep on\nerrexit_on=$?\n# Set errexit \"off\".\nset +o errexit\nsudo=\n# Use sudo, if it is supported.\nsudo date > /dev/null 2>&1\nif [ $? -eq 0 ]; then\n  sudo=sudo\nfi\n# Set errexit \"on\", if previously enabled.\nif [ $errexit_on -eq 0 ]; then\n  set -o errexit\nfi\n"
          - key: mongo_binaries
            value: "${project}/${build_variant}/${revision}/binaries/mongo-${build_id}.${ext|tgz}"
          - key: mongo_cryptd
            value: "${project}/${build_variant}/${revision}/binaries/mongo-cryptd-${build_id}.${ext|tgz}"
          - key: mongo_cryptd_debugsymbols
            value: "${project}/${build_variant}/${revision}/binaries/mongo-cryptd-debugsymbols-${build_id}.${ext|tgz}"
          - key: mh_archive
            value: "${project}/${build_variant}/${revision}/binaries/mh-${build_id}.${ext|tgz}"
          - key: mh_debugsymbols
            value: "${project}/${build_variant}/${revision}/debugsymbols/mh-debugsymbols-${build_id}.${ext|tgz}"
          - key: mongo_debugsymbols
            value: "${project}/${build_variant}/${revision}/debugsymbols/debugsymbols-${build_id}.${ext|tgz}"
          - key: mongo_shell
            value: "${project}/${build_variant}/${revision}/binaries/mongo-shell-${build_id}.${ext|tgz}"
          - key: mongo_shell_debugsymbols
            value: "${project}/${build_variant}/${revision}/binaries/mongo-shell-debugsymbols-${build_id}.${ext|tgz}"
          - key: mongo_fuzzer_corpus_mciuploads
            value: "${project}/${build_variant}/${revision}/libfuzzer-corpora/corpora-${build_id}.${ext|tgz}"
          - key: mongo_fuzzer_corpus
            value: "corpora-${project}-${build_variant}.${ext|tgz}"
          - key: skip_tests
            value: "skip_test-${build_id}"
    - command: shell.exec
      params:
        script: "# exit immediately if virtualenv is not found\nset -o errexit\n\npython_loc=$(which ${python|/opt/mongodbtoolchain/v3/bin/python3})\nvenv_dir=\"${workdir}/venv\"\n\"$python_loc\" -m venv --system-site-packages \"$venv_dir\"\n\n# venv creates its Scripts/activate file with CLRF endings, which\n# cygwin bash does not like. dos2unix it\n# (See https://bugs.python.org/issue32451)\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  dos2unix \"${workdir}/venv/Scripts/activate\"\nfi\n\nexport VIRTUAL_ENV_DISABLE_PROMPT=yes\n\n# Not all git get project calls clone into ${workdir}/src so we allow\n# callers to tell us where the pip requirements files are.\npip_dir=\"${pip_dir}\"\nif [[ -z $pip_dir ]]; then\n  # Default to most common location\n  pip_dir=\"${workdir}/src/etc/pip\"\nfi\n\n# Same as above we have to use quotes to preserve the\n# Windows path separator\ntoolchain_txt=\"$pip_dir/toolchain-requirements.txt\"\n${activate_virtualenv}\necho \"Upgrading pip to 21.0.1\"\npython -m pip install \"pip==21.0.1\"\npython -m pip install -r \"$toolchain_txt\" -q\npython -m pip freeze > pip-requirements.txt\n"
        shell: bash
    - command: s3.put
      params:
        local_file: pip-requirements.txt
        remote_file: "${project}/${build_variant}/${revision}/pip-requirements-${task_id}-${execution}.txt"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: atext-plain
        display_name: Pip Requirements
    - command: keyval.inc
      params:
        destination: builder_num
        key: "${build_variant}_master"
    - command: shell.exec
      params:
        script: "cat > mci.buildlogger <<END_OF_CREDS\nslavename='${slave}'\npasswd='${passwd}'\nbuilder='MCI_${build_variant}'\nbuild_num=${builder_num}\nbuild_phase='${task_name}_${execution}'\nEND_OF_CREDS\n"
        working_dir: src
        silent: true
        shell: bash
  archive dbtest:
    command: s3.put
    params:
      local_file: dbtest-binary.tgz
      remote_file: "${project}/${build_variant}/${revision}/dbtest/dbtest-${build_id}-${task_name}-${execution}.tgz"
      aws_key: "${aws_key}"
      aws_secret: "${aws_secret}"
      bucket: mciuploads
      permissions: public-read
      content_type: application/tar
      display_name: "dbtest binary - Execution ${execution}"
      optional: true
  tar code coverage data:
    command: archive.targz_pack
    params:
      target: src/gcov-intermediate-files.tgz
      source_dir: src
      include:
        - "*.gcda.gcov"
  execute resmoke tests:
    command: shell.exec
    params:
      script: "# Export these before verbose is set to avoid sharing sensitive info.\nexport CEDAR_USERNAME=${cedar_user}\nexport CEDAR_API_KEY=${cedar_api_key}\n\nset -o errexit\nset -o verbose\n\nif [[ ${disable_unit_tests|false} = \"false\" && ! -f ${skip_tests|/dev/null} ]]; then\n\n# activate the virtualenv if it has been set up\n${activate_virtualenv}\n\n# on *SAN builds, extract the debug symbols so they're available\n# to the symbolizer\nif [[ -n \"${san_options}\" ]]; then\n  # the debug symbols archive isn't always available (not every *SAN\n  # task requires compile)\n  if [[ -f \"mongo-debugsymbols.tgz\" ]]; then\n    tar xf mongo-debugsymbols.tgz\n  else\n    echo \"mongo-debugsymbols.tgz is not available. If you're seeing this message in a task that uses mongod or mongos binaries, please ensure debug symbols have been generated, otherwise the llvm-symbolizer may not correctly symbolize the sanitizer output.\"\n  fi\nfi\n\n\n# Set the TMPDIR environment variable to be a directory in the task's working\n# directory so that temporary files created by processes spawned by resmoke.py get\n# cleaned up after the task completes. This also ensures the spawned processes\n# aren't impacted by limited space in the mount point for the /tmp directory.\nexport TMPDIR=\"${workdir}/tmp\"\nmkdir -p $TMPDIR\n\nif [ -f /proc/self/coredump_filter ]; then\n  # Set the shell process (and its children processes) to dump ELF headers (bit 4),\n  # anonymous shared mappings (bit 1), and anonymous private mappings (bit 0).\n  echo 0x13 > /proc/self/coredump_filter\n\n  if [ -f /sbin/sysctl ]; then\n    # Check that the core pattern is set explicitly on our distro image instead\n    # of being the OS's default value. This ensures that coredump names are consistent\n    # across distros and can be picked up by Evergreen.\n    core_pattern=$(/sbin/sysctl -n \"kernel.core_pattern\")\n    if [ \"$core_pattern\" = \"dump_%e.%p.core\" ]; then\n      echo \"Enabling coredumps\"\n      ulimit -c unlimited\n    fi\n  fi\nfi\n\nif [ $(uname -s) == \"Darwin\" ]; then\n    core_pattern_mac=$(/usr/sbin/sysctl -n \"kern.corefile\")\n    if [ \"$core_pattern_mac\" = \"dump_%N.%P.core\" ]; then\n      echo \"Enabling coredumps\"\n      ulimit -c unlimited\n    fi\nfi\n\nextra_args=\"$extra_args --jobs=${resmoke_jobs|1}\"\n\nif [ ${should_shuffle|true} = true ]; then\n  extra_args=\"$extra_args --shuffle\"\nfi\n\nif [ ${continue_on_failure|true} = true ]; then\n  extra_args=\"$extra_args --continueOnFailure\"\nfi\n\n# We reduce the storage engine's cache size to reduce the likelihood of a mongod process\n# being killed by the OOM killer. The --storageEngineCacheSizeGB command line option is only\n# filled in with a default value here if one hasn't already been specified in the task's\n# definition or build variant's definition.\nset +o errexit\necho \"${resmoke_args} ${test_flags}\" | grep -q storageEngineCacheSizeGB\nif [ $? -eq 1 ]; then\n  echo \"${resmoke_args} ${test_flags}\" | grep -q \"\\-\\-storageEngine=inMemory\"\n  if [ $? -eq 0 ]; then\n    # We use a default of 4GB for the InMemory storage engine.\n    extra_args=\"$extra_args --storageEngineCacheSizeGB=4\"\n  else\n    # We use a default of 1GB for all other storage engines.\n    extra_args=\"$extra_args --storageEngineCacheSizeGB=1\"\n  fi\nfi\nset -o errexit\n\n\n# Reduce the JSHeapLimit for the serial_run task task on Code Coverage builder variant.\nif [[ \"${build_variant}\" = \"enterprise-rhel-80-64-bit-coverage\" && \"${task_name}\" = \"serial_run\" ]]; then\n  extra_args=\"$extra_args --mongodSetParameter {'jsHeapLimitMB':10}\"\nfi\n\npath_value=\"$PATH\"\nif [ ${variant_path_suffix} ]; then\n  path_value=\"$path_value:${variant_path_suffix}\"\nfi\nif [ ${task_path_suffix} ]; then\n  path_value=\"$path_value:${task_path_suffix}\"\nfi\n\n# The \"resmoke_wrapper\" expansion is used by the 'burn_in_tests' task to wrap the resmoke.py\n# invocation. It doesn't set any environment variables and should therefore come last in\n# this list of expansions.\nset +o errexit\nPATH=\"$path_value\"                                \\\n    AWS_PROFILE=${aws_profile_remote}             \\\n    ${gcov_environment}                           \\\n    ${lang_environment}                           \\\n    ${san_options}                                \\\n    ${snmp_config_path}                           \\\n    ${resmoke_wrapper}                            \\\n    $python buildscripts/resmoke.py run           \\\n        ${record_with}                            \\\n        ${resmoke_args}                           \\\n        $extra_args                               \\\n        ${test_flags}                             \\\n        --log=buildlogger                         \\\n        --staggerJobs=on                          \\\n        --installDir=${install_dir|dist-test/bin} \\\n        --buildId=${build_id}                     \\\n        --distroId=${distro_id}                   \\\n        --executionNumber=${execution}            \\\n        --projectName=${project}                  \\\n        --gitRevision=${revision}                 \\\n        --revisionOrderId=${revision_order_id}    \\\n        --taskId=${task_id}                       \\\n        --taskName=${task_name}                   \\\n        --variantName=${build_variant}            \\\n        --versionId=${version_id}                 \\\n        --reportFile=report.json                  \\\n        --perfReportFile=perf.json\nresmoke_exit_code=$?\nset -o errexit\n\nif [[ -n \"${record_with}\" ]]; then\n  recording_size=$(du -ch *.undo | grep total)\n  echo \"UndoDB produced recordings that were $recording_size (uncompressed) on disk\"\n  if [[ $resmoke_exit_code = 0 ]]; then\n    echo \"Resmoke exited successfully. UndoDB recordings will not be saved.\"\n    rm *.undo || true\n  fi\nfi\n\n# 74 is exit code for IOError on POSIX systems, which is raised when the machine is\n# shutting down.\n#\n# 75 is exit code resmoke.py uses when the log output would be incomplete due to failing\n# to communicate with logkeeper.\nif [[ $resmoke_exit_code = 74 || $resmoke_exit_code = 75 ]]; then\n  echo $resmoke_exit_code > run_tests_infrastructure_failure\n  exit 0\nelif [ $resmoke_exit_code != 0 ]; then\n  # On failure save the resmoke exit code.\n  echo $resmoke_exit_code > resmoke_error_code\nelif [ $resmoke_exit_code = 0 ]; then\n  # On success delete core files.\n  core_files=$(/usr/bin/find -H .. \\( -name \"*.core\" -o -name \"*.mdmp\" \\) 2> /dev/null)\n  rm -rf $core_files\nfi\nexit $resmoke_exit_code\nfi # end if [[ ${disable_unit_tests} && ! -f ${skip_tests|/dev/null} ]]\n"
      working_dir: src
      shell: bash
    type: test
  shared scons cache pruning:
    command: shell.exec
    params:
      script: "set -o errexit\nset -o verbose\n# removes files from the shared scons cache.\n\n# Only prune on master branch\nif [[ \"${project}\" == \"mongodb-mongo-master\" ]]; then\n\n\n  set +o errexit\n\n  if [ \"Windows_NT\" = \"$OS\" ]; then\n    ./win_mount.sh\n  else\n    mount | grep \"\\/efs\" > /dev/null\n  fi\n  if [ $? -eq 0 ]; then\n    echo \"Shared cache is already mounted\"\n  else\n    echo \"Shared cache - mounting file system\"\n    if [ \"Windows_NT\" = \"$OS\" ]; then\n      ./win_mount.sh\n    else\n      sudo mount /efs\n    fi\n  fi\n  set -o errexit\n\n  if [ \"Windows_NT\" = \"$OS\" ]; then\n    cache_folder=/cygdrive/x\n  else\n    cache_folder=/efs\n  fi\n  dirs=$(ls -l $cache_folder | grep -v total | awk '{print $NF}')\n\n  echo \"Pruning shared SCons directories\"\n\n  for dir in $dirs; do\n    echo \"Pruning $cache_folder/$dir/scons-cache\"\n\n    if [ -e $cache_folder/$dir/info/distro_name ]; then\n      distro=$(cat $cache_folder/$dir/info/distro_name)\n    fi\n\n    # Set cache sizes by distro\n    case $distro in\n         ubuntu1604|ubuntu1804|rhel62|rhel70)\n              cache_size=600\n              ;;\n         *)\n              # default\n              cache_size=400\n              ;;\n    esac\n\n    if [ \"Windows_NT\" = \"$OS\" ]; then\n      echo \"dir=\"$dir\n      python buildscripts/scons_cache_prune.py --cache-dir x:/$dir/scons-cache --cache-size $cache_size --prune-ratio 1.0\n    else\n      sudo python buildscripts/scons_cache_prune.py --cache-dir /efs/$dir/scons-cache --cache-size $cache_size --prune-ratio 1.0\n    fi\n    echo \"\"\n  done\n\n  if [ \"Windows_NT\" = \"$OS\" ]; then\n    net use X: /delete || true\n  else\n    sudo umount /efs || true\n  fi\n\nelse\n  echo \"Not on master, shared SCons cache pruning skipped\"\nfi\n"
      working_dir: src
      shell: bash
    type: system
  lint fuzzer sanity all:
    - command: shell.exec
      params:
        script: "set -eo pipefail\nset -o verbose\n\n${add_nodejs_to_path}\n\n# Run parse-jsfiles on 50 files at a time with 32 processes in parallel.\nfind \"$PWD/jstests\" \"$PWD/src/mongo/db/modules/enterprise\" -name \"*.js\" -print | xargs -P 32 -L 50 npm run --prefix jstestfuzz parse-jsfiles --\n"
        working_dir: src
        shell: bash
      type: test
  retrieve generated test configuration:
    command: s3.get
    params:
      local_file: generate_tasks_config.tgz
      extract_to: ~
      remote_file: "${project}/${build_variant}/${revision}/generate_tasks/${task}_gen-${build_id}.tgz"
      aws_key: "${aws_key}"
      aws_secret: "${aws_secret}"
      bucket: mciuploads
  kill processes:
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/kill_processes.sh"
      silent: true
  set up win mount script:
    command: shell.exec
    params:
      script: "cat <<EOF > win_mount.sh\nnet use X: '\\\\\\\\${win_scons_endpoint}\\\\share' /USER:\"wincache.build.com\\${win_scons_user}\" '${win_scons_pass}'\nEOF\nchmod +x win_mount.sh\n"
      working_dir: src
      silent: true
      shell: bash
  generate fuzzer tasks:
    - command: expansions.update
      params:
        updates:
          - key: activate_virtualenv
            value: "# check if virtualenv is set up\nif [ -d \"${workdir}/venv\" ]; then\n  if [ \"Windows_NT\" = \"$OS\" ]; then\n    # Need to quote the path on Windows to preserve the separator.\n    . \"${workdir}/venv/Scripts/activate\" 2> /tmp/activate_error.log\n  else\n    . ${workdir}/venv/bin/activate 2> /tmp/activate_error.log\n  fi\n  if [ $? -ne 0 ]; then\n    echo \"Failed to activate virtualenv: $(cat /tmp/activate_error.log)\"\n  fi\n  python=python\nelse\n  python=${python|/opt/mongodbtoolchain/v3/bin/python3}\nfi\n\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  export PYTHONPATH=\"$PYTHONPATH;$(cygpath -w ${workdir}/src)\"\nelse\n  export PYTHONPATH=\"$PYTHONPATH:${workdir}/src\"\nfi\n\necho \"python set to $(which $python)\"\n"
          - key: add_nodejs_to_path
            value: "# Add node and npm binaries to PATH\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  # An \"npm\" directory might not have been created in %APPDATA% by the Windows installer.\n  # Work around the issue by specifying a different %APPDATA% path.\n  # See: https://github.com/nodejs/node-v0.x-archive/issues/8141\n  export APPDATA=${workdir}/npm-app-data\n  export PATH=\"$PATH:/cygdrive/c/Program Files (x86)/nodejs\" # Windows location\n  # TODO: this is to work around BUILD-8652\n  cd \"$(pwd -P | sed 's,cygdrive/c/,cygdrive/z/,')\"\nelse\n  export PATH=\"$PATH:/opt/node/bin\"\nfi\n"
          - key: posix_workdir
            value: "eval 'if [ \"Windows_NT\" = \"$OS\" ]; then echo $(cygpath -u \"${workdir}\"); else echo ${workdir}; fi'"
          - key: set_sudo
            value: "set -o > /tmp/settings.log\nset +o errexit\ngrep errexit /tmp/settings.log | grep on\nerrexit_on=$?\n# Set errexit \"off\".\nset +o errexit\nsudo=\n# Use sudo, if it is supported.\nsudo date > /dev/null 2>&1\nif [ $? -eq 0 ]; then\n  sudo=sudo\nfi\n# Set errexit \"on\", if previously enabled.\nif [ $errexit_on -eq 0 ]; then\n  set -o errexit\nfi\n"
          - key: mongo_binaries
            value: "${project}/${build_variant}/${revision}/binaries/mongo-${build_id}.${ext|tgz}"
          - key: mongo_cryptd
            value: "${project}/${build_variant}/${revision}/binaries/mongo-cryptd-${build_id}.${ext|tgz}"
          - key: mongo_cryptd_debugsymbols
            value: "${project}/${build_variant}/${revision}/binaries/mongo-cryptd-debugsymbols-${build_id}.${ext|tgz}"
          - key: mh_archive
            value: "${project}/${build_variant}/${revision}/binaries/mh-${build_id}.${ext|tgz}"
          - key: mh_debugsymbols
            value: "${project}/${build_variant}/${revision}/debugsymbols/mh-debugsymbols-${build_id}.${ext|tgz}"
          - key: mongo_debugsymbols
            value: "${project}/${build_variant}/${revision}/debugsymbols/debugsymbols-${build_id}.${ext|tgz}"
          - key: mongo_shell
            value: "${project}/${build_variant}/${revision}/binaries/mongo-shell-${build_id}.${ext|tgz}"
          - key: mongo_shell_debugsymbols
            value: "${project}/${build_variant}/${revision}/binaries/mongo-shell-debugsymbols-${build_id}.${ext|tgz}"
          - key: mongo_fuzzer_corpus_mciuploads
            value: "${project}/${build_variant}/${revision}/libfuzzer-corpora/corpora-${build_id}.${ext|tgz}"
          - key: mongo_fuzzer_corpus
            value: "corpora-${project}-${build_variant}.${ext|tgz}"
          - key: skip_tests
            value: "skip_test-${build_id}"
    - command: shell.exec
      params:
        script: "# exit immediately if virtualenv is not found\nset -o errexit\n\npython_loc=$(which ${python|/opt/mongodbtoolchain/v3/bin/python3})\nvenv_dir=\"${workdir}/venv\"\n\"$python_loc\" -m venv --system-site-packages \"$venv_dir\"\n\n# venv creates its Scripts/activate file with CLRF endings, which\n# cygwin bash does not like. dos2unix it\n# (See https://bugs.python.org/issue32451)\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  dos2unix \"${workdir}/venv/Scripts/activate\"\nfi\n\nexport VIRTUAL_ENV_DISABLE_PROMPT=yes\n\n# Not all git get project calls clone into ${workdir}/src so we allow\n# callers to tell us where the pip requirements files are.\npip_dir=\"${pip_dir}\"\nif [[ -z $pip_dir ]]; then\n  # Default to most common location\n  pip_dir=\"${workdir}/src/etc/pip\"\nfi\n\n# Same as above we have to use quotes to preserve the\n# Windows path separator\ntoolchain_txt=\"$pip_dir/toolchain-requirements.txt\"\n${activate_virtualenv}\necho \"Upgrading pip to 21.0.1\"\npython -m pip install \"pip==21.0.1\"\npython -m pip install -r \"$toolchain_txt\" -q\npython -m pip freeze > pip-requirements.txt\n"
        shell: bash
    - command: s3.put
      params:
        local_file: pip-requirements.txt
        remote_file: "${project}/${build_variant}/${revision}/pip-requirements-${task_id}-${execution}.txt"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: atext-plain
        display_name: Pip Requirements
    - command: expansions.write
      params:
        file: src/expansions.yml
    - command: shell.exec
      params:
        script: "set -o errexit\nset -o verbose\n\n${activate_virtualenv}\n$python buildscripts/evergreen_gen_fuzzer_tests.py --expansion-file expansions.yml\n"
        working_dir: src
        shell: bash
    - command: archive.targz_pack
      params:
        target: generate_tasks_config.tgz
        source_dir: src/generated_resmoke_config
        include:
          - "*"
    - command: s3.put
      params:
        local_file: generate_tasks_config.tgz
        remote_file: "${project}/${build_variant}/${revision}/generate_tasks/${name}_gen-${build_id}.tgz"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/gzip
        display_name: "Generated Task Config - Execution ${execution}"
    - command: timeout.update
      params:
        exec_timeout_secs: 10800
        timeout_secs: 10800
    - command: generate.tasks
      params:
        files:
          - "src/generated_resmoke_config/${name}.json"
  run jepsen test:
    - command: shell.exec
      params:
        script: "set -o verbose\n\n# Set the TMPDIR environment variable to be a directory in the task's working\n# directory so that temporary files created by processes spawned by jepsen get\n# cleaned up after the task completes. This also ensures the spawned processes\n# aren't impacted by limited space in the mount point for the /tmp directory.\n# We also need to set the _JAVA_OPTIONS environment variable so that lein will\n# recognize this as the default temp directory.\nexport TMPDIR=\"${workdir}/tmp\"\nmkdir -p $TMPDIR\nexport _JAVA_OPTIONS=-Djava.io.tmpdir=$TMPDIR\n\nstart_time=$(date +%s)\nlein run test --test ${jepsen_test_name}                                           \\\n              --mongodb-dir ../                                                    \\\n              --working-dir ${workdir}/src/jepsen-workdir                          \\\n              --clock-skew faketime                                                \\\n              --libfaketime-path ${workdir}/src/libfaketime/build/libfaketime.so.1 \\\n              --mongod-conf mongod_verbose.conf                                    \\\n              --virtualization none                                                \\\n              --nodes-file ../nodes.txt                                            \\\n              ${jepsen_key_time_limit}                                             \\\n              ${jepsen_protocol_version}                                           \\\n              ${jepsen_read_concern}                                               \\\n              ${jepsen_read_with_find_and_modify}                                  \\\n              ${jepsen_storage_engine}                                             \\\n              ${jepsen_time_limit}                                                 \\\n              ${jepsen_write_concern}                                              \\\n              2>&1                                                                 \\\n| tee jepsen_${task_name}_${execution}.log\nend_time=$(date +%s)\nelapsed_secs=$((end_time-start_time))\n# Since we cannot use PIPESTATUS to get the exit code from the \"lein run ...\" pipe in dash shell,\n# we will check the output for success, failure or setup error. Note that 'grep' returns with exit code\n# 0 if it finds a match, and exit code 1 if no match is found.\ngrep -q \"Everything looks good\" jepsen_${task_name}_${execution}.log\ngrep_exit_code=$?\nif [ $grep_exit_code -eq 0 ]; then\n  status='\"pass\"'\n  failures=0\n  final_exit_code=0\nelse\n  grep -q \"Analysis invalid\" jepsen_${task_name}_${execution}.log\n  grep_exit_code=$?\n  if [ $grep_exit_code -eq 0 ]; then\n    status='\"fail\"'\n    failures=1\n    final_exit_code=1\n  else\n    # If the failure is due to setup, then this is considered a system failure.\n    echo $grep_exit_code > jepsen_system_failure_${task_name}_${execution}\n    exit 0\n  fi\nfi\n# Create report.json\necho \"{\\\"failures\\\": $failures, \\\"results\\\": [{\\\"status\\\": $status, \\\"exit_code\\\": $final_exit_code, \\\"test_file\\\": \\\"${task_name}\\\", \\\"start\\\": $start_time, \\\"end\\\": $end_time, \\\"elapsed\\\": $elapsed_secs}]}\" > ../report.json\nexit $final_exit_code\n"
        working_dir: src/jepsen-mongodb
        shell: bash
      type: test
    - command: shell.exec
      params:
        script: "set -o verbose\n# Jepsen system failure if file exists.\nif [ -f jepsen_system_failure_${task_name}_${execution} ]; then\n  exit $(cat jepsen_system_failure_${task_name}_${execution})\nfi\n"
        working_dir: src/jepsen-mongodb
        shell: bash
  apply compile expansions:
    command: expansions.update
    params:
      file: src/compile_expansions.yml
  fetch corpus:
    command: s3.get
    params:
      local_file: ~
      extract_to: src/corpora
      remote_file: "${mongo_fuzzer_corpus}"
      aws_key: "${s3_access_key_id}"
      aws_secret: "${s3_secret_access_key}"
      bucket: fuzzer-artifacts
  tar local client logs:
    command: shell.exec
    params:
      script: "client_logs=$(ls crud*.log fsm*.log 2> /dev/null)\nif [ ! -z \"$client_logs\" ]; then\n  ${tar|tar} czf client-logs.tgz $client_logs\nfi\n"
      working_dir: src
      shell: bash
  process code coverage data:
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/process_code_coverage_data.sh"
  tar hang analyzer debugger files:
    command: archive.targz_pack
    params:
      target: src/mongo-hanganalyzer.tgz
      source_dir: src
      include:
        - "./debugger*.*"
  save disk statistics:
    - command: archive.targz_pack
      params:
        target: diskstats.tgz
        source_dir: "./"
        include:
          - "./mongo-diskstats*"
          - "./mongo-diskstats*.csv"
    - command: s3.put
      params:
        local_file: diskstats.tgz
        remote_file: "${project}/${build_variant}/${revision}/diskstats/mongo-diskstats-${task_id}-${execution}.tgz"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/gzip
        display_name: "Disk Stats - Execution ${execution}"
        optional: true
  save mongo coredumps:
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/gather_mongo_coredumps.sh"
    - command: archive.targz_pack
      params:
        target: mongo-coredumps.tgz
        source_dir: src
        include:
          - "./**.core"
          - "./**.mdmp"
    - command: s3.put
      params:
        local_file: mongo-coredumps.tgz
        remote_file: "${project}/${build_variant}/${revision}/coredumps/mongo-coredumps-${build_id}-${task_name}-${execution}.tgz"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/gzip
        display_name: "Core Dumps - Execution ${execution}"
        optional: true
  save code coverage data:
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/process_code_coverage_data.sh"
    - command: archive.targz_pack
      params:
        target: src/gcov-intermediate-files.tgz
        source_dir: src
        include:
          - "*.gcda.gcov"
    - command: s3.put
      params:
        local_file: src/gcov-intermediate-files.tgz
        remote_file: "${project}/${build_variant}/${revision}/gcov/gcov-intermediate-files-${task_id}-${execution}.tgz"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/gzip
        display_name: "gcov intermediate files - Execution ${execution}"
        optional: true
  generate burn in tags:
    - command: expansions.write
      params:
        file: src/expansions.yml
    - command: shell.exec
      params:
        script: "# Create the Evergreen API credentials\ncat > .evergreen.yml <<END_OF_CREDS\napi_server_host: https://evergreen.mongodb.com/api\napi_key: \"${evergreen_api_key}\"\nuser: \"${evergreen_api_user}\"\nEND_OF_CREDS\n"
        working_dir: src
        silent: true
        shell: bash
      type: test
    - command: shell.exec
      params:
        script: "set -o errexit\n\n${activate_virtualenv}\n\n# Multiversion exclusions can be used when selecting tests.\n$python buildscripts/evergreen_gen_multiversion_tests.py generate-exclude-tags --task-path-suffix=/data/multiversion --output=multiversion_exclude_tags.yml\n\nPATH=$PATH:$HOME $python buildscripts/burn_in_tags.py --expansion-file expansions.yml\n"
        working_dir: src
        shell: bash
      type: test
    - command: archive.targz_pack
      params:
        target: burn_in_tags_gen.tgz
        source_dir: src/generated_burn_in_tags_config
        include:
          - "*"
    - command: s3.put
      params:
        local_file: burn_in_tags_gen.tgz
        remote_file: "${project}/${build_variant}/${revision}/burn_in_tags_gen/burn_in_tags_gen-${build_id}.tgz"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/gzip
        display_name: "Burn_in_tags Task Config - Execution ${execution}"
    - command: generate.tasks
      params:
        files:
          - src/generated_burn_in_tags_config/burn_in_tags_gen.json
  fetch artifacts:
    command: s3.get
    params:
      local_file: ~
      extract_to: src
      remote_file: "${project}/${build_variant}/${revision}/artifacts/${build_id}.tgz"
      aws_key: "${aws_key}"
      aws_secret: "${aws_secret}"
      bucket: mciuploads
  collect system resource info:
    command: shell.exec
    params:
      script: "${activate_virtualenv}\n$python buildscripts/collect_resource_info.py -o system_resource_info.json -i 5\n"
      working_dir: src
      background: true
      system_log: true
      shell: bash
  save hang analyzer debugger files:
    - command: archive.targz_pack
      params:
        target: src/mongo-hanganalyzer.tgz
        source_dir: src
        include:
          - "./debugger*.*"
    - command: s3.put
      params:
        local_file: src/mongo-hanganalyzer.tgz
        remote_file: "${project}/${build_variant}/${revision}/hanganalyzer/mongo-hanganalyzer-${build_id}-${task_name}-${execution}.tgz"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/gzip
        display_name: "Hang Analyzer Output - Execution ${execution}"
        optional: true
  get all modified patch files:
    command: shell.exec
    params:
      script: "set -o verbose\nset -o errexit\n\n# For patch builds gather the modified patch files.\nif [ \"${is_patch}\" = \"true\" ]; then\n  # Get list of patched files\n  git diff HEAD --name-only >> patch_files.txt\n  if [ -d src/mongo/db/modules/enterprise ]; then\n    pushd src/mongo/db/modules/enterprise\n    # Update the patch_files.txt in the mongo repo.\n    git diff HEAD --name-only >> ~1/patch_files.txt\n    popd\n  fi\nfi\n"
      working_dir: src
      shell: bash
  python_set up venv:
    - command: shell.exec
      params:
        script: "# exit immediately if virtualenv is not found\nset -o errexit\n\npython_loc=$(which ${python|/opt/mongodbtoolchain/v3/bin/python3})\nvenv_dir=\"${workdir}/venv\"\n\"$python_loc\" -m venv --system-site-packages \"$venv_dir\"\n\n# venv creates its Scripts/activate file with CLRF endings, which\n# cygwin bash does not like. dos2unix it\n# (See https://bugs.python.org/issue32451)\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  dos2unix \"${workdir}/venv/Scripts/activate\"\nfi\n\nexport VIRTUAL_ENV_DISABLE_PROMPT=yes\n\n# Not all git get project calls clone into ${workdir}/src so we allow\n# callers to tell us where the pip requirements files are.\npip_dir=\"${pip_dir}\"\nif [[ -z $pip_dir ]]; then\n  # Default to most common location\n  pip_dir=\"${workdir}/src/etc/pip\"\nfi\n\n# Same as above we have to use quotes to preserve the\n# Windows path separator\ntoolchain_txt=\"$pip_dir/toolchain-requirements.txt\"\n${activate_virtualenv}\necho \"Upgrading pip to 21.0.1\"\npython -m pip install \"pip==21.0.1\"\npython -m pip install -r \"$toolchain_txt\" -q\npython -m pip freeze > pip-requirements.txt\n"
        shell: bash
    - command: s3.put
      params:
        local_file: pip-requirements.txt
        remote_file: "${project}/${build_variant}/${revision}/pip-requirements-${task_id}-${execution}.txt"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: atext-plain
        display_name: Pip Requirements
  archive disk statistics:
    command: s3.put
    params:
      local_file: diskstats.tgz
      remote_file: "${project}/${build_variant}/${revision}/diskstats/mongo-diskstats-${task_id}-${execution}.tgz"
      aws_key: "${aws_key}"
      aws_secret: "${aws_secret}"
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: "Disk Stats - Execution ${execution}"
      optional: true
  get buildnumber:
    command: keyval.inc
    params:
      destination: builder_num
      key: "${build_variant}_master"
  attach wiki page:
    - command: shell.exec
      params:
        script: "set -o errexit\nset -o verbose\n\n${activate_virtualenv}\n$python -c 'import json; print(json.dumps([{\n  \"name\": \"Wiki: Running Tests from Evergreen Tasks Locally\",\n  \"link\": \"https://github.com/mongodb/mongo/wiki/Running-Tests-from-Evergreen-Tasks-Locally\",\n  \"visibility\": \"public\",\n  \"ignore_for_fetch\": True\n}]))' > wiki_page_location.json\n"
        shell: bash
    - command: attach.artifacts
      params:
        files:
          - wiki_page_location.json
  archive remote EC2 artifacts:
    command: s3.put
    params:
      local_file: src/ec2_artifacts.tgz
      remote_file: "${project}/${build_variant}/${revision}/remote_ec2/remote_ec2_artifacts-${task_id}-${execution}.tgz"
      aws_key: "${aws_key}"
      aws_secret: "${aws_secret}"
      bucket: mciuploads
      permissions: public-read
      content_type: "${content_type|application/gzip}"
      display_name: "Remote EC2 Artifacts - Execution ${execution}"
      optional: true
  save libfuzzertest corpora:
    - command: archive.targz_pack
      params:
        target: corpora.tgz
        source_dir: src/corpora-merged
        include:
          - "**"
    - command: s3.put
      params:
        local_file: "corpora.${ext|tgz}"
        remote_file: "${mongo_fuzzer_corpus}"
        aws_key: "${s3_access_key_id}"
        aws_secret: "${s3_secret_access_key}"
        bucket: fuzzer-artifacts
        permissions: private
        content_type: "${content_type|application/gzip}"
        display_name: Fuzzer Tests Corpus Tar Archive
        optional: true
        visibility: signed
    - command: s3.put
      params:
        local_file: "corpora.${ext|tgz}"
        remote_file: "${mongo_fuzzer_corpus_mciuploads}"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: private
        content_type: "${content_type|application/gzip}"
        display_name: Input Corpora
        optional: true
        visibility: signed
  umount shared scons directory:
    command: shell.exec
    params:
      script: "set -o errexit\nset -o verbose\n\nif [ \"${disable_shared_scons_cache}\" = true ]; then\n    exit\nfi\nif [ \"${scons_cache_scope}\" = \"shared\" ]; then\n    if [ \"Windows_NT\" = \"$OS\" ]; then\n        net use X: /delete || true\n    else\n        ${set_sudo}\n        $sudo umount /efs || true\n    fi\nfi\n"
      working_dir: src
      shell: bash
  fetch binaries:
    command: s3.get
    params:
      local_file: src/mongo-binaries.tgz
      extract_to: ~
      remote_file: "${mongo_binaries}"
      aws_key: "${aws_key}"
      aws_secret: "${aws_secret}"
      bucket: mciuploads
  upload new corpus for mciuploads:
    command: s3.put
    params:
      local_file: "corpora.${ext|tgz}"
      remote_file: "${mongo_fuzzer_corpus_mciuploads}"
      aws_key: "${aws_key}"
      aws_secret: "${aws_secret}"
      bucket: mciuploads
      permissions: private
      content_type: "${content_type|application/gzip}"
      display_name: Input Corpora
      optional: true
      visibility: signed
  send benchmark results:
    command: json.send
    params:
      file: src/perf.json
      name: perf
  do jepsen setup:
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/do_jepsen_setup/build_libfaketime.sh"
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/do_jepsen_setup/install_jepsen.sh"
    - command: shell.exec
      params:
        script: "set -o errexit\n${activate_virtualenv}\n$python -c 'import socket; num_nodes = 5; print(\"\\n\".join([\"%s:%d\" % (socket.gethostname(), port) for port in range(20000, 20000 + num_nodes)]))' > nodes.txt\n"
        working_dir: src
        shell: bash
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/do_jepsen_setup/move_binaries.sh"
  generate selected tests:
    - command: expansions.write
      params:
        file: src/expansions.yml
    - command: shell.exec
      params:
        script: "# Create the Evergreen API credentials\ncat > .evergreen.yml <<END_OF_CREDS\napi_server_host: https://evergreen.mongodb.com/api\napi_key: \"${evergreen_api_key}\"\nuser: \"${evergreen_api_user}\"\nEND_OF_CREDS\n"
        working_dir: src
        silent: true
        shell: bash
      type: test
    - command: shell.exec
      params:
        script: "# Create the Evergreen API credentials\ncat > .selected_tests.yml <<END_OF_CREDS\nurl: \"https://selected-tests.server-tig.prod.corp.mongodb.com\"\nproject: \"${project}\"\nauth_user: \"${selected_tests_auth_user}\"\nauth_token: \"${selected_tests_auth_token}\"\nEND_OF_CREDS\n"
        working_dir: src
        silent: true
        shell: bash
      type: test
    - command: shell.exec
      params:
        script: "set -o errexit\nset -o verbose\n\n# Only run on master branch\nif [ \"${project}\" == \"mongodb-mongo-master\" -a \"${is_patch}\" == \"true\" ]; then\n  ${activate_virtualenv}\n  PATH=$PATH:$HOME $python buildscripts/selected_tests.py --expansion-file expansions.yml --selected-tests-config .selected_tests.yml\nfi\n"
        working_dir: src
        shell: bash
      type: test
    - command: archive.targz_pack
      params:
        target: generate_tasks_config.tgz
        source_dir: src/selected_tests_config
        include:
          - "*"
    - command: s3.put
      params:
        local_file: generate_tasks_config.tgz
        remote_file: "${project}/${build_variant}/${revision}/generate_tasks/${task_name}-${build_id}.tgz"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: "${content_type|application/gzip}"
        display_name: "Generated Task Config - Execution ${execution}"
        optional: true
    - command: generate.tasks
      params:
        files:
          - src/selected_tests_config/*.json
  fetch legacy corpus:
    command: s3.get
    params:
      local_file: ~
      extract_to: src/corpora-merged
      remote_file: "${project}/corpus/mongo-${build_variant}-latest.tgz"
      aws_key: "${s3_access_key_id}"
      aws_secret: "${s3_secret_access_key}"
      bucket: fuzzer-artifacts
  run hang analyzer:
    command: shell.exec
    params:
      script: "set -o verbose\n\n# Set what processes to look for. For most tasks, we rely on resmoke to figure out its subprocesses\n# and run the hang analyzer on those. For non-resmoke tasks, we enumerate the process list here.\nif [[ ${task_name} == *\"jepsen\"* ]]; then\n  hang_analyzer_option=\"-o file -o stdout -p dbtest,java,mongo,mongod,mongos,python,_test\";\nelse\n  hang_analyzer_option=\"-o file -o stdout -m exact -p python\"\nfi\n\n${activate_virtualenv}\necho \"Calling the hang analyzer: PATH=\\\"/opt/mongodbtoolchain/gdb/bin:$PATH\\\" $python buildscripts/resmoke.py hang-analyzer $hang_analyzer_option\"\nPATH=\"/opt/mongodbtoolchain/gdb/bin:$PATH\" $python buildscripts/resmoke.py hang-analyzer $hang_analyzer_option\n\n# Call hang analyzer for tasks that are running remote mongo processes\nif [ -n \"${private_ip_address}\" ]; then\n  $python buildscripts/resmoke.py powercycle remote-hang-analyzer\nfi\n"
      working_dir: src
      shell: bash
  extract binaries:
    command: shell.exec
    params:
      script: "set -o errexit\n${decompress|tar xzvf} mongo-binaries.tgz\n"
      working_dir: src
      shell: bash
  run packager.py:
    command: shell.exec
    params:
      script: "set -o errexit\nset -o verbose\n\n${activate_virtualenv}\nif [ \"${has_packages|}\" = \"true\" ] ; then\n    cd buildscripts\n    $python ${packager_script} --prefix `pwd`/.. --distros ${packager_distro} --tarball `pwd`/../mongodb-dist.tgz -s ${version} -m HEAD -a ${packager_arch}\n    cd ..\nfi\n"
      working_dir: src
      shell: bash
  save system resource information:
    - command: archive.targz_pack
      params:
        target: system-resource-info.tgz
        source_dir: src
        include:
          - "./system_resource_info*"
    - command: s3.put
      params:
        local_file: system-resource-info.tgz
        remote_file: "${project}/${build_variant}/${revision}/systemresourceinfo/mongo-system-resource-info-${task_id}-${execution}.tgz"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/gzip
        display_name: "System Resource Info - Execution ${execution}"
        optional: true
  archive local client logs:
    command: s3.put
    params:
      local_file: src/client-logs.tgz
      remote_file: "${project}/${build_variant}/${revision}/client_logs/mongo-client-logs-${task_id}-${execution}.tgz"
      aws_key: "${aws_key}"
      aws_secret: "${aws_secret}"
      bucket: mciuploads
      permissions: public-read
      content_type: "${content_type|application/gzip}"
      display_name: "Client logs - Execution ${execution}"
      optional: true
  update task timeout expansions:
    command: expansions.update
    params:
      file: src/task_timeout_expansions.yml
      ignore_missing_file: true
  cleanup FUSE watchdog:
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/cleanup_fuse_watchdog.sh"
  attach scons logs:
    - command: s3.put
      params:
        local_file: src/build/scons/config.log
        remote_file: "${project}/${build_variant}/${revision}/artifacts/scons-config.log.${build_id}-${task_name}-${execution}"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: text/plain
        display_name: SCons configure log
        optional: true
    - command: s3.put
      params:
        local_file: src/scons_cache.log
        remote_file: "${project}/${build_variant}/${revision}/artifacts/scons-cache.log.${build_id}-${task_name}.${execution}"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: text/plain
        display_name: SCons cache debug log
        optional: true
  do benchmark setup:
    - command: expansions.update
      params:
        updates:
          - key: activate_virtualenv
            value: "# check if virtualenv is set up\nif [ -d \"${workdir}/venv\" ]; then\n  if [ \"Windows_NT\" = \"$OS\" ]; then\n    # Need to quote the path on Windows to preserve the separator.\n    . \"${workdir}/venv/Scripts/activate\" 2> /tmp/activate_error.log\n  else\n    . ${workdir}/venv/bin/activate 2> /tmp/activate_error.log\n  fi\n  if [ $? -ne 0 ]; then\n    echo \"Failed to activate virtualenv: $(cat /tmp/activate_error.log)\"\n  fi\n  python=python\nelse\n  python=${python|/opt/mongodbtoolchain/v3/bin/python3}\nfi\n\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  export PYTHONPATH=\"$PYTHONPATH;$(cygpath -w ${workdir}/src)\"\nelse\n  export PYTHONPATH=\"$PYTHONPATH:${workdir}/src\"\nfi\n\necho \"python set to $(which $python)\"\n"
          - key: add_nodejs_to_path
            value: "# Add node and npm binaries to PATH\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  # An \"npm\" directory might not have been created in %APPDATA% by the Windows installer.\n  # Work around the issue by specifying a different %APPDATA% path.\n  # See: https://github.com/nodejs/node-v0.x-archive/issues/8141\n  export APPDATA=${workdir}/npm-app-data\n  export PATH=\"$PATH:/cygdrive/c/Program Files (x86)/nodejs\" # Windows location\n  # TODO: this is to work around BUILD-8652\n  cd \"$(pwd -P | sed 's,cygdrive/c/,cygdrive/z/,')\"\nelse\n  export PATH=\"$PATH:/opt/node/bin\"\nfi\n"
          - key: posix_workdir
            value: "eval 'if [ \"Windows_NT\" = \"$OS\" ]; then echo $(cygpath -u \"${workdir}\"); else echo ${workdir}; fi'"
          - key: set_sudo
            value: "set -o > /tmp/settings.log\nset +o errexit\ngrep errexit /tmp/settings.log | grep on\nerrexit_on=$?\n# Set errexit \"off\".\nset +o errexit\nsudo=\n# Use sudo, if it is supported.\nsudo date > /dev/null 2>&1\nif [ $? -eq 0 ]; then\n  sudo=sudo\nfi\n# Set errexit \"on\", if previously enabled.\nif [ $errexit_on -eq 0 ]; then\n  set -o errexit\nfi\n"
          - key: mongo_binaries
            value: "${project}/${build_variant}/${revision}/binaries/mongo-${build_id}.${ext|tgz}"
          - key: mongo_cryptd
            value: "${project}/${build_variant}/${revision}/binaries/mongo-cryptd-${build_id}.${ext|tgz}"
          - key: mongo_cryptd_debugsymbols
            value: "${project}/${build_variant}/${revision}/binaries/mongo-cryptd-debugsymbols-${build_id}.${ext|tgz}"
          - key: mh_archive
            value: "${project}/${build_variant}/${revision}/binaries/mh-${build_id}.${ext|tgz}"
          - key: mh_debugsymbols
            value: "${project}/${build_variant}/${revision}/debugsymbols/mh-debugsymbols-${build_id}.${ext|tgz}"
          - key: mongo_debugsymbols
            value: "${project}/${build_variant}/${revision}/debugsymbols/debugsymbols-${build_id}.${ext|tgz}"
          - key: mongo_shell
            value: "${project}/${build_variant}/${revision}/binaries/mongo-shell-${build_id}.${ext|tgz}"
          - key: mongo_shell_debugsymbols
            value: "${project}/${build_variant}/${revision}/binaries/mongo-shell-debugsymbols-${build_id}.${ext|tgz}"
          - key: mongo_fuzzer_corpus_mciuploads
            value: "${project}/${build_variant}/${revision}/libfuzzer-corpora/corpora-${build_id}.${ext|tgz}"
          - key: mongo_fuzzer_corpus
            value: "corpora-${project}-${build_variant}.${ext|tgz}"
          - key: skip_tests
            value: "skip_test-${build_id}"
    - command: shell.exec
      params:
        script: "# exit immediately if virtualenv is not found\nset -o errexit\n\npython_loc=$(which ${python|/opt/mongodbtoolchain/v3/bin/python3})\nvenv_dir=\"${workdir}/venv\"\n\"$python_loc\" -m venv --system-site-packages \"$venv_dir\"\n\n# venv creates its Scripts/activate file with CLRF endings, which\n# cygwin bash does not like. dos2unix it\n# (See https://bugs.python.org/issue32451)\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  dos2unix \"${workdir}/venv/Scripts/activate\"\nfi\n\nexport VIRTUAL_ENV_DISABLE_PROMPT=yes\n\n# Not all git get project calls clone into ${workdir}/src so we allow\n# callers to tell us where the pip requirements files are.\npip_dir=\"${pip_dir}\"\nif [[ -z $pip_dir ]]; then\n  # Default to most common location\n  pip_dir=\"${workdir}/src/etc/pip\"\nfi\n\n# Same as above we have to use quotes to preserve the\n# Windows path separator\ntoolchain_txt=\"$pip_dir/toolchain-requirements.txt\"\n${activate_virtualenv}\necho \"Upgrading pip to 21.0.1\"\npython -m pip install \"pip==21.0.1\"\npython -m pip install -r \"$toolchain_txt\" -q\npython -m pip freeze > pip-requirements.txt\n"
        shell: bash
    - command: s3.put
      params:
        local_file: pip-requirements.txt
        remote_file: "${project}/${build_variant}/${revision}/pip-requirements-${task_id}-${execution}.txt"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: atext-plain
        display_name: Pip Requirements
    - command: keyval.inc
      params:
        destination: builder_num
        key: "${build_variant}_master"
    - command: shell.exec
      params:
        script: "cat > mci.buildlogger <<END_OF_CREDS\nslavename='${slave}'\npasswd='${passwd}'\nbuilder='MCI_${build_variant}'\nbuild_num=${builder_num}\nbuild_phase='${task_name}_${execution}'\nEND_OF_CREDS\n"
        working_dir: src
        silent: true
        shell: bash
    - command: s3.get
      params:
        local_file: ~
        extract_to: src
        remote_file: "${project}/${build_variant}/${revision}/benchmarks/${build_id}.tgz"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
  generate randomized multiversion tasks:
    - command: expansions.update
      params:
        updates:
          - key: activate_virtualenv
            value: "# check if virtualenv is set up\nif [ -d \"${workdir}/venv\" ]; then\n  if [ \"Windows_NT\" = \"$OS\" ]; then\n    # Need to quote the path on Windows to preserve the separator.\n    . \"${workdir}/venv/Scripts/activate\" 2> /tmp/activate_error.log\n  else\n    . ${workdir}/venv/bin/activate 2> /tmp/activate_error.log\n  fi\n  if [ $? -ne 0 ]; then\n    echo \"Failed to activate virtualenv: $(cat /tmp/activate_error.log)\"\n  fi\n  python=python\nelse\n  python=${python|/opt/mongodbtoolchain/v3/bin/python3}\nfi\n\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  export PYTHONPATH=\"$PYTHONPATH;$(cygpath -w ${workdir}/src)\"\nelse\n  export PYTHONPATH=\"$PYTHONPATH:${workdir}/src\"\nfi\n\necho \"python set to $(which $python)\"\n"
          - key: add_nodejs_to_path
            value: "# Add node and npm binaries to PATH\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  # An \"npm\" directory might not have been created in %APPDATA% by the Windows installer.\n  # Work around the issue by specifying a different %APPDATA% path.\n  # See: https://github.com/nodejs/node-v0.x-archive/issues/8141\n  export APPDATA=${workdir}/npm-app-data\n  export PATH=\"$PATH:/cygdrive/c/Program Files (x86)/nodejs\" # Windows location\n  # TODO: this is to work around BUILD-8652\n  cd \"$(pwd -P | sed 's,cygdrive/c/,cygdrive/z/,')\"\nelse\n  export PATH=\"$PATH:/opt/node/bin\"\nfi\n"
          - key: posix_workdir
            value: "eval 'if [ \"Windows_NT\" = \"$OS\" ]; then echo $(cygpath -u \"${workdir}\"); else echo ${workdir}; fi'"
          - key: set_sudo
            value: "set -o > /tmp/settings.log\nset +o errexit\ngrep errexit /tmp/settings.log | grep on\nerrexit_on=$?\n# Set errexit \"off\".\nset +o errexit\nsudo=\n# Use sudo, if it is supported.\nsudo date > /dev/null 2>&1\nif [ $? -eq 0 ]; then\n  sudo=sudo\nfi\n# Set errexit \"on\", if previously enabled.\nif [ $errexit_on -eq 0 ]; then\n  set -o errexit\nfi\n"
          - key: mongo_binaries
            value: "${project}/${build_variant}/${revision}/binaries/mongo-${build_id}.${ext|tgz}"
          - key: mongo_cryptd
            value: "${project}/${build_variant}/${revision}/binaries/mongo-cryptd-${build_id}.${ext|tgz}"
          - key: mongo_cryptd_debugsymbols
            value: "${project}/${build_variant}/${revision}/binaries/mongo-cryptd-debugsymbols-${build_id}.${ext|tgz}"
          - key: mh_archive
            value: "${project}/${build_variant}/${revision}/binaries/mh-${build_id}.${ext|tgz}"
          - key: mh_debugsymbols
            value: "${project}/${build_variant}/${revision}/debugsymbols/mh-debugsymbols-${build_id}.${ext|tgz}"
          - key: mongo_debugsymbols
            value: "${project}/${build_variant}/${revision}/debugsymbols/debugsymbols-${build_id}.${ext|tgz}"
          - key: mongo_shell
            value: "${project}/${build_variant}/${revision}/binaries/mongo-shell-${build_id}.${ext|tgz}"
          - key: mongo_shell_debugsymbols
            value: "${project}/${build_variant}/${revision}/binaries/mongo-shell-debugsymbols-${build_id}.${ext|tgz}"
          - key: mongo_fuzzer_corpus_mciuploads
            value: "${project}/${build_variant}/${revision}/libfuzzer-corpora/corpora-${build_id}.${ext|tgz}"
          - key: mongo_fuzzer_corpus
            value: "corpora-${project}-${build_variant}.${ext|tgz}"
          - key: skip_tests
            value: "skip_test-${build_id}"
    - command: shell.exec
      params:
        script: "# exit immediately if virtualenv is not found\nset -o errexit\n\npython_loc=$(which ${python|/opt/mongodbtoolchain/v3/bin/python3})\nvenv_dir=\"${workdir}/venv\"\n\"$python_loc\" -m venv --system-site-packages \"$venv_dir\"\n\n# venv creates its Scripts/activate file with CLRF endings, which\n# cygwin bash does not like. dos2unix it\n# (See https://bugs.python.org/issue32451)\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  dos2unix \"${workdir}/venv/Scripts/activate\"\nfi\n\nexport VIRTUAL_ENV_DISABLE_PROMPT=yes\n\n# Not all git get project calls clone into ${workdir}/src so we allow\n# callers to tell us where the pip requirements files are.\npip_dir=\"${pip_dir}\"\nif [[ -z $pip_dir ]]; then\n  # Default to most common location\n  pip_dir=\"${workdir}/src/etc/pip\"\nfi\n\n# Same as above we have to use quotes to preserve the\n# Windows path separator\ntoolchain_txt=\"$pip_dir/toolchain-requirements.txt\"\n${activate_virtualenv}\necho \"Upgrading pip to 21.0.1\"\npython -m pip install \"pip==21.0.1\"\npython -m pip install -r \"$toolchain_txt\" -q\npython -m pip freeze > pip-requirements.txt\n"
        shell: bash
    - command: s3.put
      params:
        local_file: pip-requirements.txt
        remote_file: "${project}/${build_variant}/${revision}/pip-requirements-${task_id}-${execution}.txt"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: atext-plain
        display_name: Pip Requirements
    - command: shell.exec
      params:
        script: "# Create the Evergreen API credentials\ncat > .evergreen.yml <<END_OF_CREDS\napi_server_host: https://evergreen.mongodb.com/api\napi_key: \"${evergreen_api_key}\"\nuser: \"${evergreen_api_user}\"\nEND_OF_CREDS\n"
        working_dir: src
        silent: true
        shell: bash
      type: test
    - command: expansions.write
      params:
        file: src/expansions.yml
    - command: shell.exec
      params:
        script: "set -o errexit\n\n${activate_virtualenv}\n$python buildscripts/evergreen_generate_resmoke_tasks.py --expansion-file expansions.yml --verbose\n"
        working_dir: src
        shell: bash
      type: test
    - command: shell.exec
      params:
        script: "set -o errexit\nset -o verbose\n\n${activate_virtualenv}\n\nrm -rf /data/install /data/multiversion\n\nedition=\"${multiversion_edition|base}\"\nplatform=\"${multiversion_platform|linux_x86_64}\"\narchitecture=\"${multiversion_architecture|x86_64}\"\n\n$python buildscripts/resmoke.py setup-multiversion   \\\n  --installDir /data/install                         \\\n  --linkDir /data/multiversion                       \\\n  --edition $edition                                 \\\n  --platform $platform                               \\\n  --architecture $architecture                       \\\n  --githubOauthToken \"${github_token}\"               \\\n  --useLatest 3.6 4.0\n\n# The platform and architecture for how some of the binaries are reported in\n# https://downloads.mongodb.org/full.json changed between MongoDB 4.0 and MongoDB 4.2.\n# Certain build variants define additional multiversion_*_42_or_later expansions in order to\n# be able to fetch a complete set of versions.\n\nif [ ! -z \"${multiversion_edition_42_or_later}\" ]; then\n  edition=\"${multiversion_edition_42_or_later}\"\nfi\n\nif [ ! -z \"${multiversion_platform_42_or_later}\" ]; then\n  platform=\"${multiversion_platform_42_or_later}\"\nfi\n\nif [ ! -z \"${multiversion_architecture_42_or_later}\" ]; then\n  architecture=\"${multiversion_architecture_42_or_later}\"\nfi\n\n$python buildscripts/resmoke.py setup-multiversion   \\\n  --installDir /data/install                         \\\n  --linkDir /data/multiversion                       \\\n  --edition $edition                                 \\\n  --platform $platform                               \\\n  --architecture $architecture                       \\\n  --githubOauthToken \"${github_token}\"               \\\n  --useLatest 4.2 4.2.1\n\n# The platform and architecture for how some of the binaries are reported in\n# https://downloads.mongodb.org/full.json changed between MongoDB 4.2 and MongoDB 4.4.\n# Certain build variants define additional multiversion_*_44_or_later expansions in order to\n# be able to fetch a complete set of versions.\n\nif [ ! -z \"${multiversion_edition_44_or_later}\" ]; then\n  edition=\"${multiversion_edition_44_or_later}\"\nfi\n\nif [ ! -z \"${multiversion_platform_44_or_later}\" ]; then\n  platform=\"${multiversion_platform_44_or_later}\"\nfi\n\nif [ ! -z \"${multiversion_architecture_44_or_later}\" ]; then\n  architecture=\"${multiversion_architecture_44_or_later}\"\nfi\n\n$python buildscripts/resmoke.py setup-multiversion   \\\n  --installDir /data/install                         \\\n  --linkDir /data/multiversion                       \\\n  --edition $edition                                 \\\n  --platform $platform                               \\\n  --architecture $architecture                       \\\n  --githubOauthToken \"${github_token}\"               \\\n  --useLatest 4.4 4.7 4.8 4.9\n\n# This is primarily for tests for infrastructure which don't always need the latest\n# binaries.\nif [ ! -z \"${install_master_bin}\" ]; then\n  $python buildscripts/resmoke.py setup-multiversion   \\\n    --installDir /data/install                         \\\n    --linkDir /data/multiversion                       \\\n    --edition $edition                                 \\\n    --platform $platform                               \\\n    --architecture $architecture                       \\\n    --githubOauthToken \"${github_token}\"               \\\n    --useLatest master\nfi\n"
        working_dir: src
        shell: bash
    - command: shell.exec
      params:
        script: "set -o errexit\nset -o verbose\n\n${activate_virtualenv}\n$python buildscripts/evergreen_gen_multiversion_tests.py generate-exclude-tags --task-path-suffix=${use_multiversion}\n"
        working_dir: src
        shell: bash
    - command: archive.targz_pack
      params:
        target: generate_tasks_config.tgz
        source_dir: src/generated_resmoke_config
        include:
          - "*"
    - command: s3.put
      params:
        local_file: generate_tasks_config.tgz
        remote_file: "${project}/${build_variant}/${revision}/generate_tasks/${task_name}-${build_id}.tgz"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/gzip
        display_name: "Generated Task Config - Execution ${execution}"
        optional: true
    - command: timeout.update
      params:
        exec_timeout_secs: 10800
        timeout_secs: 10800
    - command: generate.tasks
      params:
        files:
          - src/generated_resmoke_config/*.json
  git get project:
    - command: git.get_project
      params:
        directory: "${git_project_directory|src}"
        revisions:
          wtdevelop: "${wtdevelop_rev}"
          enterprise: "${enterprise_rev}"
  tar disk statistics:
    command: archive.targz_pack
    params:
      target: diskstats.tgz
      source_dir: "./"
      include:
        - "./mongo-diskstats*"
        - "./mongo-diskstats*.csv"
  get added and modified patch files:
    command: shell.exec
    params:
      script: "set -o verbose\nset -o errexit\n\ngit diff HEAD --name-only --line-prefix=\"${workdir}/src/\" --diff-filter=d >> modified_and_created_patch_files.txt\nif [ -d src/mongo/db/modules/enterprise ]; then\n  pushd src/mongo/db/modules/enterprise\n  git diff HEAD --name-only --line-prefix=\"${workdir}/src/src/mongo/db/modules/enterprise/\" --diff-filter=d >> ~1/modified_and_created_patch_files.txt\n  popd\nfi\n"
      working_dir: src
      shell: bash
  archive new corpus:
    command: archive.targz_pack
    params:
      target: corpora.tgz
      source_dir: src/corpora-merged
      include:
        - "**"
  save powercycle artifacts:
    command: shell.exec
    params:
      script: "set -o verbose\n\nif [ ! -f powercycle_ip_address.yml ]; then\n  exit 0\nfi\n\n${activate_virtualenv}\n$python buildscripts/resmoke.py powercycle save-diagnostics\n"
      working_dir: src
      shell: bash
  update task timeout:
    command: timeout.update
    params:
      exec_timeout_secs: "${timeout_secs}"
  configure selected tests credentials:
    command: shell.exec
    params:
      script: "# Create the Evergreen API credentials\ncat > .selected_tests.yml <<END_OF_CREDS\nurl: \"https://selected-tests.server-tig.prod.corp.mongodb.com\"\nproject: \"${project}\"\nauth_user: \"${selected_tests_auth_user}\"\nauth_token: \"${selected_tests_auth_token}\"\nEND_OF_CREDS\n"
      working_dir: src
      silent: true
      shell: bash
    type: test
  configure evergreen api credentials:
    command: shell.exec
    params:
      script: "# Create the Evergreen API credentials\ncat > .evergreen.yml <<END_OF_CREDS\napi_server_host: https://evergreen.mongodb.com/api\napi_key: \"${evergreen_api_key}\"\nuser: \"${evergreen_api_user}\"\nEND_OF_CREDS\n"
      working_dir: src
      silent: true
      shell: bash
    type: test
  monitor process threads:
    command: shell.exec
    params:
      script: "proc_list=\"(java|lein|mongo|python|_test$|_test\\.exe$)\"\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  get_pids() {\n    proc_pids=$(tasklist /fo:csv |\n                awk -F'\",\"' '{x=$1; gsub(\"\\\"\",\"\",x); print $2, x}' |\n                grep -iE $1 |\n                cut -f1 -d ' ');\n  }\n  get_process_info() {\n    proc_name=\"\";\n    proc_info=$(wmic process where \"ProcessId=\\\"$1\\\"\" get \"Name,ProcessId,ThreadCount\" /format:csv 2> /dev/null | grep $1);\n    if [ ! -z $proc_info ]; then\n      proc_name=$(echo $proc_info | cut -f2 -d ',');\n      proc_threads=$(echo $proc_info | cut -f4 -d ',');\n    fi;\n  }\nelse\n  get_pids() { proc_pids=$(pgrep $1); }\n  get_process_info() {\n    proc_name=$(ps -p $1 -o comm=);\n    # /proc is available on Linux platforms\n    if [ -f /proc/$1/status ]; then\n      ${set_sudo}\n      proc_threads=$($sudo grep Threads /proc/$1/status | sed \"s/\\s//g\" | cut -f2 -d \":\");\n    else\n      proc_threads=$(ps -AM $1 | grep -vc PID);\n    fi;\n  }\nfi\nwhile [ 1 ]\ndo\n  get_pids $proc_list\n  if [ ! -z \"$proc_pids\" ]; then\n    printf \"Running process/thread counter\\n\"\n    printf \"PROCESS\\tPID\\tTHREADS\\n\"\n  fi\n  for pid in $proc_pids\n  do\n    get_process_info $pid\n    if [ ! -z \"$proc_name\" ]; then\n      printf \"$proc_name\\t$pid\\t$proc_threads\\n\"\n    fi\n  done\n  sleep 60\ndone\n"
      background: true
      system_log: true
      shell: bash
  set task expansion macros:
    command: expansions.update
    params:
      updates:
        - key: activate_virtualenv
          value: "# check if virtualenv is set up\nif [ -d \"${workdir}/venv\" ]; then\n  if [ \"Windows_NT\" = \"$OS\" ]; then\n    # Need to quote the path on Windows to preserve the separator.\n    . \"${workdir}/venv/Scripts/activate\" 2> /tmp/activate_error.log\n  else\n    . ${workdir}/venv/bin/activate 2> /tmp/activate_error.log\n  fi\n  if [ $? -ne 0 ]; then\n    echo \"Failed to activate virtualenv: $(cat /tmp/activate_error.log)\"\n  fi\n  python=python\nelse\n  python=${python|/opt/mongodbtoolchain/v3/bin/python3}\nfi\n\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  export PYTHONPATH=\"$PYTHONPATH;$(cygpath -w ${workdir}/src)\"\nelse\n  export PYTHONPATH=\"$PYTHONPATH:${workdir}/src\"\nfi\n\necho \"python set to $(which $python)\"\n"
        - key: add_nodejs_to_path
          value: "# Add node and npm binaries to PATH\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  # An \"npm\" directory might not have been created in %APPDATA% by the Windows installer.\n  # Work around the issue by specifying a different %APPDATA% path.\n  # See: https://github.com/nodejs/node-v0.x-archive/issues/8141\n  export APPDATA=${workdir}/npm-app-data\n  export PATH=\"$PATH:/cygdrive/c/Program Files (x86)/nodejs\" # Windows location\n  # TODO: this is to work around BUILD-8652\n  cd \"$(pwd -P | sed 's,cygdrive/c/,cygdrive/z/,')\"\nelse\n  export PATH=\"$PATH:/opt/node/bin\"\nfi\n"
        - key: posix_workdir
          value: "eval 'if [ \"Windows_NT\" = \"$OS\" ]; then echo $(cygpath -u \"${workdir}\"); else echo ${workdir}; fi'"
        - key: set_sudo
          value: "set -o > /tmp/settings.log\nset +o errexit\ngrep errexit /tmp/settings.log | grep on\nerrexit_on=$?\n# Set errexit \"off\".\nset +o errexit\nsudo=\n# Use sudo, if it is supported.\nsudo date > /dev/null 2>&1\nif [ $? -eq 0 ]; then\n  sudo=sudo\nfi\n# Set errexit \"on\", if previously enabled.\nif [ $errexit_on -eq 0 ]; then\n  set -o errexit\nfi\n"
        - key: mongo_binaries
          value: "${project}/${build_variant}/${revision}/binaries/mongo-${build_id}.${ext|tgz}"
        - key: mongo_cryptd
          value: "${project}/${build_variant}/${revision}/binaries/mongo-cryptd-${build_id}.${ext|tgz}"
        - key: mongo_cryptd_debugsymbols
          value: "${project}/${build_variant}/${revision}/binaries/mongo-cryptd-debugsymbols-${build_id}.${ext|tgz}"
        - key: mh_archive
          value: "${project}/${build_variant}/${revision}/binaries/mh-${build_id}.${ext|tgz}"
        - key: mh_debugsymbols
          value: "${project}/${build_variant}/${revision}/debugsymbols/mh-debugsymbols-${build_id}.${ext|tgz}"
        - key: mongo_debugsymbols
          value: "${project}/${build_variant}/${revision}/debugsymbols/debugsymbols-${build_id}.${ext|tgz}"
        - key: mongo_shell
          value: "${project}/${build_variant}/${revision}/binaries/mongo-shell-${build_id}.${ext|tgz}"
        - key: mongo_shell_debugsymbols
          value: "${project}/${build_variant}/${revision}/binaries/mongo-shell-debugsymbols-${build_id}.${ext|tgz}"
        - key: mongo_fuzzer_corpus_mciuploads
          value: "${project}/${build_variant}/${revision}/libfuzzer-corpora/corpora-${build_id}.${ext|tgz}"
        - key: mongo_fuzzer_corpus
          value: "corpora-${project}-${build_variant}.${ext|tgz}"
        - key: skip_tests
          value: "skip_test-${build_id}"
  evg_api_configure api credentials:
    - command: shell.exec
      params:
        script: "# Create the Evergreen API credentials\ncat > .evergreen.yml <<END_OF_CREDS\napi_server_host: https://evergreen.mongodb.com/api\napi_key: \"${evergreen_api_key}\"\nuser: \"${evergreen_api_user}\"\nEND_OF_CREDS\n"
        working_dir: src
        silent: true
        shell: bash
      type: test
  burn_in_burn_in_tests:
    - command: shell.exec
      params:
        script: "# exit immediately if virtualenv is not found\nset -o errexit\n\npython_loc=$(which ${python|/opt/mongodbtoolchain/v3/bin/python3})\nvenv_dir=\"${workdir}/venv\"\n\"$python_loc\" -m venv --system-site-packages \"$venv_dir\"\n\n# venv creates its Scripts/activate file with CLRF endings, which\n# cygwin bash does not like. dos2unix it\n# (See https://bugs.python.org/issue32451)\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  dos2unix \"${workdir}/venv/Scripts/activate\"\nfi\n\nexport VIRTUAL_ENV_DISABLE_PROMPT=yes\n\n# Not all git get project calls clone into ${workdir}/src so we allow\n# callers to tell us where the pip requirements files are.\npip_dir=\"${pip_dir}\"\nif [[ -z $pip_dir ]]; then\n  # Default to most common location\n  pip_dir=\"${workdir}/src/etc/pip\"\nfi\n\n# Same as above we have to use quotes to preserve the\n# Windows path separator\ntoolchain_txt=\"$pip_dir/toolchain-requirements.txt\"\n${activate_virtualenv}\necho \"Upgrading pip to 21.0.1\"\npython -m pip install \"pip==21.0.1\"\npython -m pip install -r \"$toolchain_txt\" -q\npython -m pip freeze > pip-requirements.txt\n"
        shell: bash
    - command: s3.put
      params:
        local_file: pip-requirements.txt
        remote_file: "${project}/${build_variant}/${revision}/pip-requirements-${task_id}-${execution}.txt"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: atext-plain
        display_name: Pip Requirements
    - command: shell.exec
      params:
        script: "# Create the Evergreen API credentials\ncat > .evergreen.yml <<END_OF_CREDS\napi_server_host: https://evergreen.mongodb.com/api\napi_key: \"${evergreen_api_key}\"\nuser: \"${evergreen_api_user}\"\nEND_OF_CREDS\n"
        working_dir: src
        silent: true
        shell: bash
      type: test
    - command: shell.exec
      params:
        script: "set -o errexit\nset -o verbose\n\n${activate_virtualenv}\n\nrm -rf /data/install /data/multiversion\n\nedition=\"${multiversion_edition|base}\"\nplatform=\"${multiversion_platform|linux_x86_64}\"\narchitecture=\"${multiversion_architecture|x86_64}\"\n\n$python buildscripts/resmoke.py setup-multiversion   \\\n  --installDir /data/install                         \\\n  --linkDir /data/multiversion                       \\\n  --edition $edition                                 \\\n  --platform $platform                               \\\n  --architecture $architecture                       \\\n  --githubOauthToken \"${github_token}\"               \\\n  --useLatest 3.6 4.0\n\n# The platform and architecture for how some of the binaries are reported in\n# https://downloads.mongodb.org/full.json changed between MongoDB 4.0 and MongoDB 4.2.\n# Certain build variants define additional multiversion_*_42_or_later expansions in order to\n# be able to fetch a complete set of versions.\n\nif [ ! -z \"${multiversion_edition_42_or_later}\" ]; then\n  edition=\"${multiversion_edition_42_or_later}\"\nfi\n\nif [ ! -z \"${multiversion_platform_42_or_later}\" ]; then\n  platform=\"${multiversion_platform_42_or_later}\"\nfi\n\nif [ ! -z \"${multiversion_architecture_42_or_later}\" ]; then\n  architecture=\"${multiversion_architecture_42_or_later}\"\nfi\n\n$python buildscripts/resmoke.py setup-multiversion   \\\n  --installDir /data/install                         \\\n  --linkDir /data/multiversion                       \\\n  --edition $edition                                 \\\n  --platform $platform                               \\\n  --architecture $architecture                       \\\n  --githubOauthToken \"${github_token}\"               \\\n  --useLatest 4.2 4.2.1\n\n# The platform and architecture for how some of the binaries are reported in\n# https://downloads.mongodb.org/full.json changed between MongoDB 4.2 and MongoDB 4.4.\n# Certain build variants define additional multiversion_*_44_or_later expansions in order to\n# be able to fetch a complete set of versions.\n\nif [ ! -z \"${multiversion_edition_44_or_later}\" ]; then\n  edition=\"${multiversion_edition_44_or_later}\"\nfi\n\nif [ ! -z \"${multiversion_platform_44_or_later}\" ]; then\n  platform=\"${multiversion_platform_44_or_later}\"\nfi\n\nif [ ! -z \"${multiversion_architecture_44_or_later}\" ]; then\n  architecture=\"${multiversion_architecture_44_or_later}\"\nfi\n\n$python buildscripts/resmoke.py setup-multiversion   \\\n  --installDir /data/install                         \\\n  --linkDir /data/multiversion                       \\\n  --edition $edition                                 \\\n  --platform $platform                               \\\n  --architecture $architecture                       \\\n  --githubOauthToken \"${github_token}\"               \\\n  --useLatest 4.4 4.7 4.8 4.9\n\n# This is primarily for tests for infrastructure which don't always need the latest\n# binaries.\nif [ ! -z \"${install_master_bin}\" ]; then\n  $python buildscripts/resmoke.py setup-multiversion   \\\n    --installDir /data/install                         \\\n    --linkDir /data/multiversion                       \\\n    --edition $edition                                 \\\n    --platform $platform                               \\\n    --architecture $architecture                       \\\n    --githubOauthToken \"${github_token}\"               \\\n    --useLatest master\nfi\n"
        working_dir: src
        shell: bash
    - command: expansions.write
      params:
        file: expansions.yml
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - src/evergreen/burn_in_tests.sh
        env:
          python: "${python}"
          workdir: "${workdir}"
      type: test
    - command: archive.targz_pack
      params:
        target: src/burn_in_tests_gen.tgz
        source_dir: src
        include:
          - burn_in_tests_gen.json
    - command: s3.put
      params:
        local_file: src/burn_in_tests_gen.tgz
        remote_file: "${project}/${build_variant}/${revision}/burn_in_tests_gen/burn_in_tests_gen-${build_id}.tgz"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/gzip
        display_name: "Burn_in_tests Task Config - Execution ${execution}"
    - command: generate.tasks
      params:
        files:
          - src/burn_in_tests_gen.json
  save jepsen artifacts:
    - command: archive.targz_pack
      params:
        target: src/jepsen-mongod-logs.tgz
        source_dir: "${workdir}/src/jepsen-workdir"
        include:
          - "./**.log"
    - command: s3.put
      params:
        local_file: src/jepsen-mongod-logs.tgz
        remote_file: "${project}/${build_variant}/${revision}/jepsen/jepsen-mongod-logs-${task_id}-${execution}.tgz"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/gzip
        display_name: "Jepsen mongod Logs - ${execution}"
        optional: true
    - command: archive.targz_pack
      params:
        target: src/jepsen-results.tgz
        source_dir: src/jepsen-mongodb/store
        include:
          - "./**"
    - command: s3.put
      params:
        local_file: src/jepsen-results.tgz
        remote_file: "${project}/${build_variant}/${revision}/jepsen/jepsen-results-${task_id}-${execution}.tgz"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/gzip
        display_name: "Jepsen Test Results - ${execution}"
        optional: true
  run tests:
    - command: shell.exec
      params:
        script: "set -o verbose\nset -o errexit\n\n${activate_virtualenv}\n$python buildscripts/evergreen_task_timeout.py \\\n  --task-name ${task_name}                     \\\n  --build-variant ${build_variant}             \\\n  --evg-alias '${alias|}'                      \\\n  --timeout ${timeout_secs|0}                  \\\n  --exec-timeout ${exec_timeout_secs|0}        \\\n  --out-file task_timeout_expansions.yml\n"
        working_dir: src
        shell: bash
    - command: expansions.update
      params:
        file: src/task_timeout_expansions.yml
        ignore_missing_file: true
    - command: timeout.update
      params:
        exec_timeout_secs: "${timeout_secs}"
    - command: expansions.update
      params:
        updates:
          - key: aws_key_remote
            value: "${mongodatafiles_aws_key}"
          - key: aws_profile_remote
            value: mongodata_aws
          - key: aws_secret_remote
            value: "${mongodatafiles_aws_secret}"
        env:
          CEDAR_USER: "${cedar_user}"
          CEDAR_API_KEY: "${cedar_api_key}"
    - command: shell.exec
      params:
        script: "set -o errexit\n\n# Since the macros 'private_key_remote' and 'private_key_file' are not always defined\n# we default to /dev/null to avoid syntax errors of an empty expansion.\nif [ ! -z \"${private_key_remote}\" ] && [ ! -z \"${private_key_file}\" ] ; then\n  mkdir -p ~/.ssh\n  echo -n \"${private_key_remote}\" > ${private_key_file|/dev/null}\n  chmod 0600 ${private_key_file|/dev/null}\nfi\n\n# Ensure a clean aws configuration state\nrm -rf ~/.aws\nmkdir -p ~/.aws\n\n# If ${aws_profile_remote} is not specified then the config & credentials are\n# stored in the 'default' profile.\naws_profile=\"${aws_profile_remote|default}\"\n\n# The profile in the config file is specified as [profile <profile>], except\n# for [default], see http://boto3.readthedocs.io/en/latest/guide/configuration.html\nif [ $aws_profile = \"default\" ] ; then\n  aws_profile_config=\"[default]\"\nelse\n  aws_profile_config=\"[profile $aws_profile]\"\nfi\ncat <<EOF >> ~/.aws/config\n$aws_profile_config\nregion = us-east-1\nEOF\n\n# The profile in the credentials file is specified as [<profile>].\ncat <<EOF >> ~/.aws/credentials\n[$aws_profile]\naws_access_key_id = ${aws_key_remote}\naws_secret_access_key = ${aws_secret_remote}\nEOF\n\ncat <<EOF > ~/.boto\n[Boto]\nhttps_validate_certificates = False\nEOF\n"
        silent: true
        shell: bash
    - command: shell.exec
      params:
        script: "set -o verbose\nset -o errexit\n\n${activate_virtualenv}\n$python buildscripts/evergreen_resmoke_job_count.py \\\n  --taskName ${task_name}                           \\\n  --buildVariant ${build_variant}                   \\\n  --distro ${distro_id}                             \\\n  --jobFactor ${resmoke_jobs_factor|1}              \\\n  --jobsMax ${resmoke_jobs_max|0}                   \\\n  --outFile resmoke_jobs_expansion.yml\n"
        working_dir: src
        shell: bash
    - command: expansions.update
      params:
        file: src/resmoke_jobs_expansion.yml
        ignore_missing_file: true
    - command: shell.exec
      params:
        script: "# Export these before verbose is set to avoid sharing sensitive info.\nexport CEDAR_USERNAME=${cedar_user}\nexport CEDAR_API_KEY=${cedar_api_key}\n\nset -o errexit\nset -o verbose\n\nif [[ ${disable_unit_tests|false} = \"false\" && ! -f ${skip_tests|/dev/null} ]]; then\n\n# activate the virtualenv if it has been set up\n${activate_virtualenv}\n\n# on *SAN builds, extract the debug symbols so they're available\n# to the symbolizer\nif [[ -n \"${san_options}\" ]]; then\n  # the debug symbols archive isn't always available (not every *SAN\n  # task requires compile)\n  if [[ -f \"mongo-debugsymbols.tgz\" ]]; then\n    tar xf mongo-debugsymbols.tgz\n  else\n    echo \"mongo-debugsymbols.tgz is not available. If you're seeing this message in a task that uses mongod or mongos binaries, please ensure debug symbols have been generated, otherwise the llvm-symbolizer may not correctly symbolize the sanitizer output.\"\n  fi\nfi\n\n\n# Set the TMPDIR environment variable to be a directory in the task's working\n# directory so that temporary files created by processes spawned by resmoke.py get\n# cleaned up after the task completes. This also ensures the spawned processes\n# aren't impacted by limited space in the mount point for the /tmp directory.\nexport TMPDIR=\"${workdir}/tmp\"\nmkdir -p $TMPDIR\n\nif [ -f /proc/self/coredump_filter ]; then\n  # Set the shell process (and its children processes) to dump ELF headers (bit 4),\n  # anonymous shared mappings (bit 1), and anonymous private mappings (bit 0).\n  echo 0x13 > /proc/self/coredump_filter\n\n  if [ -f /sbin/sysctl ]; then\n    # Check that the core pattern is set explicitly on our distro image instead\n    # of being the OS's default value. This ensures that coredump names are consistent\n    # across distros and can be picked up by Evergreen.\n    core_pattern=$(/sbin/sysctl -n \"kernel.core_pattern\")\n    if [ \"$core_pattern\" = \"dump_%e.%p.core\" ]; then\n      echo \"Enabling coredumps\"\n      ulimit -c unlimited\n    fi\n  fi\nfi\n\nif [ $(uname -s) == \"Darwin\" ]; then\n    core_pattern_mac=$(/usr/sbin/sysctl -n \"kern.corefile\")\n    if [ \"$core_pattern_mac\" = \"dump_%N.%P.core\" ]; then\n      echo \"Enabling coredumps\"\n      ulimit -c unlimited\n    fi\nfi\n\nextra_args=\"$extra_args --jobs=${resmoke_jobs|1}\"\n\nif [ ${should_shuffle|true} = true ]; then\n  extra_args=\"$extra_args --shuffle\"\nfi\n\nif [ ${continue_on_failure|true} = true ]; then\n  extra_args=\"$extra_args --continueOnFailure\"\nfi\n\n# We reduce the storage engine's cache size to reduce the likelihood of a mongod process\n# being killed by the OOM killer. The --storageEngineCacheSizeGB command line option is only\n# filled in with a default value here if one hasn't already been specified in the task's\n# definition or build variant's definition.\nset +o errexit\necho \"${resmoke_args} ${test_flags}\" | grep -q storageEngineCacheSizeGB\nif [ $? -eq 1 ]; then\n  echo \"${resmoke_args} ${test_flags}\" | grep -q \"\\-\\-storageEngine=inMemory\"\n  if [ $? -eq 0 ]; then\n    # We use a default of 4GB for the InMemory storage engine.\n    extra_args=\"$extra_args --storageEngineCacheSizeGB=4\"\n  else\n    # We use a default of 1GB for all other storage engines.\n    extra_args=\"$extra_args --storageEngineCacheSizeGB=1\"\n  fi\nfi\nset -o errexit\n\n\n# Reduce the JSHeapLimit for the serial_run task task on Code Coverage builder variant.\nif [[ \"${build_variant}\" = \"enterprise-rhel-80-64-bit-coverage\" && \"${task_name}\" = \"serial_run\" ]]; then\n  extra_args=\"$extra_args --mongodSetParameter {'jsHeapLimitMB':10}\"\nfi\n\npath_value=\"$PATH\"\nif [ ${variant_path_suffix} ]; then\n  path_value=\"$path_value:${variant_path_suffix}\"\nfi\nif [ ${task_path_suffix} ]; then\n  path_value=\"$path_value:${task_path_suffix}\"\nfi\n\n# The \"resmoke_wrapper\" expansion is used by the 'burn_in_tests' task to wrap the resmoke.py\n# invocation. It doesn't set any environment variables and should therefore come last in\n# this list of expansions.\nset +o errexit\nPATH=\"$path_value\"                                \\\n    AWS_PROFILE=${aws_profile_remote}             \\\n    ${gcov_environment}                           \\\n    ${lang_environment}                           \\\n    ${san_options}                                \\\n    ${snmp_config_path}                           \\\n    ${resmoke_wrapper}                            \\\n    $python buildscripts/resmoke.py run           \\\n        ${record_with}                            \\\n        ${resmoke_args}                           \\\n        $extra_args                               \\\n        ${test_flags}                             \\\n        --log=buildlogger                         \\\n        --staggerJobs=on                          \\\n        --installDir=${install_dir|dist-test/bin} \\\n        --buildId=${build_id}                     \\\n        --distroId=${distro_id}                   \\\n        --executionNumber=${execution}            \\\n        --projectName=${project}                  \\\n        --gitRevision=${revision}                 \\\n        --revisionOrderId=${revision_order_id}    \\\n        --taskId=${task_id}                       \\\n        --taskName=${task_name}                   \\\n        --variantName=${build_variant}            \\\n        --versionId=${version_id}                 \\\n        --reportFile=report.json                  \\\n        --perfReportFile=perf.json\nresmoke_exit_code=$?\nset -o errexit\n\nif [[ -n \"${record_with}\" ]]; then\n  recording_size=$(du -ch *.undo | grep total)\n  echo \"UndoDB produced recordings that were $recording_size (uncompressed) on disk\"\n  if [[ $resmoke_exit_code = 0 ]]; then\n    echo \"Resmoke exited successfully. UndoDB recordings will not be saved.\"\n    rm *.undo || true\n  fi\nfi\n\n# 74 is exit code for IOError on POSIX systems, which is raised when the machine is\n# shutting down.\n#\n# 75 is exit code resmoke.py uses when the log output would be incomplete due to failing\n# to communicate with logkeeper.\nif [[ $resmoke_exit_code = 74 || $resmoke_exit_code = 75 ]]; then\n  echo $resmoke_exit_code > run_tests_infrastructure_failure\n  exit 0\nelif [ $resmoke_exit_code != 0 ]; then\n  # On failure save the resmoke exit code.\n  echo $resmoke_exit_code > resmoke_error_code\nelif [ $resmoke_exit_code = 0 ]; then\n  # On success delete core files.\n  core_files=$(/usr/bin/find -H .. \\( -name \"*.core\" -o -name \"*.mdmp\" \\) 2> /dev/null)\n  rm -rf $core_files\nfi\nexit $resmoke_exit_code\nfi # end if [[ ${disable_unit_tests} && ! -f ${skip_tests|/dev/null} ]]\n"
        working_dir: src
        shell: bash
      type: test
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/check_run_tests_infrastructure_failure.sh"
      type: setup
  tar failed unittests:
    command: archive.targz_pack
    params:
      target: mongo-unittests.tgz
      source_dir: src/dist-unittests
      include:
        - "**"
  setup jstestfuzz:
    - command: shell.exec
      params:
        script: "set -o errexit\nset -o verbose\n\n${add_nodejs_to_path}\n\ngit clone git@github.com:10gen/jstestfuzz.git\n\npushd jstestfuzz\n  npm install\n  npm run prepare\npopd\n"
        working_dir: src
        shell: bash
  wait for resmoke to shutdown:
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/wait_for_resmoke_to_shutdown.sh"
  fetch dist debugsymbols:
    command: s3.get
    params:
      local_file: src/mongo-debugsymbols.tgz
      extract_to: ~
      remote_file: "${project}/${build_variant}/${revision}/dist/mongo-${build_id}-debugsymbols.${ext|tgz}"
      aws_key: "${aws_key}"
      aws_secret: "${aws_secret}"
      bucket: mciuploads
  set up notary client credentials:
    command: shell.exec
    params:
      script: "set -o errexit\n\ncat <<EOF > notary_env.sh\nexport NOTARY_TOKEN=${signing_auth_token_50}\nexport BARQUE_USERNAME=${barque_user}\nexport BARQUE_API_KEY=${barque_api_key}\nEOF\n\necho \"${signing_auth_token_50}\" > signing_auth_token\n"
      working_dir: src
      silent: true
      shell: bash
  run diskstats:
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/run_diskstats.sh"
      background: true
      system_log: true
  attach artifacts:
    command: attach.artifacts
    params:
      files:
        - "${archive_file|src/archive.json}"
      optional: true
      ignore_artifacts_for_spawn: false
  scons lint:
    - command: expansions.write
      params:
        file: expansions.yml
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - src/evergreen/scons_lint.sh
        env:
          python: "${python}"
          workdir: "${workdir}"
      type: test
  do multiversion setup:
    command: shell.exec
    params:
      script: "set -o errexit\nset -o verbose\n${activate_virtualenv}\nrm -rf /data/install /data/multiversion\nedition=\"${multiversion_edition|base}\"\nplatform=\"${multiversion_platform|linux_x86_64}\"\narchitecture=\"${multiversion_architecture|x86_64}\"\n$python buildscripts/resmoke.py setup-multiversion   \\\n  --installDir /data/install                         \\\n  --linkDir /data/multiversion                       \\\n  --edition $edition                                 \\\n  --platform $platform                               \\\n  --architecture $architecture                       \\\n  --githubOauthToken \"${github_token}\"               \\\n  --useLatest 3.6 4.0\n# The platform and architecture for how some of the binaries are reported in\n# https://downloads.mongodb.org/full.json changed between MongoDB 4.0 and MongoDB 4.2.\n# Certain build variants define additional multiversion_*_42_or_later expansions in order to\n# be able to fetch a complete set of versions.\nif [ ! -z \"${multiversion_edition_42_or_later}\" ]; then\n  edition=\"${multiversion_edition_42_or_later}\"\nfi\nif [ ! -z \"${multiversion_platform_42_or_later}\" ]; then\n  platform=\"${multiversion_platform_42_or_later}\"\nfi\nif [ ! -z \"${multiversion_architecture_42_or_later}\" ]; then\n  architecture=\"${multiversion_architecture_42_or_later}\"\nfi\n$python buildscripts/resmoke.py setup-multiversion   \\\n  --installDir /data/install                         \\\n  --linkDir /data/multiversion                       \\\n  --edition $edition                                 \\\n  --platform $platform                               \\\n  --architecture $architecture                       \\\n  --githubOauthToken \"${github_token}\"               \\\n  --useLatest 4.2 4.2.1\n# The platform and architecture for how some of the binaries are reported in\n# https://downloads.mongodb.org/full.json changed between MongoDB 4.2 and MongoDB 4.4.\n# Certain build variants define additional multiversion_*_44_or_later expansions in order to\n# be able to fetch a complete set of versions.\nif [ ! -z \"${multiversion_edition_44_or_later}\" ]; then\n  edition=\"${multiversion_edition_44_or_later}\"\nfi\nif [ ! -z \"${multiversion_platform_44_or_later}\" ]; then\n  platform=\"${multiversion_platform_44_or_later}\"\nfi\nif [ ! -z \"${multiversion_architecture_44_or_later}\" ]; then\n  architecture=\"${multiversion_architecture_44_or_later}\"\nfi\n$python buildscripts/resmoke.py setup-multiversion   \\\n  --installDir /data/install                         \\\n  --linkDir /data/multiversion                       \\\n  --edition $edition                                 \\\n  --platform $platform                               \\\n  --architecture $architecture                       \\\n  --githubOauthToken \"${github_token}\"               \\\n  --useLatest 4.4 4.7 4.8 4.9\n# This is primarily for tests for infrastructure which don't always need the latest\n# binaries.\nif [ ! -z \"${install_master_bin}\" ]; then\n  $python buildscripts/resmoke.py setup-multiversion   \\\n    --installDir /data/install                         \\\n    --linkDir /data/multiversion                       \\\n    --edition $edition                                 \\\n    --platform $platform                               \\\n    --architecture $architecture                       \\\n    --githubOauthToken \"${github_token}\"               \\\n    --useLatest master\nfi\n"
      working_dir: src
      shell: bash
  archive failed unittests:
    command: s3.put
    params:
      local_file: mongo-unittests.tgz
      remote_file: "${project}/${build_variant}/${revision}/unittests/mongo-unittests-${build_id}-${task_name}-${execution}.tgz"
      aws_key: "${aws_key}"
      aws_secret: "${aws_secret}"
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: "Unit tests - Execution ${execution}"
      optional: true
  tar jepsen logs:
    command: archive.targz_pack
    params:
      target: src/jepsen-mongod-logs.tgz
      source_dir: "${workdir}/src/jepsen-workdir"
      include:
        - "./**.log"
  update resmoke jobs expansions:
    command: expansions.update
    params:
      file: src/resmoke_jobs_expansion.yml
      ignore_missing_file: true
  multiversion_setup:
    - command: shell.exec
      params:
        script: "set -o errexit\nset -o verbose\n\n${activate_virtualenv}\n\nrm -rf /data/install /data/multiversion\n\nedition=\"${multiversion_edition|base}\"\nplatform=\"${multiversion_platform|linux_x86_64}\"\narchitecture=\"${multiversion_architecture|x86_64}\"\n\n$python buildscripts/resmoke.py setup-multiversion   \\\n  --installDir /data/install                         \\\n  --linkDir /data/multiversion                       \\\n  --edition $edition                                 \\\n  --platform $platform                               \\\n  --architecture $architecture                       \\\n  --githubOauthToken \"${github_token}\"               \\\n  --useLatest 3.6 4.0\n\n# The platform and architecture for how some of the binaries are reported in\n# https://downloads.mongodb.org/full.json changed between MongoDB 4.0 and MongoDB 4.2.\n# Certain build variants define additional multiversion_*_42_or_later expansions in order to\n# be able to fetch a complete set of versions.\n\nif [ ! -z \"${multiversion_edition_42_or_later}\" ]; then\n  edition=\"${multiversion_edition_42_or_later}\"\nfi\n\nif [ ! -z \"${multiversion_platform_42_or_later}\" ]; then\n  platform=\"${multiversion_platform_42_or_later}\"\nfi\n\nif [ ! -z \"${multiversion_architecture_42_or_later}\" ]; then\n  architecture=\"${multiversion_architecture_42_or_later}\"\nfi\n\n$python buildscripts/resmoke.py setup-multiversion   \\\n  --installDir /data/install                         \\\n  --linkDir /data/multiversion                       \\\n  --edition $edition                                 \\\n  --platform $platform                               \\\n  --architecture $architecture                       \\\n  --githubOauthToken \"${github_token}\"               \\\n  --useLatest 4.2 4.2.1\n\n# The platform and architecture for how some of the binaries are reported in\n# https://downloads.mongodb.org/full.json changed between MongoDB 4.2 and MongoDB 4.4.\n# Certain build variants define additional multiversion_*_44_or_later expansions in order to\n# be able to fetch a complete set of versions.\n\nif [ ! -z \"${multiversion_edition_44_or_later}\" ]; then\n  edition=\"${multiversion_edition_44_or_later}\"\nfi\n\nif [ ! -z \"${multiversion_platform_44_or_later}\" ]; then\n  platform=\"${multiversion_platform_44_or_later}\"\nfi\n\nif [ ! -z \"${multiversion_architecture_44_or_later}\" ]; then\n  architecture=\"${multiversion_architecture_44_or_later}\"\nfi\n\n$python buildscripts/resmoke.py setup-multiversion   \\\n  --installDir /data/install                         \\\n  --linkDir /data/multiversion                       \\\n  --edition $edition                                 \\\n  --platform $platform                               \\\n  --architecture $architecture                       \\\n  --githubOauthToken \"${github_token}\"               \\\n  --useLatest 4.4 4.7 4.8 4.9\n\n# This is primarily for tests for infrastructure which don't always need the latest\n# binaries.\nif [ ! -z \"${install_master_bin}\" ]; then\n  $python buildscripts/resmoke.py setup-multiversion   \\\n    --installDir /data/install                         \\\n    --linkDir /data/multiversion                       \\\n    --edition $edition                                 \\\n    --platform $platform                               \\\n    --architecture $architecture                       \\\n    --githubOauthToken \"${github_token}\"               \\\n    --useLatest master\nfi\n"
        working_dir: src
        shell: bash
  generate explicit multiversion tasks:
    - command: expansions.update
      params:
        updates:
          - key: activate_virtualenv
            value: "# check if virtualenv is set up\nif [ -d \"${workdir}/venv\" ]; then\n  if [ \"Windows_NT\" = \"$OS\" ]; then\n    # Need to quote the path on Windows to preserve the separator.\n    . \"${workdir}/venv/Scripts/activate\" 2> /tmp/activate_error.log\n  else\n    . ${workdir}/venv/bin/activate 2> /tmp/activate_error.log\n  fi\n  if [ $? -ne 0 ]; then\n    echo \"Failed to activate virtualenv: $(cat /tmp/activate_error.log)\"\n  fi\n  python=python\nelse\n  python=${python|/opt/mongodbtoolchain/v3/bin/python3}\nfi\n\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  export PYTHONPATH=\"$PYTHONPATH;$(cygpath -w ${workdir}/src)\"\nelse\n  export PYTHONPATH=\"$PYTHONPATH:${workdir}/src\"\nfi\n\necho \"python set to $(which $python)\"\n"
          - key: add_nodejs_to_path
            value: "# Add node and npm binaries to PATH\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  # An \"npm\" directory might not have been created in %APPDATA% by the Windows installer.\n  # Work around the issue by specifying a different %APPDATA% path.\n  # See: https://github.com/nodejs/node-v0.x-archive/issues/8141\n  export APPDATA=${workdir}/npm-app-data\n  export PATH=\"$PATH:/cygdrive/c/Program Files (x86)/nodejs\" # Windows location\n  # TODO: this is to work around BUILD-8652\n  cd \"$(pwd -P | sed 's,cygdrive/c/,cygdrive/z/,')\"\nelse\n  export PATH=\"$PATH:/opt/node/bin\"\nfi\n"
          - key: posix_workdir
            value: "eval 'if [ \"Windows_NT\" = \"$OS\" ]; then echo $(cygpath -u \"${workdir}\"); else echo ${workdir}; fi'"
          - key: set_sudo
            value: "set -o > /tmp/settings.log\nset +o errexit\ngrep errexit /tmp/settings.log | grep on\nerrexit_on=$?\n# Set errexit \"off\".\nset +o errexit\nsudo=\n# Use sudo, if it is supported.\nsudo date > /dev/null 2>&1\nif [ $? -eq 0 ]; then\n  sudo=sudo\nfi\n# Set errexit \"on\", if previously enabled.\nif [ $errexit_on -eq 0 ]; then\n  set -o errexit\nfi\n"
          - key: mongo_binaries
            value: "${project}/${build_variant}/${revision}/binaries/mongo-${build_id}.${ext|tgz}"
          - key: mongo_cryptd
            value: "${project}/${build_variant}/${revision}/binaries/mongo-cryptd-${build_id}.${ext|tgz}"
          - key: mongo_cryptd_debugsymbols
            value: "${project}/${build_variant}/${revision}/binaries/mongo-cryptd-debugsymbols-${build_id}.${ext|tgz}"
          - key: mh_archive
            value: "${project}/${build_variant}/${revision}/binaries/mh-${build_id}.${ext|tgz}"
          - key: mh_debugsymbols
            value: "${project}/${build_variant}/${revision}/debugsymbols/mh-debugsymbols-${build_id}.${ext|tgz}"
          - key: mongo_debugsymbols
            value: "${project}/${build_variant}/${revision}/debugsymbols/debugsymbols-${build_id}.${ext|tgz}"
          - key: mongo_shell
            value: "${project}/${build_variant}/${revision}/binaries/mongo-shell-${build_id}.${ext|tgz}"
          - key: mongo_shell_debugsymbols
            value: "${project}/${build_variant}/${revision}/binaries/mongo-shell-debugsymbols-${build_id}.${ext|tgz}"
          - key: mongo_fuzzer_corpus_mciuploads
            value: "${project}/${build_variant}/${revision}/libfuzzer-corpora/corpora-${build_id}.${ext|tgz}"
          - key: mongo_fuzzer_corpus
            value: "corpora-${project}-${build_variant}.${ext|tgz}"
          - key: skip_tests
            value: "skip_test-${build_id}"
    - command: shell.exec
      params:
        script: "# exit immediately if virtualenv is not found\nset -o errexit\n\npython_loc=$(which ${python|/opt/mongodbtoolchain/v3/bin/python3})\nvenv_dir=\"${workdir}/venv\"\n\"$python_loc\" -m venv --system-site-packages \"$venv_dir\"\n\n# venv creates its Scripts/activate file with CLRF endings, which\n# cygwin bash does not like. dos2unix it\n# (See https://bugs.python.org/issue32451)\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  dos2unix \"${workdir}/venv/Scripts/activate\"\nfi\n\nexport VIRTUAL_ENV_DISABLE_PROMPT=yes\n\n# Not all git get project calls clone into ${workdir}/src so we allow\n# callers to tell us where the pip requirements files are.\npip_dir=\"${pip_dir}\"\nif [[ -z $pip_dir ]]; then\n  # Default to most common location\n  pip_dir=\"${workdir}/src/etc/pip\"\nfi\n\n# Same as above we have to use quotes to preserve the\n# Windows path separator\ntoolchain_txt=\"$pip_dir/toolchain-requirements.txt\"\n${activate_virtualenv}\necho \"Upgrading pip to 21.0.1\"\npython -m pip install \"pip==21.0.1\"\npython -m pip install -r \"$toolchain_txt\" -q\npython -m pip freeze > pip-requirements.txt\n"
        shell: bash
    - command: s3.put
      params:
        local_file: pip-requirements.txt
        remote_file: "${project}/${build_variant}/${revision}/pip-requirements-${task_id}-${execution}.txt"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: atext-plain
        display_name: Pip Requirements
    - command: shell.exec
      params:
        script: "# Create the Evergreen API credentials\ncat > .evergreen.yml <<END_OF_CREDS\napi_server_host: https://evergreen.mongodb.com/api\napi_key: \"${evergreen_api_key}\"\nuser: \"${evergreen_api_user}\"\nEND_OF_CREDS\n"
        working_dir: src
        silent: true
        shell: bash
      type: test
    - command: shell.exec
      params:
        script: "set -o errexit\nset -o verbose\n\n${activate_virtualenv}\n\nrm -rf /data/install /data/multiversion\n\nedition=\"${multiversion_edition|base}\"\nplatform=\"${multiversion_platform|linux_x86_64}\"\narchitecture=\"${multiversion_architecture|x86_64}\"\n\n$python buildscripts/resmoke.py setup-multiversion   \\\n  --installDir /data/install                         \\\n  --linkDir /data/multiversion                       \\\n  --edition $edition                                 \\\n  --platform $platform                               \\\n  --architecture $architecture                       \\\n  --githubOauthToken \"${github_token}\"               \\\n  --useLatest 3.6 4.0\n\n# The platform and architecture for how some of the binaries are reported in\n# https://downloads.mongodb.org/full.json changed between MongoDB 4.0 and MongoDB 4.2.\n# Certain build variants define additional multiversion_*_42_or_later expansions in order to\n# be able to fetch a complete set of versions.\n\nif [ ! -z \"${multiversion_edition_42_or_later}\" ]; then\n  edition=\"${multiversion_edition_42_or_later}\"\nfi\n\nif [ ! -z \"${multiversion_platform_42_or_later}\" ]; then\n  platform=\"${multiversion_platform_42_or_later}\"\nfi\n\nif [ ! -z \"${multiversion_architecture_42_or_later}\" ]; then\n  architecture=\"${multiversion_architecture_42_or_later}\"\nfi\n\n$python buildscripts/resmoke.py setup-multiversion   \\\n  --installDir /data/install                         \\\n  --linkDir /data/multiversion                       \\\n  --edition $edition                                 \\\n  --platform $platform                               \\\n  --architecture $architecture                       \\\n  --githubOauthToken \"${github_token}\"               \\\n  --useLatest 4.2 4.2.1\n\n# The platform and architecture for how some of the binaries are reported in\n# https://downloads.mongodb.org/full.json changed between MongoDB 4.2 and MongoDB 4.4.\n# Certain build variants define additional multiversion_*_44_or_later expansions in order to\n# be able to fetch a complete set of versions.\n\nif [ ! -z \"${multiversion_edition_44_or_later}\" ]; then\n  edition=\"${multiversion_edition_44_or_later}\"\nfi\n\nif [ ! -z \"${multiversion_platform_44_or_later}\" ]; then\n  platform=\"${multiversion_platform_44_or_later}\"\nfi\n\nif [ ! -z \"${multiversion_architecture_44_or_later}\" ]; then\n  architecture=\"${multiversion_architecture_44_or_later}\"\nfi\n\n$python buildscripts/resmoke.py setup-multiversion   \\\n  --installDir /data/install                         \\\n  --linkDir /data/multiversion                       \\\n  --edition $edition                                 \\\n  --platform $platform                               \\\n  --architecture $architecture                       \\\n  --githubOauthToken \"${github_token}\"               \\\n  --useLatest 4.4 4.7 4.8 4.9\n\n# This is primarily for tests for infrastructure which don't always need the latest\n# binaries.\nif [ ! -z \"${install_master_bin}\" ]; then\n  $python buildscripts/resmoke.py setup-multiversion   \\\n    --installDir /data/install                         \\\n    --linkDir /data/multiversion                       \\\n    --edition $edition                                 \\\n    --platform $platform                               \\\n    --architecture $architecture                       \\\n    --githubOauthToken \"${github_token}\"               \\\n    --useLatest master\nfi\n"
        working_dir: src
        shell: bash
    - command: expansions.write
      params:
        file: src/expansions.yml
    - command: shell.exec
      params:
        script: "set -o errexit\n\n${activate_virtualenv}\n$python buildscripts/evergreen_generate_resmoke_tasks.py --expansion-file expansions.yml --verbose\n$python buildscripts/evergreen_gen_multiversion_tests.py generate-exclude-tags --task-path-suffix=${use_multiversion}\n"
        working_dir: src
        shell: bash
      type: test
    - command: archive.targz_pack
      params:
        target: generate_tasks_config.tgz
        source_dir: src/generated_resmoke_config
        include:
          - "*"
    - command: s3.put
      params:
        local_file: generate_tasks_config.tgz
        remote_file: "${project}/${build_variant}/${revision}/generate_tasks/${task_name}-${build_id}.tgz"
        aws_key: "${aws_key}"
        aws_secret: "${aws_secret}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/gzip
        display_name: "Generated Task Config - Execution ${execution}"
        optional: true
    - command: timeout.update
      params:
        exec_timeout_secs: 10800
        timeout_secs: 10800
    - command: generate.tasks
      params:
        files:
          - src/generated_resmoke_config/*.json
  run idl tests:
    - command: shell.exec
      params:
        script: "set -o verbose\nset -o errexit\n\n${activate_virtualenv}\n$python buildscripts/idl/run_tests.py\n"
        working_dir: src
        shell: bash
      type: test
  remove files:
    command: shell.exec
    params:
      script: "if [ -z \"${files}\" ]; then\n  exit 0\nfi\nfor file in ${files}\ndo\n  if [ -f \"$file\" ]; then\n    echo \"Removing file $file\"\n    rm -f $file\n  fi\ndone\n"
      shell: bash
  tar system resource information:
    command: archive.targz_pack
    params:
      target: system-resource-info.tgz
      source_dir: src
      include:
        - "./system_resource_info*"
  upload debugsymbols:
    command: s3.put
    params:
      local_file: "src/mongo-debugsymbols.${ext|tgz}"
      remote_file: "${mongo_debugsymbols}"
      aws_key: "${aws_key}"
      aws_secret: "${aws_secret}"
      bucket: mciuploads
      permissions: public-read
      content_type: "${content_type|application/gzip}"
  fetch benchmarks:
    command: s3.get
    params:
      local_file: ~
      extract_to: src
      remote_file: "${project}/${build_variant}/${revision}/benchmarks/${build_id}.tgz"
      aws_key: "${aws_key}"
      aws_secret: "${aws_secret}"
      bucket: mciuploads
  upload pip requirements:
    command: s3.put
    params:
      local_file: pip-requirements.txt
      remote_file: "${project}/${build_variant}/${revision}/pip-requirements-${task_id}-${execution}.txt"
      aws_key: "${aws_key}"
      aws_secret: "${aws_secret}"
      bucket: mciuploads
      permissions: public-read
      content_type: atext-plain
      display_name: Pip Requirements
  archive system resource information:
    command: s3.put
    params:
      local_file: system-resource-info.tgz
      remote_file: "${project}/${build_variant}/${revision}/systemresourceinfo/mongo-system-resource-info-${task_id}-${execution}.tgz"
      aws_key: "${aws_key}"
      aws_secret: "${aws_secret}"
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: "System Resource Info - Execution ${execution}"
      optional: true
  run powercycle test:
    - command: shell.exec
      params:
        script: "set -o verbose\nset -o errexit\n\nif [ \"Windows_NT\" = \"$OS\" ]; then\n  user=Administrator\nelse\n  user=$USER\nfi\n\n${activate_virtualenv}\n# Set an exit trap so we can save the real exit status (see SERVER-34033).\ntrap 'echo $? > error_exit.txt; exit 0' EXIT\nset +o errexit\neval $python -u buildscripts/resmoke.py powercycle run \\\n  \"--sshUserHost=$(printf \"%s@%s\" \"$user\" \"${private_ip_address}\") \\\n  --sshConnection=\\\"-i ${private_key_file}\\\" \\\n  --taskName=${task_name}\"\n"
        working_dir: src
        shell: bash
      type: test
    - command: expansions.update
      params:
        file: src/powercycle_exit.yml
        ignore_missing_file: true
    - command: expansions.write
      params:
        file: src/expansions.yml
    - command: shell.exec
      params:
        script: "# Trigger a system failure if powercycle failed due to ssh access.\nif [ -n \"${ec2_ssh_failure}\" ]; then\n  echo \"ec2_ssh_failure detected - $(cat powercycle_exit.yml)\"\n  exit ${exit_code}\nfi\n"
        working_dir: src
        shell: bash
    - command: shell.exec
      params:
        script: "# Test exits from here with specified exit_code.\nif [ -n \"${exit_code}\" ]; then\n  # Python program saved exit_code\n  exit_code=${exit_code}\nelif [ -f error_exit.txt ]; then\n  # Bash trap exit_code\n  exit_code=$(cat error_exit.txt)\nelse\n  exit_code=0\nfi\necho \"Exiting powercycle with code $exit_code\"\nexit $exit_code\n"
        shell: bash
      type: test
pre:
  - command: manifest.load
  - func: git get project
  - func: kill processes
  - func: cleanup environment
  - func: set task expansion macros
post:
  - func: attach report
  - func: attach artifacts
  - func: save ec2 task artifacts
  - func: call BF Suggestion service
  - func: attach wiki page
  - func: kill processes
  - func: save local client logs
  - func: save code coverage data
  - func: save jepsen artifacts
  - func: save mongo coredumps
  - func: save failed unittests
  - func: save hang analyzer debugger files
  - func: save disk statistics
  - func: save system resource information
  - func: save UndoDB recordings
  - func: umount shared scons directory
  - func: cleanup FUSE watchdog
  - func: cleanup environment
timeout:
  - func: run hang analyzer
  - func: wait for resmoke to shutdown
modules:
  - name: enterprise
    repo: "git@github.com:10gen/mongo-enterprise-modules.git"
    branch: master
    prefix: src/mongo/db/modules
  - name: wtdevelop
    repo: "git@github.com:wiredtiger/wiredtiger.git"
    branch: develop
    prefix: src/third_party
stepback: true
pre_error_fails_task: true
oom_tracker: true
command_type: system
ignore:
  - ".*"
  - "!.clang-format"
  - "!.eslintrc.yml"
  - "*.md"
  - "*.rst"
  - "*.txt"
  - /distsrc/**
  - /docs/**
  - /etc/*.yml
  - "!/etc/evergreen.yml"
  - README
parameters:
  - key: patch_compile_flags
    description: Additional SCons flags to be applied during scons compile invocations in this patch
